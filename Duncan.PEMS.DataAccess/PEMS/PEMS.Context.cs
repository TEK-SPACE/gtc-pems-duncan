//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Duncan.PEMS.DataAccess.PEMS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PEMEntities : DbContext
    {
        public PEMEntities()
            : base("name=PEMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AccountStatu> AccountStatus { get; set; }
        public DbSet<AcquirerBatch> AcquirerBatches { get; set; }
        public DbSet<AcquirerIF> AcquirerIFs { get; set; }
        public DbSet<ActiveAlarm> ActiveAlarms { get; set; }
        public DbSet<AISyncupCustConfig> AISyncupCustConfigs { get; set; }
        public DbSet<AISyncupDataConfig> AISyncupDataConfigs { get; set; }
        public DbSet<AlamrUIDGen> AlamrUIDGens { get; set; }
        public DbSet<AlarmStatu> AlarmStatus { get; set; }
        public DbSet<AlarmTier> AlarmTiers { get; set; }
        public DbSet<Area> Areas { get; set; }
        public DbSet<AreaSeq> AreaSeqs { get; set; }
        public DbSet<AssetPending> AssetPendings { get; set; }
        public DbSet<AssetPendingReason> AssetPendingReasons { get; set; }
        public DbSet<AssetState> AssetStates { get; set; }
        public DbSet<AssetStateCustomer> AssetStateCustomers { get; set; }
        public DbSet<AssetType> AssetTypes { get; set; }
        public DbSet<AssetVersionMaster> AssetVersionMasters { get; set; }
        public DbSet<AuditLog> AuditLogs { get; set; }
        public DbSet<Bank> Banks { get; set; }
        public DbSet<BaySnapshot> BaySnapshots { get; set; }
        public DbSet<BlackListActive> BlackListActives { get; set; }
        public DbSet<BlackListArchive> BlackListArchives { get; set; }
        public DbSet<BlackListFile> BlackListFiles { get; set; }
        public DbSet<CardType> CardTypes { get; set; }
        public DbSet<CashBox> CashBoxes { get; set; }
        public DbSet<CashBoxAudit> CashBoxAudits { get; set; }
        public DbSet<CashBoxDataHistory> CashBoxDataHistories { get; set; }
        public DbSet<CashBoxDataImport> CashBoxDataImports { get; set; }
        public DbSet<CashBoxLocationType> CashBoxLocationTypes { get; set; }
        public DbSet<CBImpFile> CBImpFiles { get; set; }
        public DbSet<CoinDenomination> CoinDenominations { get; set; }
        public DbSet<CoinDenominationCustomer> CoinDenominationCustomers { get; set; }
        public DbSet<CollDataImport> CollDataImports { get; set; }
        public DbSet<CollDataMeterStatu> CollDataMeterStatus { get; set; }
        public DbSet<CollDataSched> CollDataScheds { get; set; }
        public DbSet<CollDataSumm> CollDataSumms { get; set; }
        public DbSet<CollectionRunMeter> CollectionRunMeters { get; set; }
        public DbSet<CollectionRunStatu> CollectionRunStatus { get; set; }
        public DbSet<CollectionRunVendor> CollectionRunVendors { get; set; }
        public DbSet<CollRoute> CollRoutes { get; set; }
        public DbSet<CollRouteManualAmount> CollRouteManualAmounts { get; set; }
        public DbSet<CollRouteSeq> CollRouteSeqs { get; set; }
        public DbSet<ColorCode> ColorCodes { get; set; }
        public DbSet<ConfigProfile> ConfigProfiles { get; set; }
        public DbSet<ConfigProfileSpace> ConfigProfileSpaces { get; set; }
        public DbSet<ConfigProfileSpaceAudit> ConfigProfileSpaceAudits { get; set; }
        public DbSet<ConfigStatu> ConfigStatus { get; set; }
        public DbSet<ConfigurationIDGen> ConfigurationIDGens { get; set; }
        public DbSet<CreditCardAttempt> CreditCardAttempts { get; set; }
        public DbSet<CreditCardType> CreditCardTypes { get; set; }
        public DbSet<CreditCardTypesCustomer> CreditCardTypesCustomers { get; set; }
        public DbSet<CurrentParkingSpotStatu> CurrentParkingSpotStatus { get; set; }
        public DbSet<CustomerBaseMeterFile> CustomerBaseMeterFiles { get; set; }
        public DbSet<CustomerDetail> CustomerDetails { get; set; }
        public DbSet<CustomerFileArchive> CustomerFileArchives { get; set; }
        public DbSet<CustomerProperty> CustomerProperties { get; set; }
        public DbSet<CustomerPropertyGroup> CustomerPropertyGroups { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomersAudit> CustomersAudits { get; set; }
        public DbSet<CustomGroup1> CustomGroup1 { get; set; }
        public DbSet<CustomGroup2> CustomGroup2 { get; set; }
        public DbSet<CustomGroup3> CustomGroup3 { get; set; }
        public DbSet<DataKeyAudit> DataKeyAudits { get; set; }
        public DbSet<DataKeyType> DataKeyTypes { get; set; }
        public DbSet<DayOfWeek> DayOfWeeks { get; set; }
        public DbSet<DemandZone> DemandZones { get; set; }
        public DbSet<DemandZoneCustomer> DemandZoneCustomers { get; set; }
        public DbSet<DiscountScheme> DiscountSchemes { get; set; }
        public DbSet<DiscountSchemeCustomer> DiscountSchemeCustomers { get; set; }
        public DbSet<DiscountSchemeCustomerInfo> DiscountSchemeCustomerInfoes { get; set; }
        public DbSet<DiscountSchemeEmailTemplate> DiscountSchemeEmailTemplates { get; set; }
        public DbSet<DiscountSchemeExpirationType> DiscountSchemeExpirationTypes { get; set; }
        public DbSet<DiscountSchemeMeter> DiscountSchemeMeters { get; set; }
        public DbSet<DiscountSchemeStatu> DiscountSchemeStatus { get; set; }
        public DbSet<DiscountSchemeType> DiscountSchemeTypes { get; set; }
        public DbSet<DiscountUserCard> DiscountUserCards { get; set; }
        public DbSet<DiscountUserScheme> DiscountUserSchemes { get; set; }
        public DbSet<DiscountUserSchemeAudit> DiscountUserSchemeAudits { get; set; }
        public DbSet<EmailGroup> EmailGroups { get; set; }
        public DbSet<EmailTemplateType> EmailTemplateTypes { get; set; }
        public DbSet<EnforceRoute> EnforceRoutes { get; set; }
        public DbSet<EnforceRouteSeq> EnforceRouteSeqs { get; set; }
        public DbSet<EventCategory> EventCategories { get; set; }
        public DbSet<EventCodeAssetType> EventCodeAssetTypes { get; set; }
        public DbSet<EventCodeMaster> EventCodeMasters { get; set; }
        public DbSet<EventCode> EventCodes { get; set; }
        public DbSet<EventCodesAudit> EventCodesAudits { get; set; }
        public DbSet<EventLog> EventLogs { get; set; }
        public DbSet<EventSourceCustomer> EventSourceCustomers { get; set; }
        public DbSet<EventSource> EventSources { get; set; }
        public DbSet<EventState> EventStates { get; set; }
        public DbSet<EventType> EventTypes { get; set; }
        public DbSet<EventUIDGen> EventUIDGens { get; set; }
        public DbSet<FDFilesAudit> FDFilesAudits { get; set; }
        public DbSet<FDFileType> FDFileTypes { get; set; }
        public DbSet<FDFileTypeMeterGroup> FDFileTypeMeterGroups { get; set; }
        public DbSet<FDHousing> FDHousings { get; set; }
        public DbSet<FDHousingAudit> FDHousingAudits { get; set; }
        public DbSet<FDJobHistory> FDJobHistories { get; set; }
        public DbSet<FDJob> FDJobs { get; set; }
        public DbSet<FDJobStatu> FDJobStatus { get; set; }
        public DbSet<FileTypeMap> FileTypeMaps { get; set; }
        public DbSet<GatewayResp> GatewayResps { get; set; }
        public DbSet<Gateway> Gateways { get; set; }
        public DbSet<GatewaysAudit> GatewaysAudits { get; set; }
        public DbSet<GSMConnectionLog> GSMConnectionLogs { get; set; }
        public DbSet<GSMConnectionStatu> GSMConnectionStatus { get; set; }
        public DbSet<HolidayRate> HolidayRates { get; set; }
        public DbSet<HolidayRateConfiguration> HolidayRateConfigurations { get; set; }
        public DbSet<HolidayRateConfigurationProfile> HolidayRateConfigurationProfiles { get; set; }
        public DbSet<HolidayRateForConfiguration> HolidayRateForConfigurations { get; set; }
        public DbSet<HousingAudit> HousingAudits { get; set; }
        public DbSet<HousingMaster> HousingMasters { get; set; }
        public DbSet<HousingType> HousingTypes { get; set; }
        public DbSet<ImportDirectory> ImportDirectories { get; set; }
        public DbSet<InactiveRemark> InactiveRemarks { get; set; }
        public DbSet<LocationTier> LocationTiers { get; set; }
        public DbSet<LocationTierMaster> LocationTierMasters { get; set; }
        public DbSet<LookupItem> LookupItems { get; set; }
        public DbSet<MagneticFlux> MagneticFluxes { get; set; }
        public DbSet<MaintenanceCode> MaintenanceCodes { get; set; }
        public DbSet<MaintRoute> MaintRoutes { get; set; }
        public DbSet<MaintRouteSeq> MaintRouteSeqs { get; set; }
        public DbSet<MechanismMaster> MechanismMasters { get; set; }
        public DbSet<MechanismMasterCustomer> MechanismMasterCustomers { get; set; }
        public DbSet<MechHistory> MechHistories { get; set; }
        public DbSet<MechMasterAudit> MechMasterAudits { get; set; }
        public DbSet<MeterComm> MeterComms { get; set; }
        public DbSet<MeterDiagnostic> MeterDiagnostics { get; set; }
        public DbSet<MeterDiagnosticType> MeterDiagnosticTypes { get; set; }
        public DbSet<MeterDiagnosticTypeCustomer> MeterDiagnosticTypeCustomers { get; set; }
        public DbSet<MeterGroup> MeterGroups { get; set; }
        public DbSet<MeterInventory> MeterInventories { get; set; }
        public DbSet<metermap_bk> metermap_bk { get; set; }
        public DbSet<MeterMapAudit> MeterMapAudits { get; set; }
        public DbSet<MeterPushSchedule> MeterPushSchedules { get; set; }
        public DbSet<Meter> Meters { get; set; }
        public DbSet<Meters_CurrentState> Meters_CurrentState { get; set; }
        public DbSet<MetersAudit> MetersAudits { get; set; }
        public DbSet<MeterServiceStatu> MeterServiceStatus { get; set; }
        public DbSet<MeterStatusEvent> MeterStatusEvents { get; set; }
        public DbSet<MParkImport> MParkImports { get; set; }
        public DbSet<NonCompliantStatu> NonCompliantStatus { get; set; }
        public DbSet<NotificationMeterSchedule> NotificationMeterSchedules { get; set; }
        public DbSet<NotificationReceipient> NotificationReceipients { get; set; }
        public DbSet<NotificationTier> NotificationTiers { get; set; }
        public DbSet<NSC_Triggers_Logs> NSC_Triggers_Logs { get; set; }
        public DbSet<OccupancyStatu> OccupancyStatus { get; set; }
        public DbSet<OLTCardHash> OLTCardHashes { get; set; }
        public DbSet<OLTEventDetail> OLTEventDetails { get; set; }
        public DbSet<OperationalStatu> OperationalStatus { get; set; }
        public DbSet<OperationMode> OperationModes { get; set; }
        public DbSet<PAMActiveCustomer> PAMActiveCustomers { get; set; }
        public DbSet<PAMBayExpt> PAMBayExpts { get; set; }
        public DbSet<PAMCluster> PAMClusters { get; set; }
        public DbSet<PAMCustomerMap> PAMCustomerMaps { get; set; }
        public DbSet<PAMMeterAccess> PAMMeterAccesses { get; set; }
        public DbSet<ParkeonAlarm> ParkeonAlarms { get; set; }
        public DbSet<ParkingSchedule> ParkingSchedules { get; set; }
        public DbSet<ParkingSpaceDetail> ParkingSpaceDetails { get; set; }
        public DbSet<ParkingSpaceExpiryConfirmationEvent> ParkingSpaceExpiryConfirmationEvents { get; set; }
        public DbSet<ParkingSpaceMeterBayMap> ParkingSpaceMeterBayMaps { get; set; }
        public DbSet<ParkingSpaceOccupancy> ParkingSpaceOccupancies { get; set; }
        public DbSet<ParkingSpaceOccupancyAudit> ParkingSpaceOccupancyAudits { get; set; }
        public DbSet<ParkingSpace> ParkingSpaces { get; set; }
        public DbSet<ParkingSpacesAudit> ParkingSpacesAudits { get; set; }
        public DbSet<ParkSpaceRight> ParkSpaceRights { get; set; }
        public DbSet<ParkVehicle> ParkVehicles { get; set; }
        public DbSet<Part> Parts { get; set; }
        public DbSet<PayByCellAudit> PayByCellAudits { get; set; }
        public DbSet<PayByCellVendor> PayByCellVendors { get; set; }
        public DbSet<PaymentReceived> PaymentReceiveds { get; set; }
        public DbSet<PaymentTargetType> PaymentTargetTypes { get; set; }
        public DbSet<PaymentType> PaymentTypes { get; set; }
        public DbSet<PPOImport> PPOImports { get; set; }
        public DbSet<PPOStatusCode> PPOStatusCodes { get; set; }
        public DbSet<Process> Processes { get; set; }
        public DbSet<ProcessType> ProcessTypes { get; set; }
        public DbSet<PropertyGroup> PropertyGroups { get; set; }
        public DbSet<PublicHoliday> PublicHolidays { get; set; }
        public DbSet<PushStatu> PushStatus { get; set; }
        public DbSet<RateSchedule> RateSchedules { get; set; }
        public DbSet<RateScheduleConfiguration> RateScheduleConfigurations { get; set; }
        public DbSet<RateScheduleConfigurationProfile> RateScheduleConfigurationProfiles { get; set; }
        public DbSet<RateScheduleForConfiguration> RateScheduleForConfigurations { get; set; }
        public DbSet<RateTransmission> RateTransmissions { get; set; }
        public DbSet<RateTransmissionDetail> RateTransmissionDetails { get; set; }
        public DbSet<RateTransmissionJob> RateTransmissionJobs { get; set; }
        public DbSet<RegulatedHour> RegulatedHours { get; set; }
        public DbSet<RegulatedStatu> RegulatedStatus { get; set; }
        public DbSet<ReinoParameter> ReinoParameters { get; set; }
        public DbSet<Report> Reports { get; set; }
        public DbSet<ReportDetail> ReportDetails { get; set; }
        public DbSet<ReportMaster> ReportMasters { get; set; }
        public DbSet<RipnetProperty> RipnetProperties { get; set; }
        public DbSet<ScheduledMeter> ScheduledMeters { get; set; }
        public DbSet<ScheduleProcess> ScheduleProcesses { get; set; }
        public DbSet<Schedule> Schedules { get; set; }
        public DbSet<SensorEvent> SensorEvents { get; set; }
        public DbSet<SensorMapping> SensorMappings { get; set; }
        public DbSet<SensorMappingAudit> SensorMappingAudits { get; set; }
        public DbSet<SensorPaymentTransaction> SensorPaymentTransactions { get; set; }
        public DbSet<SensorPaymentTransactionAudit> SensorPaymentTransactionAudits { get; set; }
        public DbSet<Sensor> Sensors { get; set; }
        public DbSet<SensorsAudit> SensorsAudits { get; set; }
        public DbSet<SensorUndeterminedReason> SensorUndeterminedReasons { get; set; }
        public DbSet<ServerInstance> ServerInstances { get; set; }
        public DbSet<SFMeterMaintenanceEvent> SFMeterMaintenanceEvents { get; set; }
        public DbSet<SFPriceSchedule> SFPriceSchedules { get; set; }
        public DbSet<SLA_AssetDownTime> SLA_AssetDownTime { get; set; }
        public DbSet<SLA_Holiday> SLA_Holiday { get; set; }
        public DbSet<SLA_MaintenanceSchedule> SLA_MaintenanceSchedule { get; set; }
        public DbSet<SLA_OperationSchedule> SLA_OperationSchedule { get; set; }
        public DbSet<SLA_RegulatedSchedule> SLA_RegulatedSchedule { get; set; }
        public DbSet<SmartCardSerial> SmartCardSerials { get; set; }
        public DbSet<SpaceType> SpaceTypes { get; set; }
        public DbSet<StreetlineEvent> StreetlineEvents { get; set; }
        public DbSet<StreetlineSpace> StreetlineSpaces { get; set; }
        public DbSet<SubArea> SubAreas { get; set; }
        public DbSet<SubAreaSeq> SubAreaSeqs { get; set; }
        public DbSet<SupportedCreditCard> SupportedCreditCards { get; set; }
        public DbSet<TargetServiceDesignation> TargetServiceDesignations { get; set; }
        public DbSet<TargetServiceDesignationMaster> TargetServiceDesignationMasters { get; set; }
        public DbSet<Tariff> Tariffs { get; set; }
        public DbSet<TariffRate> TariffRates { get; set; }
        public DbSet<TariffRateConfiguration> TariffRateConfigurations { get; set; }
        public DbSet<TariffRateConfigurationProfile> TariffRateConfigurationProfiles { get; set; }
        public DbSet<TariffRateForConfiguration> TariffRateForConfigurations { get; set; }
        public DbSet<TariffState> TariffStates { get; set; }
        public DbSet<TccDeclinedBuffer> TccDeclinedBuffers { get; set; }
        public DbSet<TechCreditEvent> TechCreditEvents { get; set; }
        public DbSet<TechnicianDetail> TechnicianDetails { get; set; }
        public DbSet<TechnicianKeyChangeLog> TechnicianKeyChangeLogs { get; set; }
        public DbSet<TimeType> TimeTypes { get; set; }
        public DbSet<TimeTypeCustomer> TimeTypeCustomers { get; set; }
        public DbSet<TimeUnit> TimeUnits { get; set; }
        public DbSet<TimeZone> TimeZones { get; set; }
        public DbSet<trace> traces { get; set; }
        public DbSet<TransactionBatch> TransactionBatches { get; set; }
        public DbSet<TransactionPackage> TransactionPackages { get; set; }
        public DbSet<TransactionPackageStatu> TransactionPackageStatus { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<TransactionsAcquirerResp> TransactionsAcquirerResps { get; set; }
        public DbSet<TransactionsAudit> TransactionsAudits { get; set; }
        public DbSet<TransactionsBlackList> TransactionsBlackLists { get; set; }
        public DbSet<TransactionsCashKey> TransactionsCashKeys { get; set; }
        public DbSet<TransactionsPending> TransactionsPendings { get; set; }
        public DbSet<TransactionsReconcile> TransactionsReconciles { get; set; }
        public DbSet<TransactionsSmartCard> TransactionsSmartCards { get; set; }
        public DbSet<TransactionStatu> TransactionStatus { get; set; }
        public DbSet<TransactionType> TransactionTypes { get; set; }
        public DbSet<TransDataSumm> TransDataSumms { get; set; }
        public DbSet<TransType> TransTypes { get; set; }
        public DbSet<TransUserType> TransUserTypes { get; set; }
        public DbSet<txbackup> txbackups { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserType> UserTypes { get; set; }
        public DbSet<VehicleMovement> VehicleMovements { get; set; }
        public DbSet<VehicleSensingEvent> VehicleSensingEvents { get; set; }
        public DbSet<Version> Versions { get; set; }
        public DbSet<VersionDetail> VersionDetails { get; set; }
        public DbSet<VersionGroup> VersionGroups { get; set; }
        public DbSet<VersionMaster> VersionMasters { get; set; }
        public DbSet<VersionProfileMeter> VersionProfileMeters { get; set; }
        public DbSet<VersionProfileMeterAudit> VersionProfileMeterAudits { get; set; }
        public DbSet<VSNodeStatu> VSNodeStatus { get; set; }
        public DbSet<webpages_Membership> webpages_Membership { get; set; }
        public DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
        public DbSet<WhilteListFile> WhilteListFiles { get; set; }
        public DbSet<WhilteListFileStaging> WhilteListFileStagings { get; set; }
        public DbSet<WorkOrder> WorkOrders { get; set; }
        public DbSet<WorkOrderCaller> WorkOrderCallers { get; set; }
        public DbSet<WorkOrderEvent> WorkOrderEvents { get; set; }
        public DbSet<WorkOrderImage> WorkOrderImages { get; set; }
        public DbSet<WorkOrderPart> WorkOrderParts { get; set; }
        public DbSet<WorkOrder1> WorkOrders1 { get; set; }
        public DbSet<WorkOrdersAudit> WorkOrdersAudits { get; set; }
        public DbSet<WorkOrderStatu> WorkOrderStatus { get; set; }
        public DbSet<Zone> Zones { get; set; }
        public DbSet<ZoneSeq> ZoneSeqs { get; set; }
        public DbSet<ACS_Rate_AllFailed> ACS_Rate_AllFailed { get; set; }
        public DbSet<ACS_Rate_File_Version_Status> ACS_Rate_File_Version_Status { get; set; }
        public DbSet<ACS_Rate_Transmission_Status> ACS_Rate_Transmission_Status { get; set; }
        public DbSet<ActiveAlarmsV> ActiveAlarmsVs { get; set; }
        public DbSet<AssetEventListV> AssetEventListVs { get; set; }
        public DbSet<CashboxDataImportV> CashboxDataImportVs { get; set; }
        public DbSet<CashBoxImportSubV> CashBoxImportSubVs { get; set; }
        public DbSet<CollReconDetCBRCOMMSsubV> CollReconDetCBRCOMMSsubVs { get; set; }
        public DbSet<CollReconDetCBRDLRsubV> CollReconDetCBRDLRsubVs { get; set; }
        public DbSet<CreditCardReconciliationV> CreditCardReconciliationVs { get; set; }
        public DbSet<CustomerPaymentTransactionV> CustomerPaymentTransactionVs { get; set; }
        public DbSet<DailyFinancialTransactionV> DailyFinancialTransactionVs { get; set; }
        public DbSet<DeviceUsageSummaryV> DeviceUsageSummaryVs { get; set; }
        public DbSet<EventsAllAlarmsV> EventsAllAlarmsVs { get; set; }
        public DbSet<EventsCollectionCBRV> EventsCollectionCBRVs { get; set; }
        public DbSet<EventsCollectionCommEventV> EventsCollectionCommEventVs { get; set; }
        public DbSet<EventsGSMConnectionLogsV> EventsGSMConnectionLogsVs { get; set; }
        public DbSet<EventsTransactionsV> EventsTransactionsVs { get; set; }
        public DbSet<HistoricalAlarmsV> HistoricalAlarmsVs { get; set; }
        public DbSet<MaintenanceEventsV> MaintenanceEventsVs { get; set; }
        public DbSet<meters_bays> meters_bays { get; set; }
        public DbSet<MissingPaymentSequence> MissingPaymentSequences { get; set; }
        public DbSet<MSM_Sensor_Gateway_AttribStatExceptsSummV> MSM_Sensor_Gateway_AttribStatExceptsSummV { get; set; }
        public DbSet<OccupancyRateSummaryV> OccupancyRateSummaryVs { get; set; }
        public DbSet<OccupancyV> OccupancyVs { get; set; }
        public DbSet<Pending_Meters> Pending_Meters { get; set; }
        public DbSet<pv_ActiveAlarms> pv_ActiveAlarms { get; set; }
        public DbSet<pv_CombineActiveHistoricalAlarms> pv_CombineActiveHistoricalAlarms { get; set; }
        public DbSet<pv_CustomerTransactions> pv_CustomerTransactions { get; set; }
        public DbSet<pv_EventsActiveAlarms> pv_EventsActiveAlarms { get; set; }
        public DbSet<pv_EventsAllAlarms> pv_EventsAllAlarms { get; set; }
        public DbSet<pv_EventsCollectionCBR> pv_EventsCollectionCBR { get; set; }
        public DbSet<pv_EventsCollectionCommEvent> pv_EventsCollectionCommEvent { get; set; }
        public DbSet<pv_EventsDiagnostics> pv_EventsDiagnostics { get; set; }
        public DbSet<pv_EventsGSMConnectionLogs> pv_EventsGSMConnectionLogs { get; set; }
        public DbSet<pv_EventsHistoricalAlarms> pv_EventsHistoricalAlarms { get; set; }
        public DbSet<pv_EventsSummary> pv_EventsSummary { get; set; }
        public DbSet<pv_EventsTransactions> pv_EventsTransactions { get; set; }
        public DbSet<pv_HistoricAlarms> pv_HistoricAlarms { get; set; }
        public DbSet<qCashBoxDataImport> qCashBoxDataImports { get; set; }
        public DbSet<qCashBoxImport_subV235> qCashBoxImport_subV235 { get; set; }
        public DbSet<qCBImpFile> qCBImpFiles { get; set; }
        public DbSet<qCollReconDetCBRCOMMS_SubV235> qCollReconDetCBRCOMMS_SubV235 { get; set; }
        public DbSet<qCollReconDetCBRDLR_SubV235> qCollReconDetCBRDLR_SubV235 { get; set; }
        public DbSet<qGSMFailed_Sub> qGSMFailed_Sub { get; set; }
        public DbSet<qGSMFailed_SubSub> qGSMFailed_SubSub { get; set; }
        public DbSet<qHistoricalMeterStatu> qHistoricalMeterStatus { get; set; }
        public DbSet<qLastMeterStatus_Sub> qLastMeterStatus_Sub { get; set; }
        public DbSet<qMaxCollDateTime> qMaxCollDateTimes { get; set; }
        public DbSet<qMeter_failedGSM> qMeter_failedGSM { get; set; }
        public DbSet<qMetersNotCollected> qMetersNotCollecteds { get; set; }
        public DbSet<qMissingCollection> qMissingCollections { get; set; }
        public DbSet<qParkingSchedule> qParkingSchedules { get; set; }
        public DbSet<qTransaction> qTransactions { get; set; }
        public DbSet<qTransactionsCk> qTransactionsCks { get; set; }
        public DbSet<qTransactionsCreditCard> qTransactionsCreditCards { get; set; }
        public DbSet<qvActMaxAlmTime> qvActMaxAlmTimes { get; set; }
        public DbSet<qvActUnqAlarm> qvActUnqAlarms { get; set; }
        public DbSet<sla_AlarmWorkOrder> sla_AlarmWorkOrder { get; set; }
        public DbSet<SLA_Minutes> SLA_Minutes { get; set; }
        public DbSet<SpaceMeterAssetV> SpaceMeterAssetVs { get; set; }
        public DbSet<UDP_MeterPushSchedule> UDP_MeterPushSchedule { get; set; }
        public DbSet<v_ActiveCollectionRunMeter> v_ActiveCollectionRunMeter { get; set; }
        public DbSet<V_UnProcessed_CollRun> V_UnProcessed_CollRun { get; set; }
        public DbSet<ViolationSummaryByAreaV> ViolationSummaryByAreaVs { get; set; }
        public DbSet<ViolationSummaryV> ViolationSummaryVs { get; set; }
        public DbSet<VoidReasonSummaryV> VoidReasonSummaryVs { get; set; }
        public DbSet<WhiteList_All> WhiteList_All { get; set; }
        public DbSet<WhiteListFile_Unique> WhiteListFile_Unique { get; set; }
        public DbSet<RejectedDiscount> RejectedDiscounts { get; set; }
        public DbSet<vendorcustomerpaybycellmap> vendorcustomerpaybycellmaps { get; set; }
        public DbSet<DataKey> DataKeys { get; set; }
        public DbSet<OLTAcquirer> OLTAcquirers { get; set; }
        public DbSet<AuditRegistry> AuditRegistries { get; set; }
        public DbSet<HistoricalAlarm> HistoricalAlarms { get; set; }
        public DbSet<MeterMap> MeterMaps { get; set; }
        public DbSet<MeterMapping> MeterMappings { get; set; }
        public DbSet<MeterResetSchedule> MeterResetSchedules { get; set; }
        public DbSet<TransactionsCash> TransactionsCashes { get; set; }
        public DbSet<TransactionsMPark> TransactionsMParks { get; set; }
        public DbSet<SensorPaymentTransactionCurrent> SensorPaymentTransactionCurrents { get; set; }
        public DbSet<PAMGracePeriod> PAMGracePeriods { get; set; }
        public DbSet<PAMTx> PAMTxes { get; set; }
        public DbSet<FDSummary> FDSummaries { get; set; }
        public DbSet<AI_ACTIVITYLOG> AI_ACTIVITYLOG { get; set; }
        public DbSet<AI_EXPORT> AI_EXPORT { get; set; }
        public DbSet<AI_PARK_NOTE> AI_PARK_NOTE { get; set; }
        public DbSet<AI_PARKING> AI_PARKING { get; set; }
        public DbSet<AI_PARKING_TRANSLINK> AI_PARKING_TRANSLINK { get; set; }
        public DbSet<AI_PARKING_VIOS> AI_PARKING_VIOS { get; set; }
        public DbSet<AISyncupStatu> AISyncupStatus { get; set; }
        public DbSet<MechMaster> MechMasters { get; set; }
        public DbSet<SettledBatch> SettledBatches { get; set; }
        public DbSet<TransactionsCreditCard> TransactionsCreditCards { get; set; }
        public DbSet<MeterCurrentStatusReportV> MeterCurrentStatusReportVs { get; set; }
        public DbSet<MeterUptimeV> MeterUptimeVs { get; set; }
        public DbSet<CollectionRunReport> CollectionRunReports { get; set; }
        public DbSet<MeterConfigurationReportV> MeterConfigurationReportVs { get; set; }
        public DbSet<meterdiagnostivalue_v> meterdiagnostivalue_v { get; set; }
        public DbSet<v_ChangeBattery> v_ChangeBattery { get; set; }
        public DbSet<v_PlanChangeBattery> v_PlanChangeBattery { get; set; }
        public DbSet<pv_CustomerTransactions_lincoln> pv_CustomerTransactions_lincoln { get; set; }
        public DbSet<pv_Occupancy> pv_Occupancy { get; set; }
        public DbSet<AI_OFFICERS> AI_OFFICERS { get; set; }
        public DbSet<ParkingOccupancyReport> ParkingOccupancyReports { get; set; }
        public DbSet<pv_CustomerSensorTransactions> pv_CustomerSensorTransactions { get; set; }
        public DbSet<CSPark> CSParks { get; set; }
        public DbSet<LatestMeterDataAudit> LatestMeterDataAudits { get; set; }
        public DbSet<LatestMeterData> LatestMeterDatas { get; set; }
        public DbSet<RouteMetersDetailsV> RouteMetersDetailsVs { get; set; }
        public DbSet<RouteMetersDetailsV2> RouteMetersDetailsV2 { get; set; }
        public DbSet<FDFile> FDFiles { get; set; }
        public DbSet<NoCommunicationV> NoCommunicationVs { get; set; }
        public DbSet<CollectionRun> CollectionRuns { get; set; }
        public DbSet<BatteryAnalysisChart> BatteryAnalysisCharts { get; set; }
        public DbSet<BatteryChangeGrid> BatteryChangeGrids { get; set; }
        public DbSet<BatteryVoltageV> BatteryVoltageVs { get; set; }
        public DbSet<OccRateDerived> OccRateDeriveds { get; set; }
        public DbSet<avgbatteryvoltage> avgbatteryvoltages { get; set; }
        public DbSet<OccupancyRateReport> OccupancyRateReports { get; set; }
        public DbSet<sensorProfile> sensorProfiles { get; set; }
    
        public virtual int spInitializeCustomer(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInitializeCustomer", customerIdParameter);
        }
    
        public virtual int spInitializeCustomerProperties(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInitializeCustomerProperties", customerIdParameter);
        }
    
        public virtual int AddParkingSpaces(Nullable<int> mCustId, Nullable<int> mAreaId, Nullable<int> mMeterId, Nullable<int> mBayStart, Nullable<int> mBayEnd)
        {
            var mCustIdParameter = mCustId.HasValue ?
                new ObjectParameter("mCustId", mCustId) :
                new ObjectParameter("mCustId", typeof(int));
    
            var mAreaIdParameter = mAreaId.HasValue ?
                new ObjectParameter("mAreaId", mAreaId) :
                new ObjectParameter("mAreaId", typeof(int));
    
            var mMeterIdParameter = mMeterId.HasValue ?
                new ObjectParameter("mMeterId", mMeterId) :
                new ObjectParameter("mMeterId", typeof(int));
    
            var mBayStartParameter = mBayStart.HasValue ?
                new ObjectParameter("mBayStart", mBayStart) :
                new ObjectParameter("mBayStart", typeof(int));
    
            var mBayEndParameter = mBayEnd.HasValue ?
                new ObjectParameter("mBayEnd", mBayEnd) :
                new ObjectParameter("mBayEnd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddParkingSpaces", mCustIdParameter, mAreaIdParameter, mMeterIdParameter, mBayStartParameter, mBayEndParameter);
        }
    
        [EdmFunction("PEMEntities", "dailyGPRSRevenue")]
        public virtual IQueryable<dailyGPRSRevenue_Result> dailyGPRSRevenue(Nullable<int> custId, Nullable<System.DateTime> datenow)
        {
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(int));
    
            var datenowParameter = datenow.HasValue ?
                new ObjectParameter("datenow", datenow) :
                new ObjectParameter("datenow", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<dailyGPRSRevenue_Result>("[PEMEntities].[dailyGPRSRevenue](@custId, @datenow)", custIdParameter, datenowParameter);
        }
    
        public virtual int GetUserName(ObjectParameter userName)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserName", userName);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_GetActiveAlarms(string orderBy, Nullable<int> pageNumber, Nullable<int> pageSize, string customerId, string assetType, string assetStatus, string alarmCode, string targetService, string assetId, string operationalState, string alarmSource, string assetName, string alarmSeverity, string technicianID, string zone, string suburb, string area, string demandArea, string location, string startDate, string endDate, string timeType)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("assetType", assetType) :
                new ObjectParameter("assetType", typeof(string));
    
            var assetStatusParameter = assetStatus != null ?
                new ObjectParameter("assetStatus", assetStatus) :
                new ObjectParameter("assetStatus", typeof(string));
    
            var alarmCodeParameter = alarmCode != null ?
                new ObjectParameter("alarmCode", alarmCode) :
                new ObjectParameter("alarmCode", typeof(string));
    
            var targetServiceParameter = targetService != null ?
                new ObjectParameter("targetService", targetService) :
                new ObjectParameter("targetService", typeof(string));
    
            var assetIdParameter = assetId != null ?
                new ObjectParameter("assetId", assetId) :
                new ObjectParameter("assetId", typeof(string));
    
            var operationalStateParameter = operationalState != null ?
                new ObjectParameter("operationalState", operationalState) :
                new ObjectParameter("operationalState", typeof(string));
    
            var alarmSourceParameter = alarmSource != null ?
                new ObjectParameter("alarmSource", alarmSource) :
                new ObjectParameter("alarmSource", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("assetName", assetName) :
                new ObjectParameter("assetName", typeof(string));
    
            var alarmSeverityParameter = alarmSeverity != null ?
                new ObjectParameter("alarmSeverity", alarmSeverity) :
                new ObjectParameter("alarmSeverity", typeof(string));
    
            var technicianIDParameter = technicianID != null ?
                new ObjectParameter("technicianID", technicianID) :
                new ObjectParameter("technicianID", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("zone", zone) :
                new ObjectParameter("zone", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("suburb", suburb) :
                new ObjectParameter("suburb", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            var demandAreaParameter = demandArea != null ?
                new ObjectParameter("DemandArea", demandArea) :
                new ObjectParameter("DemandArea", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var timeTypeParameter = timeType != null ?
                new ObjectParameter("timeType", timeType) :
                new ObjectParameter("timeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetActiveAlarms", orderByParameter, pageNumberParameter, pageSizeParameter, customerIdParameter, assetTypeParameter, assetStatusParameter, alarmCodeParameter, targetServiceParameter, assetIdParameter, operationalStateParameter, alarmSourceParameter, assetNameParameter, alarmSeverityParameter, technicianIDParameter, zoneParameter, suburbParameter, areaParameter, demandAreaParameter, locationParameter, startDateParameter, endDateParameter, timeTypeParameter);
        }
    
        public virtual int sp_GetCustomerTransactions(string orderBy, Nullable<int> pageNumber, Nullable<int> pageSize, string customerId, string assetType, string assetId, string assetName, string timeType, string area, string zone, string demandArea, string street, string suburb, string bayId, string discountSchemaId, string startDate, string endDate, string settleStartDate, string settleEndDate, string paymentStatusType, string transactionType, string cardNumHash, string cCLast4, string cardType, string viewName)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(string));
    
            var assetIdParameter = assetId != null ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var timeTypeParameter = timeType != null ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("Zone", zone) :
                new ObjectParameter("Zone", typeof(string));
    
            var demandAreaParameter = demandArea != null ?
                new ObjectParameter("DemandArea", demandArea) :
                new ObjectParameter("DemandArea", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("Suburb", suburb) :
                new ObjectParameter("Suburb", typeof(string));
    
            var bayIdParameter = bayId != null ?
                new ObjectParameter("BayId", bayId) :
                new ObjectParameter("BayId", typeof(string));
    
            var discountSchemaIdParameter = discountSchemaId != null ?
                new ObjectParameter("DiscountSchemaId", discountSchemaId) :
                new ObjectParameter("DiscountSchemaId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var settleStartDateParameter = settleStartDate != null ?
                new ObjectParameter("settleStartDate", settleStartDate) :
                new ObjectParameter("settleStartDate", typeof(string));
    
            var settleEndDateParameter = settleEndDate != null ?
                new ObjectParameter("settleEndDate", settleEndDate) :
                new ObjectParameter("settleEndDate", typeof(string));
    
            var paymentStatusTypeParameter = paymentStatusType != null ?
                new ObjectParameter("PaymentStatusType", paymentStatusType) :
                new ObjectParameter("PaymentStatusType", typeof(string));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var cardNumHashParameter = cardNumHash != null ?
                new ObjectParameter("CardNumHash", cardNumHash) :
                new ObjectParameter("CardNumHash", typeof(string));
    
            var cCLast4Parameter = cCLast4 != null ?
                new ObjectParameter("CCLast4", cCLast4) :
                new ObjectParameter("CCLast4", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var viewNameParameter = viewName != null ?
                new ObjectParameter("viewName", viewName) :
                new ObjectParameter("viewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetCustomerTransactions", orderByParameter, pageNumberParameter, pageSizeParameter, customerIdParameter, assetTypeParameter, assetIdParameter, assetNameParameter, timeTypeParameter, areaParameter, zoneParameter, demandAreaParameter, streetParameter, suburbParameter, bayIdParameter, discountSchemaIdParameter, startDateParameter, endDateParameter, settleStartDateParameter, settleEndDateParameter, paymentStatusTypeParameter, transactionTypeParameter, cardNumHashParameter, cCLast4Parameter, cardTypeParameter, viewNameParameter);
        }
    
        public virtual int sp_GetEventsItems(string orderBy, Nullable<int> pageNumber, Nullable<int> pageSize, string customerId, string assetType, string assetId, string assetName, string eventCode, string eventClass, string area, string zone, string demandArea, string street, string suburb, string softwareVersion, string coinRejectCount, string signalStrength, string voltageMin, string voltageMax, string tempMin, string tempMax, string startDate, string endDate, string timeType, string viewName)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(string));
    
            var assetIdParameter = assetId != null ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var eventClassParameter = eventClass != null ?
                new ObjectParameter("EventClass", eventClass) :
                new ObjectParameter("EventClass", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("Zone", zone) :
                new ObjectParameter("Zone", typeof(string));
    
            var demandAreaParameter = demandArea != null ?
                new ObjectParameter("DemandArea", demandArea) :
                new ObjectParameter("DemandArea", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("Suburb", suburb) :
                new ObjectParameter("Suburb", typeof(string));
    
            var softwareVersionParameter = softwareVersion != null ?
                new ObjectParameter("SoftwareVersion", softwareVersion) :
                new ObjectParameter("SoftwareVersion", typeof(string));
    
            var coinRejectCountParameter = coinRejectCount != null ?
                new ObjectParameter("CoinRejectCount", coinRejectCount) :
                new ObjectParameter("CoinRejectCount", typeof(string));
    
            var signalStrengthParameter = signalStrength != null ?
                new ObjectParameter("SignalStrength", signalStrength) :
                new ObjectParameter("SignalStrength", typeof(string));
    
            var voltageMinParameter = voltageMin != null ?
                new ObjectParameter("VoltageMin", voltageMin) :
                new ObjectParameter("VoltageMin", typeof(string));
    
            var voltageMaxParameter = voltageMax != null ?
                new ObjectParameter("VoltageMax", voltageMax) :
                new ObjectParameter("VoltageMax", typeof(string));
    
            var tempMinParameter = tempMin != null ?
                new ObjectParameter("TempMin", tempMin) :
                new ObjectParameter("TempMin", typeof(string));
    
            var tempMaxParameter = tempMax != null ?
                new ObjectParameter("TempMax", tempMax) :
                new ObjectParameter("TempMax", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var timeTypeParameter = timeType != null ?
                new ObjectParameter("timeType", timeType) :
                new ObjectParameter("timeType", typeof(string));
    
            var viewNameParameter = viewName != null ?
                new ObjectParameter("viewName", viewName) :
                new ObjectParameter("viewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetEventsItems", orderByParameter, pageNumberParameter, pageSizeParameter, customerIdParameter, assetTypeParameter, assetIdParameter, assetNameParameter, eventCodeParameter, eventClassParameter, areaParameter, zoneParameter, demandAreaParameter, streetParameter, suburbParameter, softwareVersionParameter, coinRejectCountParameter, signalStrengthParameter, voltageMinParameter, voltageMaxParameter, tempMinParameter, tempMaxParameter, startDateParameter, endDateParameter, timeTypeParameter, viewNameParameter);
        }
    
        public virtual int sp_GetOccupancy(string orderBy, Nullable<int> pageNumber, Nullable<int> pageSize, string customerId, string assetType, string assetName, string assetId, string occupancyStatus, string operationalStatus, string nonCompliantStatus, string timeType, string street, string zone, string suburb, string area, string demandArea, string startDate, string endDate)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("assetType", assetType) :
                new ObjectParameter("assetType", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("assetName", assetName) :
                new ObjectParameter("assetName", typeof(string));
    
            var assetIdParameter = assetId != null ?
                new ObjectParameter("assetId", assetId) :
                new ObjectParameter("assetId", typeof(string));
    
            var occupancyStatusParameter = occupancyStatus != null ?
                new ObjectParameter("occupancyStatus", occupancyStatus) :
                new ObjectParameter("occupancyStatus", typeof(string));
    
            var operationalStatusParameter = operationalStatus != null ?
                new ObjectParameter("operationalStatus", operationalStatus) :
                new ObjectParameter("operationalStatus", typeof(string));
    
            var nonCompliantStatusParameter = nonCompliantStatus != null ?
                new ObjectParameter("nonCompliantStatus", nonCompliantStatus) :
                new ObjectParameter("nonCompliantStatus", typeof(string));
    
            var timeTypeParameter = timeType != null ?
                new ObjectParameter("timeType", timeType) :
                new ObjectParameter("timeType", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("zone", zone) :
                new ObjectParameter("zone", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("suburb", suburb) :
                new ObjectParameter("suburb", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            var demandAreaParameter = demandArea != null ?
                new ObjectParameter("DemandArea", demandArea) :
                new ObjectParameter("DemandArea", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetOccupancy", orderByParameter, pageNumberParameter, pageSizeParameter, customerIdParameter, assetTypeParameter, assetNameParameter, assetIdParameter, occupancyStatusParameter, operationalStatusParameter, nonCompliantStatusParameter, timeTypeParameter, streetParameter, zoneParameter, suburbParameter, areaParameter, demandAreaParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_InsertEventCode(Nullable<int> customerID, Nullable<int> eventCode, string eventDescAbbrev, string eventDescVerbose, Nullable<int> eventType)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDescAbbrevParameter = eventDescAbbrev != null ?
                new ObjectParameter("EventDescAbbrev", eventDescAbbrev) :
                new ObjectParameter("EventDescAbbrev", typeof(string));
    
            var eventDescVerboseParameter = eventDescVerbose != null ?
                new ObjectParameter("EventDescVerbose", eventDescVerbose) :
                new ObjectParameter("EventDescVerbose", typeof(string));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertEventCode", customerIDParameter, eventCodeParameter, eventDescAbbrevParameter, eventDescVerboseParameter, eventTypeParameter);
        }
    
        public virtual int sp_InsertEventCodeMaster(Nullable<int> eventCode, Nullable<bool> isAlarm, Nullable<int> alarmTier, string eventDescAbbrev, string eventDescVerbose, Nullable<int> eventSource, Nullable<int> eventType)
        {
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var isAlarmParameter = isAlarm.HasValue ?
                new ObjectParameter("IsAlarm", isAlarm) :
                new ObjectParameter("IsAlarm", typeof(bool));
    
            var alarmTierParameter = alarmTier.HasValue ?
                new ObjectParameter("AlarmTier", alarmTier) :
                new ObjectParameter("AlarmTier", typeof(int));
    
            var eventDescAbbrevParameter = eventDescAbbrev != null ?
                new ObjectParameter("EventDescAbbrev", eventDescAbbrev) :
                new ObjectParameter("EventDescAbbrev", typeof(string));
    
            var eventDescVerboseParameter = eventDescVerbose != null ?
                new ObjectParameter("EventDescVerbose", eventDescVerbose) :
                new ObjectParameter("EventDescVerbose", typeof(string));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertEventCodeMaster", eventCodeParameter, isAlarmParameter, alarmTierParameter, eventDescAbbrevParameter, eventDescVerboseParameter, eventSourceParameter, eventTypeParameter);
        }
    
        public virtual int sp_InsertEventLog(Nullable<long> uid, Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> eventCode, Nullable<System.DateTime> eventDateTime)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(long));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDateTimeParameter = eventDateTime.HasValue ?
                new ObjectParameter("EventDateTime", eventDateTime) :
                new ObjectParameter("EventDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertEventLog", uidParameter, cidParameter, aidParameter, midParameter, eventCodeParameter, eventDateTimeParameter);
        }
    
        public virtual int sp_PopulateSensorPaymentTransaction(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PopulateSensorPaymentTransaction", startDateParameter, endDateParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_tableGen(string cursorString, string tableAttributes)
        {
            var cursorStringParameter = cursorString != null ?
                new ObjectParameter("cursorString", cursorString) :
                new ObjectParameter("cursorString", typeof(string));
    
            var tableAttributesParameter = tableAttributes != null ?
                new ObjectParameter("tableAttributes", tableAttributes) :
                new ObjectParameter("tableAttributes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_tableGen", cursorStringParameter, tableAttributesParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAddEventCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddEventCodes");
        }
    
        public virtual int spAddRemoveBLCard(Nullable<int> action, Nullable<int> blackListID, string hCardNum, string xCardNum, Nullable<int> code, Nullable<int> customerID, Nullable<int> userID)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var blackListIDParameter = blackListID.HasValue ?
                new ObjectParameter("BlackListID", blackListID) :
                new ObjectParameter("BlackListID", typeof(int));
    
            var hCardNumParameter = hCardNum != null ?
                new ObjectParameter("HCardNum", hCardNum) :
                new ObjectParameter("HCardNum", typeof(string));
    
            var xCardNumParameter = xCardNum != null ?
                new ObjectParameter("XCardNum", xCardNum) :
                new ObjectParameter("XCardNum", typeof(string));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddRemoveBLCard", actionParameter, blackListIDParameter, hCardNumParameter, xCardNumParameter, codeParameter, customerIDParameter, userIDParameter);
        }
    
        public virtual int spCreateCustomer(Nullable<int> customerID, string name, string fromEmailAddress)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fromEmailAddressParameter = fromEmailAddress != null ?
                new ObjectParameter("FromEmailAddress", fromEmailAddress) :
                new ObjectParameter("FromEmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateCustomer", customerIDParameter, nameParameter, fromEmailAddressParameter);
        }
    
        public virtual ObjectResult<spDailyGPRSRevenue_Result> spDailyGPRSRevenue(Nullable<int> custId)
        {
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDailyGPRSRevenue_Result>("spDailyGPRSRevenue", custIdParameter);
        }
    
        public virtual ObjectResult<spDailyGPRSTotals_Result> spDailyGPRSTotals(Nullable<int> custId)
        {
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDailyGPRSTotals_Result>("spDailyGPRSTotals", custIdParameter);
        }
    
        public virtual int spDeleteCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteCustomer", customerIDParameter);
        }
    
        public virtual int spGenerateBlackList(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGenerateBlackList", userIDParameter);
        }
    
        public virtual ObjectResult<spGetCardNum_Result> spGetCardNum(Nullable<int> customerId, Nullable<int> creditCardType, string cardNum, Nullable<System.DateTime> fromDateTime, Nullable<System.DateTime> toDateTime)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var creditCardTypeParameter = creditCardType.HasValue ?
                new ObjectParameter("CreditCardType", creditCardType) :
                new ObjectParameter("CreditCardType", typeof(int));
    
            var cardNumParameter = cardNum != null ?
                new ObjectParameter("CardNum", cardNum) :
                new ObjectParameter("CardNum", typeof(string));
    
            var fromDateTimeParameter = fromDateTime.HasValue ?
                new ObjectParameter("FromDateTime", fromDateTime) :
                new ObjectParameter("FromDateTime", typeof(System.DateTime));
    
            var toDateTimeParameter = toDateTime.HasValue ?
                new ObjectParameter("ToDateTime", toDateTime) :
                new ObjectParameter("ToDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCardNum_Result>("spGetCardNum", customerIdParameter, creditCardTypeParameter, cardNumParameter, fromDateTimeParameter, toDateTimeParameter);
        }
    
        public virtual ObjectResult<spGetCardNumForSalt_Result> spGetCardNumForSalt(Nullable<int> customerId, Nullable<int> creditCardType, string cardNum, Nullable<System.DateTime> fromDateTime, Nullable<System.DateTime> toDateTime, Nullable<System.DateTime> fromToDateTime, Nullable<int> type, string hashTemp)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var creditCardTypeParameter = creditCardType.HasValue ?
                new ObjectParameter("CreditCardType", creditCardType) :
                new ObjectParameter("CreditCardType", typeof(int));
    
            var cardNumParameter = cardNum != null ?
                new ObjectParameter("CardNum", cardNum) :
                new ObjectParameter("CardNum", typeof(string));
    
            var fromDateTimeParameter = fromDateTime.HasValue ?
                new ObjectParameter("FromDateTime", fromDateTime) :
                new ObjectParameter("FromDateTime", typeof(System.DateTime));
    
            var toDateTimeParameter = toDateTime.HasValue ?
                new ObjectParameter("ToDateTime", toDateTime) :
                new ObjectParameter("ToDateTime", typeof(System.DateTime));
    
            var fromToDateTimeParameter = fromToDateTime.HasValue ?
                new ObjectParameter("FromToDateTime", fromToDateTime) :
                new ObjectParameter("FromToDateTime", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var hashTempParameter = hashTemp != null ?
                new ObjectParameter("HashTemp", hashTemp) :
                new ObjectParameter("HashTemp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCardNumForSalt_Result>("spGetCardNumForSalt", customerIdParameter, creditCardTypeParameter, cardNumParameter, fromDateTimeParameter, toDateTimeParameter, fromToDateTimeParameter, typeParameter, hashTempParameter);
        }
    
        public virtual ObjectResult<spLastMeterState31_Result> spLastMeterState31(Nullable<bool> liveMeters, Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId)
        {
            var liveMetersParameter = liveMeters.HasValue ?
                new ObjectParameter("LiveMeters", liveMeters) :
                new ObjectParameter("LiveMeters", typeof(bool));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLastMeterState31_Result>("spLastMeterState31", liveMetersParameter, customerIdParameter, areaIdParameter, meterIdParameter);
        }
    
        [EdmFunction("PEMEntities", "SplitString")]
        public virtual IQueryable<string> SplitString(string stringList, string delimiter)
        {
            var stringListParameter = stringList != null ?
                new ObjectParameter("stringList", stringList) :
                new ObjectParameter("stringList", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[PEMEntities].[SplitString](@stringList, @delimiter)", stringListParameter, delimiterParameter);
        }
    
        public virtual int spReSchedule(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReSchedule", customerIDParameter);
        }
    
        public virtual ObjectResult<spResubmitReport_Result> spResubmitReport(Nullable<int> customerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spResubmitReport_Result>("spResubmitReport", customerIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_GetEventsItems_Test(string orderBy, Nullable<int> pageNumber, Nullable<int> pageSize, string customerId, string assetType, string assetId, string assetName, string eventCode, string eventClass, string area, string zone, string demandArea, string street, string suburb, string softwareVersion, string coinRejectCount, string signalStrength, string voltageMin, string voltageMax, string tempMin, string tempMax, string startDate, string endDate, string timeType, string viewName)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(string));
    
            var assetIdParameter = assetId != null ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var eventClassParameter = eventClass != null ?
                new ObjectParameter("EventClass", eventClass) :
                new ObjectParameter("EventClass", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("Zone", zone) :
                new ObjectParameter("Zone", typeof(string));
    
            var demandAreaParameter = demandArea != null ?
                new ObjectParameter("DemandArea", demandArea) :
                new ObjectParameter("DemandArea", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("Suburb", suburb) :
                new ObjectParameter("Suburb", typeof(string));
    
            var softwareVersionParameter = softwareVersion != null ?
                new ObjectParameter("SoftwareVersion", softwareVersion) :
                new ObjectParameter("SoftwareVersion", typeof(string));
    
            var coinRejectCountParameter = coinRejectCount != null ?
                new ObjectParameter("CoinRejectCount", coinRejectCount) :
                new ObjectParameter("CoinRejectCount", typeof(string));
    
            var signalStrengthParameter = signalStrength != null ?
                new ObjectParameter("SignalStrength", signalStrength) :
                new ObjectParameter("SignalStrength", typeof(string));
    
            var voltageMinParameter = voltageMin != null ?
                new ObjectParameter("VoltageMin", voltageMin) :
                new ObjectParameter("VoltageMin", typeof(string));
    
            var voltageMaxParameter = voltageMax != null ?
                new ObjectParameter("VoltageMax", voltageMax) :
                new ObjectParameter("VoltageMax", typeof(string));
    
            var tempMinParameter = tempMin != null ?
                new ObjectParameter("TempMin", tempMin) :
                new ObjectParameter("TempMin", typeof(string));
    
            var tempMaxParameter = tempMax != null ?
                new ObjectParameter("TempMax", tempMax) :
                new ObjectParameter("TempMax", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var timeTypeParameter = timeType != null ?
                new ObjectParameter("timeType", timeType) :
                new ObjectParameter("timeType", typeof(string));
    
            var viewNameParameter = viewName != null ?
                new ObjectParameter("viewName", viewName) :
                new ObjectParameter("viewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetEventsItems_Test", orderByParameter, pageNumberParameter, pageSizeParameter, customerIdParameter, assetTypeParameter, assetIdParameter, assetNameParameter, eventCodeParameter, eventClassParameter, areaParameter, zoneParameter, demandAreaParameter, streetParameter, suburbParameter, softwareVersionParameter, coinRejectCountParameter, signalStrengthParameter, voltageMinParameter, voltageMaxParameter, tempMinParameter, tempMaxParameter, startDateParameter, endDateParameter, timeTypeParameter, viewNameParameter);
        }
    
        public virtual int sp_GetOccupancyCurrent(string orderBy, Nullable<int> pageNumber, Nullable<int> pageSize, string customerId, string assetType, string assetName, string assetId, string occupancyStatus, string operationalStatus, string nonCompliantStatus, string timeType, string street, string zone, string suburb, string area, string demandArea, string startDate, string endDate)
        {
            var orderByParameter = orderBy != null ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("assetType", assetType) :
                new ObjectParameter("assetType", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("assetName", assetName) :
                new ObjectParameter("assetName", typeof(string));
    
            var assetIdParameter = assetId != null ?
                new ObjectParameter("assetId", assetId) :
                new ObjectParameter("assetId", typeof(string));
    
            var occupancyStatusParameter = occupancyStatus != null ?
                new ObjectParameter("occupancyStatus", occupancyStatus) :
                new ObjectParameter("occupancyStatus", typeof(string));
    
            var operationalStatusParameter = operationalStatus != null ?
                new ObjectParameter("operationalStatus", operationalStatus) :
                new ObjectParameter("operationalStatus", typeof(string));
    
            var nonCompliantStatusParameter = nonCompliantStatus != null ?
                new ObjectParameter("nonCompliantStatus", nonCompliantStatus) :
                new ObjectParameter("nonCompliantStatus", typeof(string));
    
            var timeTypeParameter = timeType != null ?
                new ObjectParameter("timeType", timeType) :
                new ObjectParameter("timeType", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("zone", zone) :
                new ObjectParameter("zone", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("suburb", suburb) :
                new ObjectParameter("suburb", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            var demandAreaParameter = demandArea != null ?
                new ObjectParameter("DemandArea", demandArea) :
                new ObjectParameter("DemandArea", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetOccupancyCurrent", orderByParameter, pageNumberParameter, pageSizeParameter, customerIdParameter, assetTypeParameter, assetNameParameter, assetIdParameter, occupancyStatusParameter, operationalStatusParameter, nonCompliantStatusParameter, timeTypeParameter, streetParameter, zoneParameter, suburbParameter, areaParameter, demandAreaParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_MeterMap_UpdateCollectionRunId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MeterMap_UpdateCollectionRunId");
        }
    
        public virtual int sp_activateCollectionRun()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_activateCollectionRun");
        }
    
        public virtual int sp_ActiveAlarm_cleanUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActiveAlarm_cleanUp");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AssetPending()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AssetPending");
        }
    
        public virtual int sp_Audit_CashBox(Nullable<int> customerId, Nullable<int> cashBoxId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var cashBoxIdParameter = cashBoxId.HasValue ?
                new ObjectParameter("CashBoxId", cashBoxId) :
                new ObjectParameter("CashBoxId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Audit_CashBox", customerIdParameter, cashBoxIdParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_Audit_Gateways(Nullable<int> customerId, Nullable<int> gatewayId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var gatewayIdParameter = gatewayId.HasValue ?
                new ObjectParameter("GatewayId", gatewayId) :
                new ObjectParameter("GatewayId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Audit_Gateways", customerIdParameter, gatewayIdParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_Audit_MeterMap(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Audit_MeterMap", customerIdParameter, areaIdParameter, meterIdParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_Audit_Meters(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Audit_Meters", customerIdParameter, areaIdParameter, meterIdParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_Audit_ParkingSpaces(Nullable<int> customerId, Nullable<long> parkingSpaceId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var parkingSpaceIdParameter = parkingSpaceId.HasValue ?
                new ObjectParameter("ParkingSpaceId", parkingSpaceId) :
                new ObjectParameter("ParkingSpaceId", typeof(long));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Audit_ParkingSpaces", customerIdParameter, parkingSpaceIdParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_Audit_Sensors(Nullable<int> customerId, Nullable<int> sensorId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var sensorIdParameter = sensorId.HasValue ?
                new ObjectParameter("SensorId", sensorId) :
                new ObjectParameter("SensorId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Audit_Sensors", customerIdParameter, sensorIdParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_Audit_VersionProfileMeter(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Audit_VersionProfileMeter", customerIdParameter, areaIdParameter, meterIdParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_DayOfWeek(Nullable<System.DateTime> ts, ObjectParameter dow)
        {
            var tsParameter = ts.HasValue ?
                new ObjectParameter("ts", ts) :
                new ObjectParameter("ts", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DayOfWeek", tsParameter, dow);
        }
    
        public virtual int sp_DefaultHousing(Nullable<int> customerId, ObjectParameter housingId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DefaultHousing", customerIdParameter, housingId);
        }
    
        public virtual int sp_InsertOrUpdateMeter(Nullable<int> assetPendingReasonId, Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> createUserId, Nullable<System.DateTime> recordCreateDateTime, Nullable<System.DateTime> recordMigrationDateTime, Nullable<long> assetId, Nullable<int> assetType, string assetName, Nullable<int> assetModel, Nullable<System.DateTime> nextPreventativeMaintenance, Nullable<int> operationalStatus, Nullable<double> latitude, Nullable<double> longitude, string phoneNumber, Nullable<int> spaceCount, Nullable<int> demandStatus, Nullable<System.DateTime> warrantyExpiration, Nullable<System.DateTime> dateInstalled, string locationMeters, Nullable<System.DateTime> lastPreventativeMaintenance, Nullable<int> assetState, Nullable<System.DateTime> operationalStatusTime)
        {
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            var recordCreateDateTimeParameter = recordCreateDateTime.HasValue ?
                new ObjectParameter("RecordCreateDateTime", recordCreateDateTime) :
                new ObjectParameter("RecordCreateDateTime", typeof(System.DateTime));
    
            var recordMigrationDateTimeParameter = recordMigrationDateTime.HasValue ?
                new ObjectParameter("RecordMigrationDateTime", recordMigrationDateTime) :
                new ObjectParameter("RecordMigrationDateTime", typeof(System.DateTime));
    
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(long));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var assetModelParameter = assetModel.HasValue ?
                new ObjectParameter("AssetModel", assetModel) :
                new ObjectParameter("AssetModel", typeof(int));
    
            var nextPreventativeMaintenanceParameter = nextPreventativeMaintenance.HasValue ?
                new ObjectParameter("NextPreventativeMaintenance", nextPreventativeMaintenance) :
                new ObjectParameter("NextPreventativeMaintenance", typeof(System.DateTime));
    
            var operationalStatusParameter = operationalStatus.HasValue ?
                new ObjectParameter("OperationalStatus", operationalStatus) :
                new ObjectParameter("OperationalStatus", typeof(int));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var spaceCountParameter = spaceCount.HasValue ?
                new ObjectParameter("SpaceCount", spaceCount) :
                new ObjectParameter("SpaceCount", typeof(int));
    
            var demandStatusParameter = demandStatus.HasValue ?
                new ObjectParameter("DemandStatus", demandStatus) :
                new ObjectParameter("DemandStatus", typeof(int));
    
            var warrantyExpirationParameter = warrantyExpiration.HasValue ?
                new ObjectParameter("WarrantyExpiration", warrantyExpiration) :
                new ObjectParameter("WarrantyExpiration", typeof(System.DateTime));
    
            var dateInstalledParameter = dateInstalled.HasValue ?
                new ObjectParameter("DateInstalled", dateInstalled) :
                new ObjectParameter("DateInstalled", typeof(System.DateTime));
    
            var locationMetersParameter = locationMeters != null ?
                new ObjectParameter("LocationMeters", locationMeters) :
                new ObjectParameter("LocationMeters", typeof(string));
    
            var lastPreventativeMaintenanceParameter = lastPreventativeMaintenance.HasValue ?
                new ObjectParameter("LastPreventativeMaintenance", lastPreventativeMaintenance) :
                new ObjectParameter("LastPreventativeMaintenance", typeof(System.DateTime));
    
            var assetStateParameter = assetState.HasValue ?
                new ObjectParameter("AssetState", assetState) :
                new ObjectParameter("AssetState", typeof(int));
    
            var operationalStatusTimeParameter = operationalStatusTime.HasValue ?
                new ObjectParameter("OperationalStatusTime", operationalStatusTime) :
                new ObjectParameter("OperationalStatusTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertOrUpdateMeter", assetPendingReasonIdParameter, customerIdParameter, areaIdParameter, meterIdParameter, createUserIdParameter, recordCreateDateTimeParameter, recordMigrationDateTimeParameter, assetIdParameter, assetTypeParameter, assetNameParameter, assetModelParameter, nextPreventativeMaintenanceParameter, operationalStatusParameter, latitudeParameter, longitudeParameter, phoneNumberParameter, spaceCountParameter, demandStatusParameter, warrantyExpirationParameter, dateInstalledParameter, locationMetersParameter, lastPreventativeMaintenanceParameter, assetStateParameter, operationalStatusTimeParameter);
        }
    
        public virtual int sp_InsertUpdate_CashBox(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> assetId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId, Nullable<int> assetType, string assetName, Nullable<int> assetModel, Nullable<System.DateTime> nextPreventativeMaintenance, Nullable<int> operationalStatus, Nullable<System.DateTime> warrantyExpiration, Nullable<System.DateTime> dateInstalled, Nullable<System.DateTime> lastPreventativeMaintenance, Nullable<int> assetState, Nullable<System.DateTime> operationalStatusTime, Nullable<int> cashboxLocationTypeId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var assetModelParameter = assetModel.HasValue ?
                new ObjectParameter("AssetModel", assetModel) :
                new ObjectParameter("AssetModel", typeof(int));
    
            var nextPreventativeMaintenanceParameter = nextPreventativeMaintenance.HasValue ?
                new ObjectParameter("NextPreventativeMaintenance", nextPreventativeMaintenance) :
                new ObjectParameter("NextPreventativeMaintenance", typeof(System.DateTime));
    
            var operationalStatusParameter = operationalStatus.HasValue ?
                new ObjectParameter("OperationalStatus", operationalStatus) :
                new ObjectParameter("OperationalStatus", typeof(int));
    
            var warrantyExpirationParameter = warrantyExpiration.HasValue ?
                new ObjectParameter("WarrantyExpiration", warrantyExpiration) :
                new ObjectParameter("WarrantyExpiration", typeof(System.DateTime));
    
            var dateInstalledParameter = dateInstalled.HasValue ?
                new ObjectParameter("DateInstalled", dateInstalled) :
                new ObjectParameter("DateInstalled", typeof(System.DateTime));
    
            var lastPreventativeMaintenanceParameter = lastPreventativeMaintenance.HasValue ?
                new ObjectParameter("LastPreventativeMaintenance", lastPreventativeMaintenance) :
                new ObjectParameter("LastPreventativeMaintenance", typeof(System.DateTime));
    
            var assetStateParameter = assetState.HasValue ?
                new ObjectParameter("AssetState", assetState) :
                new ObjectParameter("AssetState", typeof(int));
    
            var operationalStatusTimeParameter = operationalStatusTime.HasValue ?
                new ObjectParameter("OperationalStatusTime", operationalStatusTime) :
                new ObjectParameter("OperationalStatusTime", typeof(System.DateTime));
    
            var cashboxLocationTypeIdParameter = cashboxLocationTypeId.HasValue ?
                new ObjectParameter("CashboxLocationTypeId", cashboxLocationTypeId) :
                new ObjectParameter("CashboxLocationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdate_CashBox", customerIdParameter, areaIdParameter, meterIdParameter, assetIdParameter, assetPendingReasonIdParameter, createUserIdParameter, assetTypeParameter, assetNameParameter, assetModelParameter, nextPreventativeMaintenanceParameter, operationalStatusParameter, warrantyExpirationParameter, dateInstalledParameter, lastPreventativeMaintenanceParameter, assetStateParameter, operationalStatusTimeParameter, cashboxLocationTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_InsertUpdate_Gateways(Nullable<int> assetPendingReasonId, Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<long> assetId, Nullable<int> createUserId, string assetName, Nullable<double> latitude, Nullable<double> longitude, string locationGateway, Nullable<int> assetType, Nullable<int> assetModel, Nullable<int> assetState, Nullable<System.DateTime> dateInstalled, Nullable<int> operationalStatus, Nullable<System.DateTime> operationalStatusTime, Nullable<System.DateTime> warrantyExpiration, Nullable<System.DateTime> lastPreventativeMaintenance, Nullable<System.DateTime> nextPreventativeMaintenance, Nullable<int> demandStatus)
        {
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(long));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var locationGatewayParameter = locationGateway != null ?
                new ObjectParameter("LocationGateway", locationGateway) :
                new ObjectParameter("LocationGateway", typeof(string));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetModelParameter = assetModel.HasValue ?
                new ObjectParameter("AssetModel", assetModel) :
                new ObjectParameter("AssetModel", typeof(int));
    
            var assetStateParameter = assetState.HasValue ?
                new ObjectParameter("AssetState", assetState) :
                new ObjectParameter("AssetState", typeof(int));
    
            var dateInstalledParameter = dateInstalled.HasValue ?
                new ObjectParameter("DateInstalled", dateInstalled) :
                new ObjectParameter("DateInstalled", typeof(System.DateTime));
    
            var operationalStatusParameter = operationalStatus.HasValue ?
                new ObjectParameter("OperationalStatus", operationalStatus) :
                new ObjectParameter("OperationalStatus", typeof(int));
    
            var operationalStatusTimeParameter = operationalStatusTime.HasValue ?
                new ObjectParameter("OperationalStatusTime", operationalStatusTime) :
                new ObjectParameter("OperationalStatusTime", typeof(System.DateTime));
    
            var warrantyExpirationParameter = warrantyExpiration.HasValue ?
                new ObjectParameter("WarrantyExpiration", warrantyExpiration) :
                new ObjectParameter("WarrantyExpiration", typeof(System.DateTime));
    
            var lastPreventativeMaintenanceParameter = lastPreventativeMaintenance.HasValue ?
                new ObjectParameter("LastPreventativeMaintenance", lastPreventativeMaintenance) :
                new ObjectParameter("LastPreventativeMaintenance", typeof(System.DateTime));
    
            var nextPreventativeMaintenanceParameter = nextPreventativeMaintenance.HasValue ?
                new ObjectParameter("NextPreventativeMaintenance", nextPreventativeMaintenance) :
                new ObjectParameter("NextPreventativeMaintenance", typeof(System.DateTime));
    
            var demandStatusParameter = demandStatus.HasValue ?
                new ObjectParameter("DemandStatus", demandStatus) :
                new ObjectParameter("DemandStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_InsertUpdate_Gateways", assetPendingReasonIdParameter, customerIdParameter, areaIdParameter, meterIdParameter, assetIdParameter, createUserIdParameter, assetNameParameter, latitudeParameter, longitudeParameter, locationGatewayParameter, assetTypeParameter, assetModelParameter, assetStateParameter, dateInstalledParameter, operationalStatusParameter, operationalStatusTimeParameter, warrantyExpirationParameter, lastPreventativeMaintenanceParameter, nextPreventativeMaintenanceParameter, demandStatusParameter);
        }
    
        public virtual int sp_InsertUpdate_MeterMap(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> meterMapZoneId, Nullable<int> meterMapAreaId2, Nullable<int> collRouteId, Nullable<int> meterMapSuburbId, Nullable<int> meterMapMaintenanceRoute, Nullable<int> meterMapHousingId, Nullable<int> meterMapMechId, Nullable<int> gatewayId, Nullable<int> sensorId, Nullable<int> cashboxId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var meterMapZoneIdParameter = meterMapZoneId.HasValue ?
                new ObjectParameter("MeterMapZoneId", meterMapZoneId) :
                new ObjectParameter("MeterMapZoneId", typeof(int));
    
            var meterMapAreaId2Parameter = meterMapAreaId2.HasValue ?
                new ObjectParameter("MeterMapAreaId2", meterMapAreaId2) :
                new ObjectParameter("MeterMapAreaId2", typeof(int));
    
            var collRouteIdParameter = collRouteId.HasValue ?
                new ObjectParameter("CollRouteId", collRouteId) :
                new ObjectParameter("CollRouteId", typeof(int));
    
            var meterMapSuburbIdParameter = meterMapSuburbId.HasValue ?
                new ObjectParameter("MeterMapSuburbId", meterMapSuburbId) :
                new ObjectParameter("MeterMapSuburbId", typeof(int));
    
            var meterMapMaintenanceRouteParameter = meterMapMaintenanceRoute.HasValue ?
                new ObjectParameter("MeterMapMaintenanceRoute", meterMapMaintenanceRoute) :
                new ObjectParameter("MeterMapMaintenanceRoute", typeof(int));
    
            var meterMapHousingIdParameter = meterMapHousingId.HasValue ?
                new ObjectParameter("MeterMapHousingId", meterMapHousingId) :
                new ObjectParameter("MeterMapHousingId", typeof(int));
    
            var meterMapMechIdParameter = meterMapMechId.HasValue ?
                new ObjectParameter("MeterMapMechId", meterMapMechId) :
                new ObjectParameter("MeterMapMechId", typeof(int));
    
            var gatewayIdParameter = gatewayId.HasValue ?
                new ObjectParameter("GatewayId", gatewayId) :
                new ObjectParameter("GatewayId", typeof(int));
    
            var sensorIdParameter = sensorId.HasValue ?
                new ObjectParameter("SensorId", sensorId) :
                new ObjectParameter("SensorId", typeof(int));
    
            var cashboxIdParameter = cashboxId.HasValue ?
                new ObjectParameter("CashboxId", cashboxId) :
                new ObjectParameter("CashboxId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdate_MeterMap", customerIdParameter, areaIdParameter, meterIdParameter, meterMapZoneIdParameter, meterMapAreaId2Parameter, collRouteIdParameter, meterMapSuburbIdParameter, meterMapMaintenanceRouteParameter, meterMapHousingIdParameter, meterMapMechIdParameter, gatewayIdParameter, sensorIdParameter, cashboxIdParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_InsertUpdate_ParkingSpaces(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<long> assetId, Nullable<double> latitude, Nullable<double> longitude, Nullable<System.DateTime> dateInstalled, Nullable<int> demandStatus, string displaySpaceNum, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("assetId", assetId) :
                new ObjectParameter("assetId", typeof(long));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var dateInstalledParameter = dateInstalled.HasValue ?
                new ObjectParameter("DateInstalled", dateInstalled) :
                new ObjectParameter("DateInstalled", typeof(System.DateTime));
    
            var demandStatusParameter = demandStatus.HasValue ?
                new ObjectParameter("DemandStatus", demandStatus) :
                new ObjectParameter("DemandStatus", typeof(int));
    
            var displaySpaceNumParameter = displaySpaceNum != null ?
                new ObjectParameter("DisplaySpaceNum", displaySpaceNum) :
                new ObjectParameter("DisplaySpaceNum", typeof(string));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdate_ParkingSpaces", customerIdParameter, areaIdParameter, meterIdParameter, assetIdParameter, latitudeParameter, longitudeParameter, dateInstalledParameter, demandStatusParameter, displaySpaceNumParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_InsertUpdate_Sensors(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> assetId, Nullable<int> assetPendingReasonId, Nullable<int> createUserId, Nullable<double> latitude, Nullable<double> longitude, string locationSensor, Nullable<long> parkingSpaceId, Nullable<long> primaryGateway, Nullable<long> secondaryGateway, Nullable<int> assetType, string assetName, Nullable<int> assetModel, Nullable<int> assetState, Nullable<int> operationalStatus, Nullable<System.DateTime> operationalStatusTime, Nullable<System.DateTime> warrantyExpiration, Nullable<System.DateTime> lastPreventativeMaintenance, Nullable<System.DateTime> nextPreventativeMaintenance, Nullable<int> demandStatus, Nullable<System.DateTime> dateInstalled)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var locationSensorParameter = locationSensor != null ?
                new ObjectParameter("LocationSensor", locationSensor) :
                new ObjectParameter("LocationSensor", typeof(string));
    
            var parkingSpaceIdParameter = parkingSpaceId.HasValue ?
                new ObjectParameter("ParkingSpaceId", parkingSpaceId) :
                new ObjectParameter("ParkingSpaceId", typeof(long));
    
            var primaryGatewayParameter = primaryGateway.HasValue ?
                new ObjectParameter("PrimaryGateway", primaryGateway) :
                new ObjectParameter("PrimaryGateway", typeof(long));
    
            var secondaryGatewayParameter = secondaryGateway.HasValue ?
                new ObjectParameter("SecondaryGateway", secondaryGateway) :
                new ObjectParameter("SecondaryGateway", typeof(long));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var assetModelParameter = assetModel.HasValue ?
                new ObjectParameter("AssetModel", assetModel) :
                new ObjectParameter("AssetModel", typeof(int));
    
            var assetStateParameter = assetState.HasValue ?
                new ObjectParameter("AssetState", assetState) :
                new ObjectParameter("AssetState", typeof(int));
    
            var operationalStatusParameter = operationalStatus.HasValue ?
                new ObjectParameter("OperationalStatus", operationalStatus) :
                new ObjectParameter("OperationalStatus", typeof(int));
    
            var operationalStatusTimeParameter = operationalStatusTime.HasValue ?
                new ObjectParameter("OperationalStatusTime", operationalStatusTime) :
                new ObjectParameter("OperationalStatusTime", typeof(System.DateTime));
    
            var warrantyExpirationParameter = warrantyExpiration.HasValue ?
                new ObjectParameter("WarrantyExpiration", warrantyExpiration) :
                new ObjectParameter("WarrantyExpiration", typeof(System.DateTime));
    
            var lastPreventativeMaintenanceParameter = lastPreventativeMaintenance.HasValue ?
                new ObjectParameter("LastPreventativeMaintenance", lastPreventativeMaintenance) :
                new ObjectParameter("LastPreventativeMaintenance", typeof(System.DateTime));
    
            var nextPreventativeMaintenanceParameter = nextPreventativeMaintenance.HasValue ?
                new ObjectParameter("NextPreventativeMaintenance", nextPreventativeMaintenance) :
                new ObjectParameter("NextPreventativeMaintenance", typeof(System.DateTime));
    
            var demandStatusParameter = demandStatus.HasValue ?
                new ObjectParameter("DemandStatus", demandStatus) :
                new ObjectParameter("DemandStatus", typeof(int));
    
            var dateInstalledParameter = dateInstalled.HasValue ?
                new ObjectParameter("DateInstalled", dateInstalled) :
                new ObjectParameter("DateInstalled", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdate_Sensors", customerIdParameter, areaIdParameter, meterIdParameter, assetIdParameter, assetPendingReasonIdParameter, createUserIdParameter, latitudeParameter, longitudeParameter, locationSensorParameter, parkingSpaceIdParameter, primaryGatewayParameter, secondaryGatewayParameter, assetTypeParameter, assetNameParameter, assetModelParameter, assetStateParameter, operationalStatusParameter, operationalStatusTimeParameter, warrantyExpirationParameter, lastPreventativeMaintenanceParameter, nextPreventativeMaintenanceParameter, demandStatusParameter, dateInstalledParameter);
        }
    
        public virtual int sp_NextPreventativeAlarm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NextPreventativeAlarm");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_PopulateWhiteListFileComplete()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_PopulateWhiteListFileComplete");
        }
    
        public virtual int sp_SLA_AssetDownTime(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurance, Nullable<System.DateTime> timeOfNotification, Nullable<System.DateTime> sLATarget)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccuranceParameter = timeOfOccurance.HasValue ?
                new ObjectParameter("TimeOfOccurance", timeOfOccurance) :
                new ObjectParameter("TimeOfOccurance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var sLATargetParameter = sLATarget.HasValue ?
                new ObjectParameter("SLATarget", sLATarget) :
                new ObjectParameter("SLATarget", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_AssetDownTime", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccuranceParameter, timeOfNotificationParameter, sLATargetParameter);
        }
    
        public virtual int sp_SLA_getDownTime(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurance, Nullable<System.DateTime> timeOfClearance, ObjectParameter totalMinute)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccuranceParameter = timeOfOccurance.HasValue ?
                new ObjectParameter("TimeOfOccurance", timeOfOccurance) :
                new ObjectParameter("TimeOfOccurance", typeof(System.DateTime));
    
            var timeOfClearanceParameter = timeOfClearance.HasValue ?
                new ObjectParameter("TimeOfClearance", timeOfClearance) :
                new ObjectParameter("TimeOfClearance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_getDownTime", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccuranceParameter, timeOfClearanceParameter, totalMinute);
        }
    
        public virtual int sp_SLA_getDownTimeOfADay(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<System.DateTime> ts, Nullable<System.DateTime> slaStart, Nullable<System.DateTime> slaEnd, ObjectParameter downTime, ObjectParameter nffDownTime)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var tsParameter = ts.HasValue ?
                new ObjectParameter("Ts", ts) :
                new ObjectParameter("Ts", typeof(System.DateTime));
    
            var slaStartParameter = slaStart.HasValue ?
                new ObjectParameter("SlaStart", slaStart) :
                new ObjectParameter("SlaStart", typeof(System.DateTime));
    
            var slaEndParameter = slaEnd.HasValue ?
                new ObjectParameter("slaEnd", slaEnd) :
                new ObjectParameter("slaEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_getDownTimeOfADay", customerIdParameter, areaIdParameter, meterIdParameter, tsParameter, slaStartParameter, slaEndParameter, downTime, nffDownTime);
        }
    
        public virtual int sp_SLA_getMaintenanceDowntime(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, ObjectParameter sLAMinute)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_getMaintenanceDowntime", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, sLAMinute);
        }
    
        public virtual int sp_SLA_getROMScheudle(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<System.DateTime> ts, string tableName, ObjectParameter start, ObjectParameter end, ObjectParameter startTs, ObjectParameter endTS)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var tsParameter = ts.HasValue ?
                new ObjectParameter("Ts", ts) :
                new ObjectParameter("Ts", typeof(System.DateTime));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_getROMScheudle", customerIdParameter, areaIdParameter, meterIdParameter, tsParameter, tableNameParameter, start, end, startTs, endTS);
        }
    
        public virtual int sp_SLA_getSLAMinute(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, ObjectParameter sLAMinute)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_getSLAMinute", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, sLAMinute);
        }
    
        public virtual int sp_SLA_getSLAStartOrEnd(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> tS, Nullable<bool> start, ObjectParameter sLATarget)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var tSParameter = tS.HasValue ?
                new ObjectParameter("TS", tS) :
                new ObjectParameter("TS", typeof(System.DateTime));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_getSLAStartOrEnd", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, tSParameter, startParameter, sLATarget);
        }
    
        public virtual int sp_SLA_getSLATargetTime(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurance, ObjectParameter sLATarget)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccuranceParameter = timeOfOccurance.HasValue ?
                new ObjectParameter("TimeOfOccurance", timeOfOccurance) :
                new ObjectParameter("TimeOfOccurance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_getSLATargetTime", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccuranceParameter, sLATarget);
        }
    
        public virtual int sp_SLA_isApplicable(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurance, Nullable<int> sLAMinute, ObjectParameter sLATarget, ObjectParameter recursiveCall)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccuranceParameter = timeOfOccurance.HasValue ?
                new ObjectParameter("TimeOfOccurance", timeOfOccurance) :
                new ObjectParameter("TimeOfOccurance", typeof(System.DateTime));
    
            var sLAMinuteParameter = sLAMinute.HasValue ?
                new ObjectParameter("SLAMinute", sLAMinute) :
                new ObjectParameter("SLAMinute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_isApplicable", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccuranceParameter, sLAMinuteParameter, sLATarget, recursiveCall);
        }
    
        public virtual int sp_SLA_pct(Nullable<int> startMinuteOfDay, Nullable<int> endMinuteOfDay, Nullable<int> downtime, ObjectParameter totalMinuteOfDay, ObjectParameter totalUpTime, ObjectParameter upTimePct)
        {
            var startMinuteOfDayParameter = startMinuteOfDay.HasValue ?
                new ObjectParameter("startMinuteOfDay", startMinuteOfDay) :
                new ObjectParameter("startMinuteOfDay", typeof(int));
    
            var endMinuteOfDayParameter = endMinuteOfDay.HasValue ?
                new ObjectParameter("endMinuteOfDay", endMinuteOfDay) :
                new ObjectParameter("endMinuteOfDay", typeof(int));
    
            var downtimeParameter = downtime.HasValue ?
                new ObjectParameter("downtime", downtime) :
                new ObjectParameter("downtime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_pct", startMinuteOfDayParameter, endMinuteOfDayParameter, downtimeParameter, totalMinuteOfDay, totalUpTime, upTimePct);
        }
    
        public virtual int sp_SLA_populateMaintenanceDowntime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_populateMaintenanceDowntime");
        }
    
        public virtual int sp_SLA_populateMaintenanceDowntime_D(Nullable<System.DateTime> d)
        {
            var dParameter = d.HasValue ?
                new ObjectParameter("d", d) :
                new ObjectParameter("d", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SLA_populateMaintenanceDowntime_D", dParameter);
        }
    
        public virtual int sp_Update_Audit_SensorMapping(Nullable<int> customerId, Nullable<long> sensorId, Nullable<long> parkingSpaceId, Nullable<long> gatewayId, Nullable<int> isPrimaryGateway, Nullable<int> assetPendingReasonId, Nullable<int> createUserId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var sensorIdParameter = sensorId.HasValue ?
                new ObjectParameter("SensorId", sensorId) :
                new ObjectParameter("SensorId", typeof(long));
    
            var parkingSpaceIdParameter = parkingSpaceId.HasValue ?
                new ObjectParameter("ParkingSpaceId", parkingSpaceId) :
                new ObjectParameter("ParkingSpaceId", typeof(long));
    
            var gatewayIdParameter = gatewayId.HasValue ?
                new ObjectParameter("GatewayId", gatewayId) :
                new ObjectParameter("GatewayId", typeof(long));
    
            var isPrimaryGatewayParameter = isPrimaryGateway.HasValue ?
                new ObjectParameter("IsPrimaryGateway", isPrimaryGateway) :
                new ObjectParameter("IsPrimaryGateway", typeof(int));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Audit_SensorMapping", customerIdParameter, sensorIdParameter, parkingSpaceIdParameter, gatewayIdParameter, isPrimaryGatewayParameter, assetPendingReasonIdParameter, createUserIdParameter);
        }
    
        public virtual int sp_Update_Meters(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<System.DateTime> nextPreventativeMaintenance, string street, Nullable<int> operationalStatus, Nullable<double> latitude, Nullable<double> longitude, Nullable<int> userId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var nextPreventativeMaintenanceParameter = nextPreventativeMaintenance.HasValue ?
                new ObjectParameter("NextPreventativeMaintenance", nextPreventativeMaintenance) :
                new ObjectParameter("NextPreventativeMaintenance", typeof(System.DateTime));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var operationalStatusParameter = operationalStatus.HasValue ?
                new ObjectParameter("OperationalStatus", operationalStatus) :
                new ObjectParameter("OperationalStatus", typeof(int));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Meters", customerIdParameter, areaIdParameter, meterIdParameter, nextPreventativeMaintenanceParameter, streetParameter, operationalStatusParameter, latitudeParameter, longitudeParameter, userIdParameter);
        }
    
        public virtual int sp_Update_Pending()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Pending");
        }
    
        public virtual int sp_Update_VersionProfileMeter(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, string assetFirmwareVersion, string assetSoftwareVersion, string mPVFirmware, Nullable<int> assetPendingReasonId, Nullable<int> createUserId, Nullable<int> meterGroup)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var assetFirmwareVersionParameter = assetFirmwareVersion != null ?
                new ObjectParameter("AssetFirmwareVersion", assetFirmwareVersion) :
                new ObjectParameter("AssetFirmwareVersion", typeof(string));
    
            var assetSoftwareVersionParameter = assetSoftwareVersion != null ?
                new ObjectParameter("AssetSoftwareVersion", assetSoftwareVersion) :
                new ObjectParameter("AssetSoftwareVersion", typeof(string));
    
            var mPVFirmwareParameter = mPVFirmware != null ?
                new ObjectParameter("MPVFirmware", mPVFirmware) :
                new ObjectParameter("MPVFirmware", typeof(string));
    
            var assetPendingReasonIdParameter = assetPendingReasonId.HasValue ?
                new ObjectParameter("AssetPendingReasonId", assetPendingReasonId) :
                new ObjectParameter("AssetPendingReasonId", typeof(int));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(int));
    
            var meterGroupParameter = meterGroup.HasValue ?
                new ObjectParameter("MeterGroup", meterGroup) :
                new ObjectParameter("MeterGroup", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_VersionProfileMeter", customerIdParameter, areaIdParameter, meterIdParameter, assetFirmwareVersionParameter, assetSoftwareVersionParameter, mPVFirmwareParameter, assetPendingReasonIdParameter, createUserIdParameter, meterGroupParameter);
        }
    
        public virtual int sp_util_MinMax(string txt, Nullable<int> num1, Nullable<int> num2, Nullable<System.DateTime> ts1, Nullable<System.DateTime> ts2, ObjectParameter result, ObjectParameter resultTs)
        {
            var txtParameter = txt != null ?
                new ObjectParameter("txt", txt) :
                new ObjectParameter("txt", typeof(string));
    
            var num1Parameter = num1.HasValue ?
                new ObjectParameter("num1", num1) :
                new ObjectParameter("num1", typeof(int));
    
            var num2Parameter = num2.HasValue ?
                new ObjectParameter("num2", num2) :
                new ObjectParameter("num2", typeof(int));
    
            var ts1Parameter = ts1.HasValue ?
                new ObjectParameter("ts1", ts1) :
                new ObjectParameter("ts1", typeof(System.DateTime));
    
            var ts2Parameter = ts2.HasValue ?
                new ObjectParameter("ts2", ts2) :
                new ObjectParameter("ts2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_util_MinMax", txtParameter, num1Parameter, num2Parameter, ts1Parameter, ts2Parameter, result, resultTs);
        }
    
        public virtual int sp_util_PrintDate(string txt, Nullable<System.DateTime> ts)
        {
            var txtParameter = txt != null ?
                new ObjectParameter("txt", txt) :
                new ObjectParameter("txt", typeof(string));
    
            var tsParameter = ts.HasValue ?
                new ObjectParameter("ts", ts) :
                new ObjectParameter("ts", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_util_PrintDate", txtParameter, tsParameter);
        }
    
        public virtual int sp_util_PrintNum(string txt, Nullable<long> num)
        {
            var txtParameter = txt != null ?
                new ObjectParameter("txt", txt) :
                new ObjectParameter("txt", typeof(string));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_util_PrintNum", txtParameter, numParameter);
        }
    
        [EdmFunction("PEMEntities", "dailyGPRSRevenue1")]
        public virtual IQueryable<dailyGPRSRevenue1_Result> dailyGPRSRevenue1(Nullable<int> custId, Nullable<System.DateTime> datenow)
        {
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(int));
    
            var datenowParameter = datenow.HasValue ?
                new ObjectParameter("datenow", datenow) :
                new ObjectParameter("datenow", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<dailyGPRSRevenue1_Result>("[PEMEntities].[dailyGPRSRevenue1](@custId, @datenow)", custIdParameter, datenowParameter);
        }
    
        public virtual int sp_alterdiagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition1_Result> sp_helpdiagramdefinition1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition1_Result>("sp_helpdiagramdefinition1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams1_Result> sp_helpdiagrams1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams1_Result>("sp_helpdiagrams1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram1(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram1", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams1");
        }
    
        [EdmFunction("PEMEntities", "SplitString1")]
        public virtual IQueryable<string> SplitString1(string stringList, string delimiter)
        {
            var stringListParameter = stringList != null ?
                new ObjectParameter("stringList", stringList) :
                new ObjectParameter("stringList", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[PEMEntities].[SplitString1](@stringList, @delimiter)", stringListParameter, delimiterParameter);
        }
    
        public virtual int sp_ActiveAlarm_Helper(Nullable<int> customerID, Nullable<int> areaID, Nullable<int> meterID, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActiveAlarm_Helper", customerIDParameter, areaIDParameter, meterIDParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter);
        }
    
        public virtual int sp_addMeterJob(string areaName, string collroutesName, string maintrtsName, string enfrtsName, string cg1gpsName, string cg2gpsName, string cg3gpsName, string locationName, string fileName, byte[] fileContent, Nullable<int> fileType, string chkSum, Nullable<System.DateTime> availableDate, Nullable<System.DateTime> activationDate, Nullable<int> cid)
        {
            var areaNameParameter = areaName != null ?
                new ObjectParameter("areaName", areaName) :
                new ObjectParameter("areaName", typeof(string));
    
            var collroutesNameParameter = collroutesName != null ?
                new ObjectParameter("collroutesName", collroutesName) :
                new ObjectParameter("collroutesName", typeof(string));
    
            var maintrtsNameParameter = maintrtsName != null ?
                new ObjectParameter("maintrtsName", maintrtsName) :
                new ObjectParameter("maintrtsName", typeof(string));
    
            var enfrtsNameParameter = enfrtsName != null ?
                new ObjectParameter("enfrtsName", enfrtsName) :
                new ObjectParameter("enfrtsName", typeof(string));
    
            var cg1gpsNameParameter = cg1gpsName != null ?
                new ObjectParameter("cg1gpsName", cg1gpsName) :
                new ObjectParameter("cg1gpsName", typeof(string));
    
            var cg2gpsNameParameter = cg2gpsName != null ?
                new ObjectParameter("cg2gpsName", cg2gpsName) :
                new ObjectParameter("cg2gpsName", typeof(string));
    
            var cg3gpsNameParameter = cg3gpsName != null ?
                new ObjectParameter("cg3gpsName", cg3gpsName) :
                new ObjectParameter("cg3gpsName", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("locationName", locationName) :
                new ObjectParameter("locationName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var fileContentParameter = fileContent != null ?
                new ObjectParameter("fileContent", fileContent) :
                new ObjectParameter("fileContent", typeof(byte[]));
    
            var fileTypeParameter = fileType.HasValue ?
                new ObjectParameter("fileType", fileType) :
                new ObjectParameter("fileType", typeof(int));
    
            var chkSumParameter = chkSum != null ?
                new ObjectParameter("chkSum", chkSum) :
                new ObjectParameter("chkSum", typeof(string));
    
            var availableDateParameter = availableDate.HasValue ?
                new ObjectParameter("availableDate", availableDate) :
                new ObjectParameter("availableDate", typeof(System.DateTime));
    
            var activationDateParameter = activationDate.HasValue ?
                new ObjectParameter("activationDate", activationDate) :
                new ObjectParameter("activationDate", typeof(System.DateTime));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_addMeterJob", areaNameParameter, collroutesNameParameter, maintrtsNameParameter, enfrtsNameParameter, cg1gpsNameParameter, cg2gpsNameParameter, cg3gpsNameParameter, locationNameParameter, fileNameParameter, fileContentParameter, fileTypeParameter, chkSumParameter, availableDateParameter, activationDateParameter, cidParameter);
        }
    
        public virtual ObjectResult<string> sp_Alarm(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> currentTime, Nullable<int> workOrderId, string function)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("CurrentTime", currentTime) :
                new ObjectParameter("CurrentTime", typeof(System.DateTime));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            var functionParameter = function != null ?
                new ObjectParameter("Function", function) :
                new ObjectParameter("Function", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Alarm", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, currentTimeParameter, workOrderIdParameter, functionParameter);
        }
    
        public virtual int sp_Alarm_Clear(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfClearance, ObjectParameter message)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfClearanceParameter = timeOfClearance.HasValue ?
                new ObjectParameter("TimeOfClearance", timeOfClearance) :
                new ObjectParameter("TimeOfClearance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_Clear", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, timeOfClearanceParameter, message);
        }
    
        public virtual int sp_Alarm_DeleteActive(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> state, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<int> eventSource)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_DeleteActive", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, stateParameter, timeOfOccurranceParameter, timeOfNotificationParameter, eventSourceParameter);
        }
    
        public virtual int sp_Alarm_InsertActive(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<int> workOrderId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_InsertActive", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, timeOfNotificationParameter, workOrderIdParameter);
        }
    
        public virtual int sp_Alarm_InsertHistorical(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<int> eventState, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<System.DateTime> timeofClearance, Nullable<int> clearingEventUID, ObjectParameter eventUID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var eventStateParameter = eventState.HasValue ?
                new ObjectParameter("EventState", eventState) :
                new ObjectParameter("EventState", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var timeofClearanceParameter = timeofClearance.HasValue ?
                new ObjectParameter("TimeofClearance", timeofClearance) :
                new ObjectParameter("TimeofClearance", typeof(System.DateTime));
    
            var clearingEventUIDParameter = clearingEventUID.HasValue ?
                new ObjectParameter("ClearingEventUID", clearingEventUID) :
                new ObjectParameter("ClearingEventUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_InsertHistorical", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, eventStateParameter, timeOfOccurranceParameter, timeOfNotificationParameter, timeofClearanceParameter, clearingEventUIDParameter, eventUID);
        }
    
        public virtual int sp_Alarm_MeterStatus(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, ObjectParameter message)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_MeterStatus", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, timeOfNotificationParameter, message);
        }
    
        public virtual int sp_Alarm_MoveActiveToHistorical(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<int> eventState, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<System.DateTime> timeofClearance, Nullable<int> clearingEventUID, ObjectParameter eventUID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var eventStateParameter = eventState.HasValue ?
                new ObjectParameter("EventState", eventState) :
                new ObjectParameter("EventState", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var timeofClearanceParameter = timeofClearance.HasValue ?
                new ObjectParameter("TimeofClearance", timeofClearance) :
                new ObjectParameter("TimeofClearance", typeof(System.DateTime));
    
            var clearingEventUIDParameter = clearingEventUID.HasValue ?
                new ObjectParameter("ClearingEventUID", clearingEventUID) :
                new ObjectParameter("ClearingEventUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_MoveActiveToHistorical", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, eventStateParameter, timeOfOccurranceParameter, timeOfNotificationParameter, timeofClearanceParameter, clearingEventUIDParameter, eventUID);
        }
    
        public virtual int sp_Alarm_Raised(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<int> workOrderId, ObjectParameter message)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_Raised", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, timeOfNotificationParameter, workOrderIdParameter, message);
        }
    
        public virtual int sp_Alarm_SearchHistory(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, ObjectParameter eventUID, ObjectParameter timeOfClearance)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_SearchHistory", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, eventUID, timeOfClearance);
        }
    
        public virtual int sp_CashBoxDataImport_CollectionRunReport(Nullable<int> collectionRunId, Nullable<int> cid)
        {
            var collectionRunIdParameter = collectionRunId.HasValue ?
                new ObjectParameter("CollectionRunId", collectionRunId) :
                new ObjectParameter("CollectionRunId", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CashBoxDataImport_CollectionRunReport", collectionRunIdParameter, cidParameter);
        }
    
        public virtual int sp_CollDataSumm_CollectionRunReport(Nullable<int> collectionRunId, Nullable<int> cid)
        {
            var collectionRunIdParameter = collectionRunId.HasValue ?
                new ObjectParameter("CollectionRunId", collectionRunId) :
                new ObjectParameter("CollectionRunId", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CollDataSumm_CollectionRunReport", collectionRunIdParameter, cidParameter);
        }
    
        public virtual int sp_GenerateCollectionRunReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GenerateCollectionRunReport");
        }
    
        public virtual int sp_GetAlamrUID(ObjectParameter alamrUID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAlamrUID", alamrUID);
        }
    
        public virtual int sp_GetEventUID(ObjectParameter eventUID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetEventUID", eventUID);
        }
    
        public virtual int sp_GetParkingSpaceId(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> bayNumber, ObjectParameter parkingSpaceId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var bayNumberParameter = bayNumber.HasValue ?
                new ObjectParameter("BayNumber", bayNumber) :
                new ObjectParameter("BayNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetParkingSpaceId", customerIdParameter, areaIdParameter, meterIdParameter, bayNumberParameter, parkingSpaceId);
        }
    
        public virtual int sp_GetZoneID_From_MeterMap(Nullable<int> meterID, Nullable<int> customerID, Nullable<int> areaID, ObjectParameter zoneID)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetZoneID_From_MeterMap", meterIDParameter, customerIDParameter, areaIDParameter, zoneID);
        }
    
        public virtual int sp_HistoricalAlarm_Helper(Nullable<int> customerID, Nullable<int> areaID, Nullable<int> meterID, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<int> eventState, Nullable<long> eventUID, Nullable<long> alarmUID, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfClearance)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var eventStateParameter = eventState.HasValue ?
                new ObjectParameter("EventState", eventState) :
                new ObjectParameter("EventState", typeof(int));
    
            var eventUIDParameter = eventUID.HasValue ?
                new ObjectParameter("EventUID", eventUID) :
                new ObjectParameter("EventUID", typeof(long));
    
            var alarmUIDParameter = alarmUID.HasValue ?
                new ObjectParameter("AlarmUID", alarmUID) :
                new ObjectParameter("AlarmUID", typeof(long));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfClearanceParameter = timeOfClearance.HasValue ?
                new ObjectParameter("TimeOfClearance", timeOfClearance) :
                new ObjectParameter("TimeOfClearance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_HistoricalAlarm_Helper", customerIDParameter, areaIDParameter, meterIDParameter, eventCodeParameter, eventSourceParameter, eventStateParameter, eventUIDParameter, alarmUIDParameter, timeOfOccurranceParameter, timeOfClearanceParameter);
        }
    
        public virtual int Sp_inserteventlog2(Nullable<long> uid, Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> eventCode, Nullable<System.DateTime> eventDateTime, ObjectParameter type1, ObjectParameter type2, ObjectParameter type3, ObjectParameter type4, ObjectParameter type5)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(long));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDateTimeParameter = eventDateTime.HasValue ?
                new ObjectParameter("EventDateTime", eventDateTime) :
                new ObjectParameter("EventDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_inserteventlog2", uidParameter, cidParameter, aidParameter, midParameter, eventCodeParameter, eventDateTimeParameter, type1, type2, type3, type4, type5);
        }
    
        public virtual int sp_InsertMeterDiagnostic(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<System.DateTime> statusDateTime, Nullable<int> diagnostictype, string diagnosticValue, Nullable<long> eventUid, Nullable<int> timeType1, Nullable<int> timeType2, Nullable<int> timeType3, Nullable<int> timeType4)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var statusDateTimeParameter = statusDateTime.HasValue ?
                new ObjectParameter("StatusDateTime", statusDateTime) :
                new ObjectParameter("StatusDateTime", typeof(System.DateTime));
    
            var diagnostictypeParameter = diagnostictype.HasValue ?
                new ObjectParameter("diagnostictype", diagnostictype) :
                new ObjectParameter("diagnostictype", typeof(int));
    
            var diagnosticValueParameter = diagnosticValue != null ?
                new ObjectParameter("DiagnosticValue", diagnosticValue) :
                new ObjectParameter("DiagnosticValue", typeof(string));
    
            var eventUidParameter = eventUid.HasValue ?
                new ObjectParameter("EventUid", eventUid) :
                new ObjectParameter("EventUid", typeof(long));
    
            var timeType1Parameter = timeType1.HasValue ?
                new ObjectParameter("TimeType1", timeType1) :
                new ObjectParameter("TimeType1", typeof(int));
    
            var timeType2Parameter = timeType2.HasValue ?
                new ObjectParameter("TimeType2", timeType2) :
                new ObjectParameter("TimeType2", typeof(int));
    
            var timeType3Parameter = timeType3.HasValue ?
                new ObjectParameter("TimeType3", timeType3) :
                new ObjectParameter("TimeType3", typeof(int));
    
            var timeType4Parameter = timeType4.HasValue ?
                new ObjectParameter("TimeType4", timeType4) :
                new ObjectParameter("TimeType4", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMeterDiagnostic", customerIdParameter, areaIdParameter, meterIdParameter, statusDateTimeParameter, diagnostictypeParameter, diagnosticValueParameter, eventUidParameter, timeType1Parameter, timeType2Parameter, timeType3Parameter, timeType4Parameter);
        }
    
        public virtual int sp_MSdel_dboACTIVITYLOG(Nullable<int> pkc1)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboACTIVITYLOG", pkc1Parameter);
        }
    
        public virtual int sp_MSdel_dboEXPORTHISTORY(Nullable<int> pkc1)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboEXPORTHISTORY", pkc1Parameter);
        }
    
        public virtual int sp_MSdel_dboPARKING(Nullable<int> pkc1)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboPARKING", pkc1Parameter);
        }
    
        public virtual int sp_MSdel_dboPARKING_TRANSLINK(Nullable<int> pkc1, Nullable<int> pkc2)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboPARKING_TRANSLINK", pkc1Parameter, pkc2Parameter);
        }
    
        public virtual int sp_MSdel_dboPARKING_VIOS(Nullable<int> pkc1, Nullable<int> pkc2)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboPARKING_VIOS", pkc1Parameter, pkc2Parameter);
        }
    
        public virtual int sp_MSdel_dboPARKNOTE(Nullable<int> pkc1, Nullable<int> pkc2)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboPARKNOTE", pkc1Parameter, pkc2Parameter);
        }
    
        public virtual int sp_MSdel_dboSECURITY_RIGHT(Nullable<int> pkc1)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboSECURITY_RIGHT", pkc1Parameter);
        }
    
        public virtual int sp_MSdel_dboSECURITY_ROLE(Nullable<int> pkc1)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboSECURITY_ROLE", pkc1Parameter);
        }
    
        public virtual int sp_MSdel_dboSECURITY_ROLERIGHT(Nullable<int> pkc1, Nullable<int> pkc2)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboSECURITY_ROLERIGHT", pkc1Parameter, pkc2Parameter);
        }
    
        public virtual int sp_MSdel_dboSECURITY_USER(Nullable<int> pkc1)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboSECURITY_USER", pkc1Parameter);
        }
    
        public virtual int sp_MSdel_dboSECURITY_USERRIGHT(Nullable<int> pkc1, Nullable<int> pkc2)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboSECURITY_USERRIGHT", pkc1Parameter, pkc2Parameter);
        }
    
        public virtual int sp_MSdel_dboSECURITY_USERROLE(Nullable<int> pkc1, Nullable<int> pkc2)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboSECURITY_USERROLE", pkc1Parameter, pkc2Parameter);
        }
    
        public virtual int sp_MSdel_dboTASK(Nullable<int> pkc1)
        {
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSdel_dboTASK", pkc1Parameter);
        }
    
        public virtual int sp_MSins_dboACTIVITYLOG(Nullable<System.DateTime> c1, Nullable<System.DateTime> c2, Nullable<System.DateTime> c3, Nullable<System.DateTime> c4, string c5, string c6, string c7, Nullable<int> c8, string c9, Nullable<int> c10, string c11, string c12, string c13, string c14, string c15, string c16, string c17, string c18, string c19, string c20, Nullable<int> c21, Nullable<System.DateTime> c22, string c23, Nullable<int> c24, string c25, Nullable<int> c26, Nullable<System.DateTime> c27, Nullable<int> c28, Nullable<int> c29, Nullable<int> c30, Nullable<int> c31, string c32, Nullable<System.DateTime> c33, Nullable<System.DateTime> c34, Nullable<System.DateTime> c35, Nullable<System.DateTime> c36, Nullable<System.DateTime> c37, Nullable<System.DateTime> c38, Nullable<System.DateTime> c39, Nullable<System.DateTime> c40, Nullable<System.DateTime> c41, Nullable<int> c42, string c43)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(System.DateTime));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(System.DateTime));
    
            var c3Parameter = c3.HasValue ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(System.DateTime));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(System.DateTime));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6 != null ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(string));
    
            var c7Parameter = c7 != null ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(string));
    
            var c8Parameter = c8.HasValue ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(int));
    
            var c9Parameter = c9 != null ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(string));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(int));
    
            var c11Parameter = c11 != null ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(string));
    
            var c12Parameter = c12 != null ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(string));
    
            var c13Parameter = c13 != null ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(string));
    
            var c14Parameter = c14 != null ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(string));
    
            var c15Parameter = c15 != null ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(string));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20 != null ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(string));
    
            var c21Parameter = c21.HasValue ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(int));
    
            var c22Parameter = c22.HasValue ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(System.DateTime));
    
            var c23Parameter = c23 != null ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(string));
    
            var c24Parameter = c24.HasValue ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(int));
    
            var c25Parameter = c25 != null ?
                new ObjectParameter("c25", c25) :
                new ObjectParameter("c25", typeof(string));
    
            var c26Parameter = c26.HasValue ?
                new ObjectParameter("c26", c26) :
                new ObjectParameter("c26", typeof(int));
    
            var c27Parameter = c27.HasValue ?
                new ObjectParameter("c27", c27) :
                new ObjectParameter("c27", typeof(System.DateTime));
    
            var c28Parameter = c28.HasValue ?
                new ObjectParameter("c28", c28) :
                new ObjectParameter("c28", typeof(int));
    
            var c29Parameter = c29.HasValue ?
                new ObjectParameter("c29", c29) :
                new ObjectParameter("c29", typeof(int));
    
            var c30Parameter = c30.HasValue ?
                new ObjectParameter("c30", c30) :
                new ObjectParameter("c30", typeof(int));
    
            var c31Parameter = c31.HasValue ?
                new ObjectParameter("c31", c31) :
                new ObjectParameter("c31", typeof(int));
    
            var c32Parameter = c32 != null ?
                new ObjectParameter("c32", c32) :
                new ObjectParameter("c32", typeof(string));
    
            var c33Parameter = c33.HasValue ?
                new ObjectParameter("c33", c33) :
                new ObjectParameter("c33", typeof(System.DateTime));
    
            var c34Parameter = c34.HasValue ?
                new ObjectParameter("c34", c34) :
                new ObjectParameter("c34", typeof(System.DateTime));
    
            var c35Parameter = c35.HasValue ?
                new ObjectParameter("c35", c35) :
                new ObjectParameter("c35", typeof(System.DateTime));
    
            var c36Parameter = c36.HasValue ?
                new ObjectParameter("c36", c36) :
                new ObjectParameter("c36", typeof(System.DateTime));
    
            var c37Parameter = c37.HasValue ?
                new ObjectParameter("c37", c37) :
                new ObjectParameter("c37", typeof(System.DateTime));
    
            var c38Parameter = c38.HasValue ?
                new ObjectParameter("c38", c38) :
                new ObjectParameter("c38", typeof(System.DateTime));
    
            var c39Parameter = c39.HasValue ?
                new ObjectParameter("c39", c39) :
                new ObjectParameter("c39", typeof(System.DateTime));
    
            var c40Parameter = c40.HasValue ?
                new ObjectParameter("c40", c40) :
                new ObjectParameter("c40", typeof(System.DateTime));
    
            var c41Parameter = c41.HasValue ?
                new ObjectParameter("c41", c41) :
                new ObjectParameter("c41", typeof(System.DateTime));
    
            var c42Parameter = c42.HasValue ?
                new ObjectParameter("c42", c42) :
                new ObjectParameter("c42", typeof(int));
    
            var c43Parameter = c43 != null ?
                new ObjectParameter("c43", c43) :
                new ObjectParameter("c43", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboACTIVITYLOG", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, c25Parameter, c26Parameter, c27Parameter, c28Parameter, c29Parameter, c30Parameter, c31Parameter, c32Parameter, c33Parameter, c34Parameter, c35Parameter, c36Parameter, c37Parameter, c38Parameter, c39Parameter, c40Parameter, c41Parameter, c42Parameter, c43Parameter);
        }
    
        public virtual int sp_MSins_dboEXPORTHISTORY(Nullable<int> c1, Nullable<long> c2, string c3, Nullable<System.DateTime> c4, string c5, Nullable<int> c6)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(long));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(System.DateTime));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6.HasValue ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboEXPORTHISTORY", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter);
        }
    
        public virtual int sp_MSins_dboPARKING(Nullable<System.DateTime> c1, Nullable<System.DateTime> c2, string c3, Nullable<int> c4, string c5, Nullable<System.DateTime> c6, string c7, string c8, string c9, string c10, string c11, string c12, string c13, string c14, string c15, string c16, string c17, string c18, string c19, string c20, string c21, string c22, string c23, string c24, Nullable<System.DateTime> c25, string c26, Nullable<System.DateTime> c27, string c28, string c29, string c30, string c31, string c32, string c33, string c34, string c35, string c36, string c37, string c38, string c39, string c40, string c41, Nullable<int> c42, string c43, string c44, string c45, string c46, string c47, string c48, string c49, string c50, string c51, string c52, string c53, string c54, string c55, string c56, string c57, string c58, Nullable<int> c59, Nullable<System.DateTime> c60, string c61, string c62, Nullable<int> c63, Nullable<System.DateTime> c64, Nullable<int> c65, Nullable<int> c66, Nullable<int> c67, Nullable<int> c68, string c69, Nullable<float> c70, string c71, string c72, string c73, Nullable<System.DateTime> c74, string c75, string c76, string c77, Nullable<System.DateTime> c78, Nullable<System.DateTime> c79, Nullable<System.DateTime> c80, Nullable<System.DateTime> c81, Nullable<System.DateTime> c82, Nullable<System.DateTime> c83, Nullable<System.DateTime> c84, Nullable<System.DateTime> c85, Nullable<System.DateTime> c86, Nullable<int> c87, string c88)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(System.DateTime));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(System.DateTime));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(int));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6.HasValue ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(System.DateTime));
    
            var c7Parameter = c7 != null ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(string));
    
            var c8Parameter = c8 != null ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(string));
    
            var c9Parameter = c9 != null ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(string));
    
            var c10Parameter = c10 != null ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(string));
    
            var c11Parameter = c11 != null ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(string));
    
            var c12Parameter = c12 != null ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(string));
    
            var c13Parameter = c13 != null ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(string));
    
            var c14Parameter = c14 != null ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(string));
    
            var c15Parameter = c15 != null ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(string));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20 != null ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(string));
    
            var c21Parameter = c21 != null ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(string));
    
            var c22Parameter = c22 != null ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(string));
    
            var c23Parameter = c23 != null ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(string));
    
            var c24Parameter = c24 != null ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(string));
    
            var c25Parameter = c25.HasValue ?
                new ObjectParameter("c25", c25) :
                new ObjectParameter("c25", typeof(System.DateTime));
    
            var c26Parameter = c26 != null ?
                new ObjectParameter("c26", c26) :
                new ObjectParameter("c26", typeof(string));
    
            var c27Parameter = c27.HasValue ?
                new ObjectParameter("c27", c27) :
                new ObjectParameter("c27", typeof(System.DateTime));
    
            var c28Parameter = c28 != null ?
                new ObjectParameter("c28", c28) :
                new ObjectParameter("c28", typeof(string));
    
            var c29Parameter = c29 != null ?
                new ObjectParameter("c29", c29) :
                new ObjectParameter("c29", typeof(string));
    
            var c30Parameter = c30 != null ?
                new ObjectParameter("c30", c30) :
                new ObjectParameter("c30", typeof(string));
    
            var c31Parameter = c31 != null ?
                new ObjectParameter("c31", c31) :
                new ObjectParameter("c31", typeof(string));
    
            var c32Parameter = c32 != null ?
                new ObjectParameter("c32", c32) :
                new ObjectParameter("c32", typeof(string));
    
            var c33Parameter = c33 != null ?
                new ObjectParameter("c33", c33) :
                new ObjectParameter("c33", typeof(string));
    
            var c34Parameter = c34 != null ?
                new ObjectParameter("c34", c34) :
                new ObjectParameter("c34", typeof(string));
    
            var c35Parameter = c35 != null ?
                new ObjectParameter("c35", c35) :
                new ObjectParameter("c35", typeof(string));
    
            var c36Parameter = c36 != null ?
                new ObjectParameter("c36", c36) :
                new ObjectParameter("c36", typeof(string));
    
            var c37Parameter = c37 != null ?
                new ObjectParameter("c37", c37) :
                new ObjectParameter("c37", typeof(string));
    
            var c38Parameter = c38 != null ?
                new ObjectParameter("c38", c38) :
                new ObjectParameter("c38", typeof(string));
    
            var c39Parameter = c39 != null ?
                new ObjectParameter("c39", c39) :
                new ObjectParameter("c39", typeof(string));
    
            var c40Parameter = c40 != null ?
                new ObjectParameter("c40", c40) :
                new ObjectParameter("c40", typeof(string));
    
            var c41Parameter = c41 != null ?
                new ObjectParameter("c41", c41) :
                new ObjectParameter("c41", typeof(string));
    
            var c42Parameter = c42.HasValue ?
                new ObjectParameter("c42", c42) :
                new ObjectParameter("c42", typeof(int));
    
            var c43Parameter = c43 != null ?
                new ObjectParameter("c43", c43) :
                new ObjectParameter("c43", typeof(string));
    
            var c44Parameter = c44 != null ?
                new ObjectParameter("c44", c44) :
                new ObjectParameter("c44", typeof(string));
    
            var c45Parameter = c45 != null ?
                new ObjectParameter("c45", c45) :
                new ObjectParameter("c45", typeof(string));
    
            var c46Parameter = c46 != null ?
                new ObjectParameter("c46", c46) :
                new ObjectParameter("c46", typeof(string));
    
            var c47Parameter = c47 != null ?
                new ObjectParameter("c47", c47) :
                new ObjectParameter("c47", typeof(string));
    
            var c48Parameter = c48 != null ?
                new ObjectParameter("c48", c48) :
                new ObjectParameter("c48", typeof(string));
    
            var c49Parameter = c49 != null ?
                new ObjectParameter("c49", c49) :
                new ObjectParameter("c49", typeof(string));
    
            var c50Parameter = c50 != null ?
                new ObjectParameter("c50", c50) :
                new ObjectParameter("c50", typeof(string));
    
            var c51Parameter = c51 != null ?
                new ObjectParameter("c51", c51) :
                new ObjectParameter("c51", typeof(string));
    
            var c52Parameter = c52 != null ?
                new ObjectParameter("c52", c52) :
                new ObjectParameter("c52", typeof(string));
    
            var c53Parameter = c53 != null ?
                new ObjectParameter("c53", c53) :
                new ObjectParameter("c53", typeof(string));
    
            var c54Parameter = c54 != null ?
                new ObjectParameter("c54", c54) :
                new ObjectParameter("c54", typeof(string));
    
            var c55Parameter = c55 != null ?
                new ObjectParameter("c55", c55) :
                new ObjectParameter("c55", typeof(string));
    
            var c56Parameter = c56 != null ?
                new ObjectParameter("c56", c56) :
                new ObjectParameter("c56", typeof(string));
    
            var c57Parameter = c57 != null ?
                new ObjectParameter("c57", c57) :
                new ObjectParameter("c57", typeof(string));
    
            var c58Parameter = c58 != null ?
                new ObjectParameter("c58", c58) :
                new ObjectParameter("c58", typeof(string));
    
            var c59Parameter = c59.HasValue ?
                new ObjectParameter("c59", c59) :
                new ObjectParameter("c59", typeof(int));
    
            var c60Parameter = c60.HasValue ?
                new ObjectParameter("c60", c60) :
                new ObjectParameter("c60", typeof(System.DateTime));
    
            var c61Parameter = c61 != null ?
                new ObjectParameter("c61", c61) :
                new ObjectParameter("c61", typeof(string));
    
            var c62Parameter = c62 != null ?
                new ObjectParameter("c62", c62) :
                new ObjectParameter("c62", typeof(string));
    
            var c63Parameter = c63.HasValue ?
                new ObjectParameter("c63", c63) :
                new ObjectParameter("c63", typeof(int));
    
            var c64Parameter = c64.HasValue ?
                new ObjectParameter("c64", c64) :
                new ObjectParameter("c64", typeof(System.DateTime));
    
            var c65Parameter = c65.HasValue ?
                new ObjectParameter("c65", c65) :
                new ObjectParameter("c65", typeof(int));
    
            var c66Parameter = c66.HasValue ?
                new ObjectParameter("c66", c66) :
                new ObjectParameter("c66", typeof(int));
    
            var c67Parameter = c67.HasValue ?
                new ObjectParameter("c67", c67) :
                new ObjectParameter("c67", typeof(int));
    
            var c68Parameter = c68.HasValue ?
                new ObjectParameter("c68", c68) :
                new ObjectParameter("c68", typeof(int));
    
            var c69Parameter = c69 != null ?
                new ObjectParameter("c69", c69) :
                new ObjectParameter("c69", typeof(string));
    
            var c70Parameter = c70.HasValue ?
                new ObjectParameter("c70", c70) :
                new ObjectParameter("c70", typeof(float));
    
            var c71Parameter = c71 != null ?
                new ObjectParameter("c71", c71) :
                new ObjectParameter("c71", typeof(string));
    
            var c72Parameter = c72 != null ?
                new ObjectParameter("c72", c72) :
                new ObjectParameter("c72", typeof(string));
    
            var c73Parameter = c73 != null ?
                new ObjectParameter("c73", c73) :
                new ObjectParameter("c73", typeof(string));
    
            var c74Parameter = c74.HasValue ?
                new ObjectParameter("c74", c74) :
                new ObjectParameter("c74", typeof(System.DateTime));
    
            var c75Parameter = c75 != null ?
                new ObjectParameter("c75", c75) :
                new ObjectParameter("c75", typeof(string));
    
            var c76Parameter = c76 != null ?
                new ObjectParameter("c76", c76) :
                new ObjectParameter("c76", typeof(string));
    
            var c77Parameter = c77 != null ?
                new ObjectParameter("c77", c77) :
                new ObjectParameter("c77", typeof(string));
    
            var c78Parameter = c78.HasValue ?
                new ObjectParameter("c78", c78) :
                new ObjectParameter("c78", typeof(System.DateTime));
    
            var c79Parameter = c79.HasValue ?
                new ObjectParameter("c79", c79) :
                new ObjectParameter("c79", typeof(System.DateTime));
    
            var c80Parameter = c80.HasValue ?
                new ObjectParameter("c80", c80) :
                new ObjectParameter("c80", typeof(System.DateTime));
    
            var c81Parameter = c81.HasValue ?
                new ObjectParameter("c81", c81) :
                new ObjectParameter("c81", typeof(System.DateTime));
    
            var c82Parameter = c82.HasValue ?
                new ObjectParameter("c82", c82) :
                new ObjectParameter("c82", typeof(System.DateTime));
    
            var c83Parameter = c83.HasValue ?
                new ObjectParameter("c83", c83) :
                new ObjectParameter("c83", typeof(System.DateTime));
    
            var c84Parameter = c84.HasValue ?
                new ObjectParameter("c84", c84) :
                new ObjectParameter("c84", typeof(System.DateTime));
    
            var c85Parameter = c85.HasValue ?
                new ObjectParameter("c85", c85) :
                new ObjectParameter("c85", typeof(System.DateTime));
    
            var c86Parameter = c86.HasValue ?
                new ObjectParameter("c86", c86) :
                new ObjectParameter("c86", typeof(System.DateTime));
    
            var c87Parameter = c87.HasValue ?
                new ObjectParameter("c87", c87) :
                new ObjectParameter("c87", typeof(int));
    
            var c88Parameter = c88 != null ?
                new ObjectParameter("c88", c88) :
                new ObjectParameter("c88", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboPARKING", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, c25Parameter, c26Parameter, c27Parameter, c28Parameter, c29Parameter, c30Parameter, c31Parameter, c32Parameter, c33Parameter, c34Parameter, c35Parameter, c36Parameter, c37Parameter, c38Parameter, c39Parameter, c40Parameter, c41Parameter, c42Parameter, c43Parameter, c44Parameter, c45Parameter, c46Parameter, c47Parameter, c48Parameter, c49Parameter, c50Parameter, c51Parameter, c52Parameter, c53Parameter, c54Parameter, c55Parameter, c56Parameter, c57Parameter, c58Parameter, c59Parameter, c60Parameter, c61Parameter, c62Parameter, c63Parameter, c64Parameter, c65Parameter, c66Parameter, c67Parameter, c68Parameter, c69Parameter, c70Parameter, c71Parameter, c72Parameter, c73Parameter, c74Parameter, c75Parameter, c76Parameter, c77Parameter, c78Parameter, c79Parameter, c80Parameter, c81Parameter, c82Parameter, c83Parameter, c84Parameter, c85Parameter, c86Parameter, c87Parameter, c88Parameter);
        }
    
        public virtual int sp_MSins_dboPARKING_TRANSLINK(Nullable<int> c1, Nullable<int> c2, Nullable<int> c3, string c4, Nullable<long> c5, Nullable<System.DateTime> c6, Nullable<System.DateTime> c7, Nullable<System.DateTime> c8, Nullable<System.DateTime> c9, Nullable<System.DateTime> c10, Nullable<System.DateTime> c11, Nullable<System.DateTime> c12, Nullable<System.DateTime> c13, string c14, Nullable<System.DateTime> c15, Nullable<System.DateTime> c16, string c17, string c18, string c19, Nullable<System.DateTime> c20)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            var c3Parameter = c3.HasValue ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(int));
    
            var c4Parameter = c4 != null ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(string));
    
            var c5Parameter = c5.HasValue ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(long));
    
            var c6Parameter = c6.HasValue ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(System.DateTime));
    
            var c7Parameter = c7.HasValue ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(System.DateTime));
    
            var c8Parameter = c8.HasValue ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(System.DateTime));
    
            var c9Parameter = c9.HasValue ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(System.DateTime));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(System.DateTime));
    
            var c11Parameter = c11.HasValue ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(System.DateTime));
    
            var c12Parameter = c12.HasValue ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(System.DateTime));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(System.DateTime));
    
            var c14Parameter = c14 != null ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(string));
    
            var c15Parameter = c15.HasValue ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(System.DateTime));
    
            var c16Parameter = c16.HasValue ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(System.DateTime));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20.HasValue ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboPARKING_TRANSLINK", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter);
        }
    
        public virtual int sp_MSins_dboPARKING_VIOS(string c1, string c2, string c3, string c4, Nullable<float> c5, Nullable<float> c6, Nullable<float> c7, string c8, Nullable<int> c9, Nullable<int> c10, Nullable<int> c11, string c12, Nullable<float> c13, Nullable<float> c14)
        {
            var c1Parameter = c1 != null ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(string));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4 != null ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(string));
    
            var c5Parameter = c5.HasValue ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(float));
    
            var c6Parameter = c6.HasValue ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(float));
    
            var c7Parameter = c7.HasValue ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(float));
    
            var c8Parameter = c8 != null ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(string));
    
            var c9Parameter = c9.HasValue ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(int));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(int));
    
            var c11Parameter = c11.HasValue ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(int));
    
            var c12Parameter = c12 != null ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(string));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(float));
    
            var c14Parameter = c14.HasValue ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboPARKING_VIOS", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter);
        }
    
        public virtual int sp_MSins_dboPARKNOTE(Nullable<int> c1, Nullable<int> c2, Nullable<System.DateTime> c3, Nullable<System.DateTime> c4, string c5, string c6, Nullable<System.DateTime> c7, Nullable<System.DateTime> c8, string c9, string c10, string c11, string c12, Nullable<System.DateTime> c13, Nullable<System.DateTime> c14, Nullable<int> c15, string c16, Nullable<int> c17, string c18, Nullable<int> c19, Nullable<System.DateTime> c20, Nullable<int> c21, Nullable<int> c22, Nullable<int> c23, byte[] c24, string c25, Nullable<int> c26, string c27, Nullable<System.DateTime> c28, Nullable<System.DateTime> c29, Nullable<System.DateTime> c30, Nullable<System.DateTime> c31, Nullable<System.DateTime> c32, Nullable<System.DateTime> c33, Nullable<System.DateTime> c34, Nullable<System.DateTime> c35, Nullable<System.DateTime> c36, Nullable<int> c37)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            var c3Parameter = c3.HasValue ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(System.DateTime));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(System.DateTime));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6 != null ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(string));
    
            var c7Parameter = c7.HasValue ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(System.DateTime));
    
            var c8Parameter = c8.HasValue ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(System.DateTime));
    
            var c9Parameter = c9 != null ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(string));
    
            var c10Parameter = c10 != null ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(string));
    
            var c11Parameter = c11 != null ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(string));
    
            var c12Parameter = c12 != null ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(string));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(System.DateTime));
    
            var c14Parameter = c14.HasValue ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(System.DateTime));
    
            var c15Parameter = c15.HasValue ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(int));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17.HasValue ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(int));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19.HasValue ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(int));
    
            var c20Parameter = c20.HasValue ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(System.DateTime));
    
            var c21Parameter = c21.HasValue ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(int));
    
            var c22Parameter = c22.HasValue ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(int));
    
            var c23Parameter = c23.HasValue ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(int));
    
            var c24Parameter = c24 != null ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(byte[]));
    
            var c25Parameter = c25 != null ?
                new ObjectParameter("c25", c25) :
                new ObjectParameter("c25", typeof(string));
    
            var c26Parameter = c26.HasValue ?
                new ObjectParameter("c26", c26) :
                new ObjectParameter("c26", typeof(int));
    
            var c27Parameter = c27 != null ?
                new ObjectParameter("c27", c27) :
                new ObjectParameter("c27", typeof(string));
    
            var c28Parameter = c28.HasValue ?
                new ObjectParameter("c28", c28) :
                new ObjectParameter("c28", typeof(System.DateTime));
    
            var c29Parameter = c29.HasValue ?
                new ObjectParameter("c29", c29) :
                new ObjectParameter("c29", typeof(System.DateTime));
    
            var c30Parameter = c30.HasValue ?
                new ObjectParameter("c30", c30) :
                new ObjectParameter("c30", typeof(System.DateTime));
    
            var c31Parameter = c31.HasValue ?
                new ObjectParameter("c31", c31) :
                new ObjectParameter("c31", typeof(System.DateTime));
    
            var c32Parameter = c32.HasValue ?
                new ObjectParameter("c32", c32) :
                new ObjectParameter("c32", typeof(System.DateTime));
    
            var c33Parameter = c33.HasValue ?
                new ObjectParameter("c33", c33) :
                new ObjectParameter("c33", typeof(System.DateTime));
    
            var c34Parameter = c34.HasValue ?
                new ObjectParameter("c34", c34) :
                new ObjectParameter("c34", typeof(System.DateTime));
    
            var c35Parameter = c35.HasValue ?
                new ObjectParameter("c35", c35) :
                new ObjectParameter("c35", typeof(System.DateTime));
    
            var c36Parameter = c36.HasValue ?
                new ObjectParameter("c36", c36) :
                new ObjectParameter("c36", typeof(System.DateTime));
    
            var c37Parameter = c37.HasValue ?
                new ObjectParameter("c37", c37) :
                new ObjectParameter("c37", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboPARKNOTE", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, c25Parameter, c26Parameter, c27Parameter, c28Parameter, c29Parameter, c30Parameter, c31Parameter, c32Parameter, c33Parameter, c34Parameter, c35Parameter, c36Parameter, c37Parameter);
        }
    
        public virtual int sp_MSins_dboSECURITY_RIGHT(Nullable<int> c1, string c2, string c3, string c4)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4 != null ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboSECURITY_RIGHT", c1Parameter, c2Parameter, c3Parameter, c4Parameter);
        }
    
        public virtual int sp_MSins_dboSECURITY_ROLE(Nullable<int> c1, string c2, string c3)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboSECURITY_ROLE", c1Parameter, c2Parameter, c3Parameter);
        }
    
        public virtual int sp_MSins_dboSECURITY_ROLERIGHT(Nullable<int> c1, Nullable<int> c2)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboSECURITY_ROLERIGHT", c1Parameter, c2Parameter);
        }
    
        public virtual int sp_MSins_dboSECURITY_USER(Nullable<int> c1, string c2, string c3, string c4, string c5, string c6, string c7, string c8, Nullable<System.DateTime> c9, Nullable<System.DateTime> c10, Nullable<System.DateTime> c11, Nullable<System.DateTime> c12, Nullable<System.DateTime> c13, Nullable<System.DateTime> c14, Nullable<int> c15, string c16, string c17, string c18, string c19, string c20, string c21, string c22, string c23, string c24, string c25, string c26, string c27, string c28)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4 != null ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(string));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6 != null ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(string));
    
            var c7Parameter = c7 != null ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(string));
    
            var c8Parameter = c8 != null ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(string));
    
            var c9Parameter = c9.HasValue ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(System.DateTime));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(System.DateTime));
    
            var c11Parameter = c11.HasValue ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(System.DateTime));
    
            var c12Parameter = c12.HasValue ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(System.DateTime));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(System.DateTime));
    
            var c14Parameter = c14.HasValue ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(System.DateTime));
    
            var c15Parameter = c15.HasValue ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(int));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20 != null ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(string));
    
            var c21Parameter = c21 != null ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(string));
    
            var c22Parameter = c22 != null ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(string));
    
            var c23Parameter = c23 != null ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(string));
    
            var c24Parameter = c24 != null ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(string));
    
            var c25Parameter = c25 != null ?
                new ObjectParameter("c25", c25) :
                new ObjectParameter("c25", typeof(string));
    
            var c26Parameter = c26 != null ?
                new ObjectParameter("c26", c26) :
                new ObjectParameter("c26", typeof(string));
    
            var c27Parameter = c27 != null ?
                new ObjectParameter("c27", c27) :
                new ObjectParameter("c27", typeof(string));
    
            var c28Parameter = c28 != null ?
                new ObjectParameter("c28", c28) :
                new ObjectParameter("c28", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboSECURITY_USER", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, c25Parameter, c26Parameter, c27Parameter, c28Parameter);
        }
    
        public virtual int sp_MSins_dboSECURITY_USERRIGHT(Nullable<int> c1, Nullable<int> c2, Nullable<int> c3)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            var c3Parameter = c3.HasValue ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboSECURITY_USERRIGHT", c1Parameter, c2Parameter, c3Parameter);
        }
    
        public virtual int sp_MSins_dboSECURITY_USERROLE(Nullable<int> c1, Nullable<int> c2)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboSECURITY_USERROLE", c1Parameter, c2Parameter);
        }
    
        public virtual int sp_MSins_dboTASK(Nullable<int> c1, string c2, string c3, Nullable<int> c4, Nullable<int> c5, string c6, string c7, string c8, string c9, Nullable<int> c10, string c11, Nullable<System.DateTime> c12, Nullable<System.DateTime> c13, string c14, string c15, string c16, string c17, string c18, string c19, string c20, string c21, Nullable<int> c22, Nullable<int> c23, byte[] c24)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(int));
    
            var c5Parameter = c5.HasValue ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(int));
    
            var c6Parameter = c6 != null ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(string));
    
            var c7Parameter = c7 != null ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(string));
    
            var c8Parameter = c8 != null ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(string));
    
            var c9Parameter = c9 != null ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(string));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(int));
    
            var c11Parameter = c11 != null ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(string));
    
            var c12Parameter = c12.HasValue ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(System.DateTime));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(System.DateTime));
    
            var c14Parameter = c14 != null ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(string));
    
            var c15Parameter = c15 != null ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(string));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20 != null ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(string));
    
            var c21Parameter = c21 != null ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(string));
    
            var c22Parameter = c22.HasValue ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(int));
    
            var c23Parameter = c23.HasValue ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(int));
    
            var c24Parameter = c24 != null ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSins_dboTASK", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter);
        }
    
        public virtual int sp_MSupd_dboACTIVITYLOG(Nullable<System.DateTime> c1, Nullable<System.DateTime> c2, Nullable<System.DateTime> c3, Nullable<System.DateTime> c4, string c5, string c6, string c7, Nullable<int> c8, string c9, Nullable<int> c10, string c11, string c12, string c13, string c14, string c15, string c16, string c17, string c18, string c19, string c20, Nullable<int> c21, Nullable<System.DateTime> c22, string c23, Nullable<int> c24, string c25, Nullable<int> c26, Nullable<System.DateTime> c27, Nullable<int> c28, Nullable<int> c29, Nullable<int> c30, Nullable<int> c31, string c32, Nullable<System.DateTime> c33, Nullable<System.DateTime> c34, Nullable<System.DateTime> c35, Nullable<System.DateTime> c36, Nullable<System.DateTime> c37, Nullable<System.DateTime> c38, Nullable<System.DateTime> c39, Nullable<System.DateTime> c40, Nullable<System.DateTime> c41, Nullable<int> c42, string c43, Nullable<int> pkc1, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(System.DateTime));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(System.DateTime));
    
            var c3Parameter = c3.HasValue ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(System.DateTime));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(System.DateTime));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6 != null ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(string));
    
            var c7Parameter = c7 != null ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(string));
    
            var c8Parameter = c8.HasValue ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(int));
    
            var c9Parameter = c9 != null ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(string));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(int));
    
            var c11Parameter = c11 != null ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(string));
    
            var c12Parameter = c12 != null ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(string));
    
            var c13Parameter = c13 != null ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(string));
    
            var c14Parameter = c14 != null ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(string));
    
            var c15Parameter = c15 != null ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(string));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20 != null ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(string));
    
            var c21Parameter = c21.HasValue ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(int));
    
            var c22Parameter = c22.HasValue ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(System.DateTime));
    
            var c23Parameter = c23 != null ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(string));
    
            var c24Parameter = c24.HasValue ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(int));
    
            var c25Parameter = c25 != null ?
                new ObjectParameter("c25", c25) :
                new ObjectParameter("c25", typeof(string));
    
            var c26Parameter = c26.HasValue ?
                new ObjectParameter("c26", c26) :
                new ObjectParameter("c26", typeof(int));
    
            var c27Parameter = c27.HasValue ?
                new ObjectParameter("c27", c27) :
                new ObjectParameter("c27", typeof(System.DateTime));
    
            var c28Parameter = c28.HasValue ?
                new ObjectParameter("c28", c28) :
                new ObjectParameter("c28", typeof(int));
    
            var c29Parameter = c29.HasValue ?
                new ObjectParameter("c29", c29) :
                new ObjectParameter("c29", typeof(int));
    
            var c30Parameter = c30.HasValue ?
                new ObjectParameter("c30", c30) :
                new ObjectParameter("c30", typeof(int));
    
            var c31Parameter = c31.HasValue ?
                new ObjectParameter("c31", c31) :
                new ObjectParameter("c31", typeof(int));
    
            var c32Parameter = c32 != null ?
                new ObjectParameter("c32", c32) :
                new ObjectParameter("c32", typeof(string));
    
            var c33Parameter = c33.HasValue ?
                new ObjectParameter("c33", c33) :
                new ObjectParameter("c33", typeof(System.DateTime));
    
            var c34Parameter = c34.HasValue ?
                new ObjectParameter("c34", c34) :
                new ObjectParameter("c34", typeof(System.DateTime));
    
            var c35Parameter = c35.HasValue ?
                new ObjectParameter("c35", c35) :
                new ObjectParameter("c35", typeof(System.DateTime));
    
            var c36Parameter = c36.HasValue ?
                new ObjectParameter("c36", c36) :
                new ObjectParameter("c36", typeof(System.DateTime));
    
            var c37Parameter = c37.HasValue ?
                new ObjectParameter("c37", c37) :
                new ObjectParameter("c37", typeof(System.DateTime));
    
            var c38Parameter = c38.HasValue ?
                new ObjectParameter("c38", c38) :
                new ObjectParameter("c38", typeof(System.DateTime));
    
            var c39Parameter = c39.HasValue ?
                new ObjectParameter("c39", c39) :
                new ObjectParameter("c39", typeof(System.DateTime));
    
            var c40Parameter = c40.HasValue ?
                new ObjectParameter("c40", c40) :
                new ObjectParameter("c40", typeof(System.DateTime));
    
            var c41Parameter = c41.HasValue ?
                new ObjectParameter("c41", c41) :
                new ObjectParameter("c41", typeof(System.DateTime));
    
            var c42Parameter = c42.HasValue ?
                new ObjectParameter("c42", c42) :
                new ObjectParameter("c42", typeof(int));
    
            var c43Parameter = c43 != null ?
                new ObjectParameter("c43", c43) :
                new ObjectParameter("c43", typeof(string));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboACTIVITYLOG", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, c25Parameter, c26Parameter, c27Parameter, c28Parameter, c29Parameter, c30Parameter, c31Parameter, c32Parameter, c33Parameter, c34Parameter, c35Parameter, c36Parameter, c37Parameter, c38Parameter, c39Parameter, c40Parameter, c41Parameter, c42Parameter, c43Parameter, pkc1Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboEXPORTHISTORY(Nullable<int> c1, Nullable<long> c2, string c3, Nullable<System.DateTime> c4, string c5, Nullable<int> c6, Nullable<int> pkc1, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(long));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(System.DateTime));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6.HasValue ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(int));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboEXPORTHISTORY", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, pkc1Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboPARKING(Nullable<System.DateTime> c1, Nullable<System.DateTime> c2, string c3, Nullable<int> c4, string c5, Nullable<System.DateTime> c6, string c7, string c8, string c9, string c10, string c11, string c12, string c13, string c14, string c15, string c16, string c17, string c18, string c19, string c20, string c21, string c22, string c23, string c24, Nullable<System.DateTime> c25, string c26, Nullable<System.DateTime> c27, string c28, string c29, string c30, string c31, string c32, string c33, string c34, string c35, string c36, string c37, string c38, string c39, string c40, string c41, Nullable<int> c42, string c43, string c44, string c45, string c46, string c47, string c48, string c49, string c50, string c51, string c52, string c53, string c54, string c55, string c56, string c57, string c58, Nullable<int> c59, Nullable<System.DateTime> c60, string c61, string c62, Nullable<int> c63, Nullable<System.DateTime> c64, Nullable<int> c65, Nullable<int> c66, Nullable<int> c67, Nullable<int> c68, string c69, Nullable<float> c70, string c71, string c72, string c73, Nullable<System.DateTime> c74, string c75, string c76, string c77, Nullable<System.DateTime> c78, Nullable<System.DateTime> c79, Nullable<System.DateTime> c80, Nullable<System.DateTime> c81, Nullable<System.DateTime> c82, Nullable<System.DateTime> c83, Nullable<System.DateTime> c84, Nullable<System.DateTime> c85, Nullable<System.DateTime> c86, Nullable<int> c87, string c88, Nullable<int> pkc1, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(System.DateTime));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(System.DateTime));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(int));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6.HasValue ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(System.DateTime));
    
            var c7Parameter = c7 != null ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(string));
    
            var c8Parameter = c8 != null ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(string));
    
            var c9Parameter = c9 != null ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(string));
    
            var c10Parameter = c10 != null ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(string));
    
            var c11Parameter = c11 != null ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(string));
    
            var c12Parameter = c12 != null ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(string));
    
            var c13Parameter = c13 != null ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(string));
    
            var c14Parameter = c14 != null ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(string));
    
            var c15Parameter = c15 != null ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(string));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20 != null ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(string));
    
            var c21Parameter = c21 != null ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(string));
    
            var c22Parameter = c22 != null ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(string));
    
            var c23Parameter = c23 != null ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(string));
    
            var c24Parameter = c24 != null ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(string));
    
            var c25Parameter = c25.HasValue ?
                new ObjectParameter("c25", c25) :
                new ObjectParameter("c25", typeof(System.DateTime));
    
            var c26Parameter = c26 != null ?
                new ObjectParameter("c26", c26) :
                new ObjectParameter("c26", typeof(string));
    
            var c27Parameter = c27.HasValue ?
                new ObjectParameter("c27", c27) :
                new ObjectParameter("c27", typeof(System.DateTime));
    
            var c28Parameter = c28 != null ?
                new ObjectParameter("c28", c28) :
                new ObjectParameter("c28", typeof(string));
    
            var c29Parameter = c29 != null ?
                new ObjectParameter("c29", c29) :
                new ObjectParameter("c29", typeof(string));
    
            var c30Parameter = c30 != null ?
                new ObjectParameter("c30", c30) :
                new ObjectParameter("c30", typeof(string));
    
            var c31Parameter = c31 != null ?
                new ObjectParameter("c31", c31) :
                new ObjectParameter("c31", typeof(string));
    
            var c32Parameter = c32 != null ?
                new ObjectParameter("c32", c32) :
                new ObjectParameter("c32", typeof(string));
    
            var c33Parameter = c33 != null ?
                new ObjectParameter("c33", c33) :
                new ObjectParameter("c33", typeof(string));
    
            var c34Parameter = c34 != null ?
                new ObjectParameter("c34", c34) :
                new ObjectParameter("c34", typeof(string));
    
            var c35Parameter = c35 != null ?
                new ObjectParameter("c35", c35) :
                new ObjectParameter("c35", typeof(string));
    
            var c36Parameter = c36 != null ?
                new ObjectParameter("c36", c36) :
                new ObjectParameter("c36", typeof(string));
    
            var c37Parameter = c37 != null ?
                new ObjectParameter("c37", c37) :
                new ObjectParameter("c37", typeof(string));
    
            var c38Parameter = c38 != null ?
                new ObjectParameter("c38", c38) :
                new ObjectParameter("c38", typeof(string));
    
            var c39Parameter = c39 != null ?
                new ObjectParameter("c39", c39) :
                new ObjectParameter("c39", typeof(string));
    
            var c40Parameter = c40 != null ?
                new ObjectParameter("c40", c40) :
                new ObjectParameter("c40", typeof(string));
    
            var c41Parameter = c41 != null ?
                new ObjectParameter("c41", c41) :
                new ObjectParameter("c41", typeof(string));
    
            var c42Parameter = c42.HasValue ?
                new ObjectParameter("c42", c42) :
                new ObjectParameter("c42", typeof(int));
    
            var c43Parameter = c43 != null ?
                new ObjectParameter("c43", c43) :
                new ObjectParameter("c43", typeof(string));
    
            var c44Parameter = c44 != null ?
                new ObjectParameter("c44", c44) :
                new ObjectParameter("c44", typeof(string));
    
            var c45Parameter = c45 != null ?
                new ObjectParameter("c45", c45) :
                new ObjectParameter("c45", typeof(string));
    
            var c46Parameter = c46 != null ?
                new ObjectParameter("c46", c46) :
                new ObjectParameter("c46", typeof(string));
    
            var c47Parameter = c47 != null ?
                new ObjectParameter("c47", c47) :
                new ObjectParameter("c47", typeof(string));
    
            var c48Parameter = c48 != null ?
                new ObjectParameter("c48", c48) :
                new ObjectParameter("c48", typeof(string));
    
            var c49Parameter = c49 != null ?
                new ObjectParameter("c49", c49) :
                new ObjectParameter("c49", typeof(string));
    
            var c50Parameter = c50 != null ?
                new ObjectParameter("c50", c50) :
                new ObjectParameter("c50", typeof(string));
    
            var c51Parameter = c51 != null ?
                new ObjectParameter("c51", c51) :
                new ObjectParameter("c51", typeof(string));
    
            var c52Parameter = c52 != null ?
                new ObjectParameter("c52", c52) :
                new ObjectParameter("c52", typeof(string));
    
            var c53Parameter = c53 != null ?
                new ObjectParameter("c53", c53) :
                new ObjectParameter("c53", typeof(string));
    
            var c54Parameter = c54 != null ?
                new ObjectParameter("c54", c54) :
                new ObjectParameter("c54", typeof(string));
    
            var c55Parameter = c55 != null ?
                new ObjectParameter("c55", c55) :
                new ObjectParameter("c55", typeof(string));
    
            var c56Parameter = c56 != null ?
                new ObjectParameter("c56", c56) :
                new ObjectParameter("c56", typeof(string));
    
            var c57Parameter = c57 != null ?
                new ObjectParameter("c57", c57) :
                new ObjectParameter("c57", typeof(string));
    
            var c58Parameter = c58 != null ?
                new ObjectParameter("c58", c58) :
                new ObjectParameter("c58", typeof(string));
    
            var c59Parameter = c59.HasValue ?
                new ObjectParameter("c59", c59) :
                new ObjectParameter("c59", typeof(int));
    
            var c60Parameter = c60.HasValue ?
                new ObjectParameter("c60", c60) :
                new ObjectParameter("c60", typeof(System.DateTime));
    
            var c61Parameter = c61 != null ?
                new ObjectParameter("c61", c61) :
                new ObjectParameter("c61", typeof(string));
    
            var c62Parameter = c62 != null ?
                new ObjectParameter("c62", c62) :
                new ObjectParameter("c62", typeof(string));
    
            var c63Parameter = c63.HasValue ?
                new ObjectParameter("c63", c63) :
                new ObjectParameter("c63", typeof(int));
    
            var c64Parameter = c64.HasValue ?
                new ObjectParameter("c64", c64) :
                new ObjectParameter("c64", typeof(System.DateTime));
    
            var c65Parameter = c65.HasValue ?
                new ObjectParameter("c65", c65) :
                new ObjectParameter("c65", typeof(int));
    
            var c66Parameter = c66.HasValue ?
                new ObjectParameter("c66", c66) :
                new ObjectParameter("c66", typeof(int));
    
            var c67Parameter = c67.HasValue ?
                new ObjectParameter("c67", c67) :
                new ObjectParameter("c67", typeof(int));
    
            var c68Parameter = c68.HasValue ?
                new ObjectParameter("c68", c68) :
                new ObjectParameter("c68", typeof(int));
    
            var c69Parameter = c69 != null ?
                new ObjectParameter("c69", c69) :
                new ObjectParameter("c69", typeof(string));
    
            var c70Parameter = c70.HasValue ?
                new ObjectParameter("c70", c70) :
                new ObjectParameter("c70", typeof(float));
    
            var c71Parameter = c71 != null ?
                new ObjectParameter("c71", c71) :
                new ObjectParameter("c71", typeof(string));
    
            var c72Parameter = c72 != null ?
                new ObjectParameter("c72", c72) :
                new ObjectParameter("c72", typeof(string));
    
            var c73Parameter = c73 != null ?
                new ObjectParameter("c73", c73) :
                new ObjectParameter("c73", typeof(string));
    
            var c74Parameter = c74.HasValue ?
                new ObjectParameter("c74", c74) :
                new ObjectParameter("c74", typeof(System.DateTime));
    
            var c75Parameter = c75 != null ?
                new ObjectParameter("c75", c75) :
                new ObjectParameter("c75", typeof(string));
    
            var c76Parameter = c76 != null ?
                new ObjectParameter("c76", c76) :
                new ObjectParameter("c76", typeof(string));
    
            var c77Parameter = c77 != null ?
                new ObjectParameter("c77", c77) :
                new ObjectParameter("c77", typeof(string));
    
            var c78Parameter = c78.HasValue ?
                new ObjectParameter("c78", c78) :
                new ObjectParameter("c78", typeof(System.DateTime));
    
            var c79Parameter = c79.HasValue ?
                new ObjectParameter("c79", c79) :
                new ObjectParameter("c79", typeof(System.DateTime));
    
            var c80Parameter = c80.HasValue ?
                new ObjectParameter("c80", c80) :
                new ObjectParameter("c80", typeof(System.DateTime));
    
            var c81Parameter = c81.HasValue ?
                new ObjectParameter("c81", c81) :
                new ObjectParameter("c81", typeof(System.DateTime));
    
            var c82Parameter = c82.HasValue ?
                new ObjectParameter("c82", c82) :
                new ObjectParameter("c82", typeof(System.DateTime));
    
            var c83Parameter = c83.HasValue ?
                new ObjectParameter("c83", c83) :
                new ObjectParameter("c83", typeof(System.DateTime));
    
            var c84Parameter = c84.HasValue ?
                new ObjectParameter("c84", c84) :
                new ObjectParameter("c84", typeof(System.DateTime));
    
            var c85Parameter = c85.HasValue ?
                new ObjectParameter("c85", c85) :
                new ObjectParameter("c85", typeof(System.DateTime));
    
            var c86Parameter = c86.HasValue ?
                new ObjectParameter("c86", c86) :
                new ObjectParameter("c86", typeof(System.DateTime));
    
            var c87Parameter = c87.HasValue ?
                new ObjectParameter("c87", c87) :
                new ObjectParameter("c87", typeof(int));
    
            var c88Parameter = c88 != null ?
                new ObjectParameter("c88", c88) :
                new ObjectParameter("c88", typeof(string));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboPARKING", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, c25Parameter, c26Parameter, c27Parameter, c28Parameter, c29Parameter, c30Parameter, c31Parameter, c32Parameter, c33Parameter, c34Parameter, c35Parameter, c36Parameter, c37Parameter, c38Parameter, c39Parameter, c40Parameter, c41Parameter, c42Parameter, c43Parameter, c44Parameter, c45Parameter, c46Parameter, c47Parameter, c48Parameter, c49Parameter, c50Parameter, c51Parameter, c52Parameter, c53Parameter, c54Parameter, c55Parameter, c56Parameter, c57Parameter, c58Parameter, c59Parameter, c60Parameter, c61Parameter, c62Parameter, c63Parameter, c64Parameter, c65Parameter, c66Parameter, c67Parameter, c68Parameter, c69Parameter, c70Parameter, c71Parameter, c72Parameter, c73Parameter, c74Parameter, c75Parameter, c76Parameter, c77Parameter, c78Parameter, c79Parameter, c80Parameter, c81Parameter, c82Parameter, c83Parameter, c84Parameter, c85Parameter, c86Parameter, c87Parameter, c88Parameter, pkc1Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboPARKING_TRANSLINK(Nullable<int> c1, Nullable<int> c2, Nullable<int> c3, string c4, Nullable<long> c5, Nullable<System.DateTime> c6, Nullable<System.DateTime> c7, Nullable<System.DateTime> c8, Nullable<System.DateTime> c9, Nullable<System.DateTime> c10, Nullable<System.DateTime> c11, Nullable<System.DateTime> c12, Nullable<System.DateTime> c13, string c14, Nullable<System.DateTime> c15, Nullable<System.DateTime> c16, string c17, string c18, string c19, Nullable<System.DateTime> c20, Nullable<int> pkc1, Nullable<int> pkc2, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            var c3Parameter = c3.HasValue ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(int));
    
            var c4Parameter = c4 != null ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(string));
    
            var c5Parameter = c5.HasValue ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(long));
    
            var c6Parameter = c6.HasValue ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(System.DateTime));
    
            var c7Parameter = c7.HasValue ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(System.DateTime));
    
            var c8Parameter = c8.HasValue ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(System.DateTime));
    
            var c9Parameter = c9.HasValue ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(System.DateTime));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(System.DateTime));
    
            var c11Parameter = c11.HasValue ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(System.DateTime));
    
            var c12Parameter = c12.HasValue ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(System.DateTime));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(System.DateTime));
    
            var c14Parameter = c14 != null ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(string));
    
            var c15Parameter = c15.HasValue ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(System.DateTime));
    
            var c16Parameter = c16.HasValue ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(System.DateTime));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20.HasValue ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(System.DateTime));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboPARKING_TRANSLINK", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, pkc1Parameter, pkc2Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboPARKING_VIOS(string c1, string c2, string c3, string c4, Nullable<float> c5, Nullable<float> c6, Nullable<float> c7, string c8, Nullable<int> c9, Nullable<int> c10, Nullable<int> c11, string c12, Nullable<float> c13, Nullable<float> c14, Nullable<int> pkc1, Nullable<int> pkc2, byte[] bitmap)
        {
            var c1Parameter = c1 != null ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(string));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4 != null ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(string));
    
            var c5Parameter = c5.HasValue ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(float));
    
            var c6Parameter = c6.HasValue ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(float));
    
            var c7Parameter = c7.HasValue ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(float));
    
            var c8Parameter = c8 != null ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(string));
    
            var c9Parameter = c9.HasValue ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(int));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(int));
    
            var c11Parameter = c11.HasValue ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(int));
    
            var c12Parameter = c12 != null ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(string));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(float));
    
            var c14Parameter = c14.HasValue ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(float));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboPARKING_VIOS", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, pkc1Parameter, pkc2Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboPARKNOTE(Nullable<int> c1, Nullable<int> c2, Nullable<System.DateTime> c3, Nullable<System.DateTime> c4, string c5, string c6, Nullable<System.DateTime> c7, Nullable<System.DateTime> c8, string c9, string c10, string c11, string c12, Nullable<System.DateTime> c13, Nullable<System.DateTime> c14, Nullable<int> c15, string c16, Nullable<int> c17, string c18, Nullable<int> c19, Nullable<System.DateTime> c20, Nullable<int> c21, Nullable<int> c22, Nullable<int> c23, byte[] c24, string c25, Nullable<int> c26, string c27, Nullable<System.DateTime> c28, Nullable<System.DateTime> c29, Nullable<System.DateTime> c30, Nullable<System.DateTime> c31, Nullable<System.DateTime> c32, Nullable<System.DateTime> c33, Nullable<System.DateTime> c34, Nullable<System.DateTime> c35, Nullable<System.DateTime> c36, Nullable<int> c37, Nullable<int> pkc1, Nullable<int> pkc2, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            var c3Parameter = c3.HasValue ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(System.DateTime));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(System.DateTime));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6 != null ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(string));
    
            var c7Parameter = c7.HasValue ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(System.DateTime));
    
            var c8Parameter = c8.HasValue ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(System.DateTime));
    
            var c9Parameter = c9 != null ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(string));
    
            var c10Parameter = c10 != null ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(string));
    
            var c11Parameter = c11 != null ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(string));
    
            var c12Parameter = c12 != null ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(string));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(System.DateTime));
    
            var c14Parameter = c14.HasValue ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(System.DateTime));
    
            var c15Parameter = c15.HasValue ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(int));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17.HasValue ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(int));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19.HasValue ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(int));
    
            var c20Parameter = c20.HasValue ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(System.DateTime));
    
            var c21Parameter = c21.HasValue ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(int));
    
            var c22Parameter = c22.HasValue ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(int));
    
            var c23Parameter = c23.HasValue ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(int));
    
            var c24Parameter = c24 != null ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(byte[]));
    
            var c25Parameter = c25 != null ?
                new ObjectParameter("c25", c25) :
                new ObjectParameter("c25", typeof(string));
    
            var c26Parameter = c26.HasValue ?
                new ObjectParameter("c26", c26) :
                new ObjectParameter("c26", typeof(int));
    
            var c27Parameter = c27 != null ?
                new ObjectParameter("c27", c27) :
                new ObjectParameter("c27", typeof(string));
    
            var c28Parameter = c28.HasValue ?
                new ObjectParameter("c28", c28) :
                new ObjectParameter("c28", typeof(System.DateTime));
    
            var c29Parameter = c29.HasValue ?
                new ObjectParameter("c29", c29) :
                new ObjectParameter("c29", typeof(System.DateTime));
    
            var c30Parameter = c30.HasValue ?
                new ObjectParameter("c30", c30) :
                new ObjectParameter("c30", typeof(System.DateTime));
    
            var c31Parameter = c31.HasValue ?
                new ObjectParameter("c31", c31) :
                new ObjectParameter("c31", typeof(System.DateTime));
    
            var c32Parameter = c32.HasValue ?
                new ObjectParameter("c32", c32) :
                new ObjectParameter("c32", typeof(System.DateTime));
    
            var c33Parameter = c33.HasValue ?
                new ObjectParameter("c33", c33) :
                new ObjectParameter("c33", typeof(System.DateTime));
    
            var c34Parameter = c34.HasValue ?
                new ObjectParameter("c34", c34) :
                new ObjectParameter("c34", typeof(System.DateTime));
    
            var c35Parameter = c35.HasValue ?
                new ObjectParameter("c35", c35) :
                new ObjectParameter("c35", typeof(System.DateTime));
    
            var c36Parameter = c36.HasValue ?
                new ObjectParameter("c36", c36) :
                new ObjectParameter("c36", typeof(System.DateTime));
    
            var c37Parameter = c37.HasValue ?
                new ObjectParameter("c37", c37) :
                new ObjectParameter("c37", typeof(int));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboPARKNOTE", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, c25Parameter, c26Parameter, c27Parameter, c28Parameter, c29Parameter, c30Parameter, c31Parameter, c32Parameter, c33Parameter, c34Parameter, c35Parameter, c36Parameter, c37Parameter, pkc1Parameter, pkc2Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboSECURITY_RIGHT(Nullable<int> c1, string c2, string c3, string c4, Nullable<int> pkc1, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4 != null ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(string));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboSECURITY_RIGHT", c1Parameter, c2Parameter, c3Parameter, c4Parameter, pkc1Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboSECURITY_ROLE(Nullable<int> c1, string c2, string c3, Nullable<int> pkc1, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboSECURITY_ROLE", c1Parameter, c2Parameter, c3Parameter, pkc1Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboSECURITY_ROLERIGHT(Nullable<int> c1, Nullable<int> c2, Nullable<int> pkc1, Nullable<int> pkc2, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboSECURITY_ROLERIGHT", c1Parameter, c2Parameter, pkc1Parameter, pkc2Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboSECURITY_USER(Nullable<int> c1, string c2, string c3, string c4, string c5, string c6, string c7, string c8, Nullable<System.DateTime> c9, Nullable<System.DateTime> c10, Nullable<System.DateTime> c11, Nullable<System.DateTime> c12, Nullable<System.DateTime> c13, Nullable<System.DateTime> c14, Nullable<int> c15, string c16, string c17, string c18, string c19, string c20, string c21, string c22, string c23, string c24, string c25, string c26, string c27, string c28, Nullable<int> pkc1, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4 != null ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(string));
    
            var c5Parameter = c5 != null ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(string));
    
            var c6Parameter = c6 != null ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(string));
    
            var c7Parameter = c7 != null ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(string));
    
            var c8Parameter = c8 != null ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(string));
    
            var c9Parameter = c9.HasValue ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(System.DateTime));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(System.DateTime));
    
            var c11Parameter = c11.HasValue ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(System.DateTime));
    
            var c12Parameter = c12.HasValue ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(System.DateTime));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(System.DateTime));
    
            var c14Parameter = c14.HasValue ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(System.DateTime));
    
            var c15Parameter = c15.HasValue ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(int));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20 != null ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(string));
    
            var c21Parameter = c21 != null ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(string));
    
            var c22Parameter = c22 != null ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(string));
    
            var c23Parameter = c23 != null ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(string));
    
            var c24Parameter = c24 != null ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(string));
    
            var c25Parameter = c25 != null ?
                new ObjectParameter("c25", c25) :
                new ObjectParameter("c25", typeof(string));
    
            var c26Parameter = c26 != null ?
                new ObjectParameter("c26", c26) :
                new ObjectParameter("c26", typeof(string));
    
            var c27Parameter = c27 != null ?
                new ObjectParameter("c27", c27) :
                new ObjectParameter("c27", typeof(string));
    
            var c28Parameter = c28 != null ?
                new ObjectParameter("c28", c28) :
                new ObjectParameter("c28", typeof(string));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboSECURITY_USER", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, c25Parameter, c26Parameter, c27Parameter, c28Parameter, pkc1Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboSECURITY_USERRIGHT(Nullable<int> c1, Nullable<int> c2, Nullable<int> c3, Nullable<int> pkc1, Nullable<int> pkc2, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            var c3Parameter = c3.HasValue ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(int));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboSECURITY_USERRIGHT", c1Parameter, c2Parameter, c3Parameter, pkc1Parameter, pkc2Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboSECURITY_USERROLE(Nullable<int> c1, Nullable<int> c2, Nullable<int> pkc1, Nullable<int> pkc2, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2.HasValue ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(int));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var pkc2Parameter = pkc2.HasValue ?
                new ObjectParameter("pkc2", pkc2) :
                new ObjectParameter("pkc2", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboSECURITY_USERROLE", c1Parameter, c2Parameter, pkc1Parameter, pkc2Parameter, bitmapParameter);
        }
    
        public virtual int sp_MSupd_dboTASK(Nullable<int> c1, string c2, string c3, Nullable<int> c4, Nullable<int> c5, string c6, string c7, string c8, string c9, Nullable<int> c10, string c11, Nullable<System.DateTime> c12, Nullable<System.DateTime> c13, string c14, string c15, string c16, string c17, string c18, string c19, string c20, string c21, Nullable<int> c22, Nullable<int> c23, byte[] c24, Nullable<int> pkc1, byte[] bitmap)
        {
            var c1Parameter = c1.HasValue ?
                new ObjectParameter("c1", c1) :
                new ObjectParameter("c1", typeof(int));
    
            var c2Parameter = c2 != null ?
                new ObjectParameter("c2", c2) :
                new ObjectParameter("c2", typeof(string));
    
            var c3Parameter = c3 != null ?
                new ObjectParameter("c3", c3) :
                new ObjectParameter("c3", typeof(string));
    
            var c4Parameter = c4.HasValue ?
                new ObjectParameter("c4", c4) :
                new ObjectParameter("c4", typeof(int));
    
            var c5Parameter = c5.HasValue ?
                new ObjectParameter("c5", c5) :
                new ObjectParameter("c5", typeof(int));
    
            var c6Parameter = c6 != null ?
                new ObjectParameter("c6", c6) :
                new ObjectParameter("c6", typeof(string));
    
            var c7Parameter = c7 != null ?
                new ObjectParameter("c7", c7) :
                new ObjectParameter("c7", typeof(string));
    
            var c8Parameter = c8 != null ?
                new ObjectParameter("c8", c8) :
                new ObjectParameter("c8", typeof(string));
    
            var c9Parameter = c9 != null ?
                new ObjectParameter("c9", c9) :
                new ObjectParameter("c9", typeof(string));
    
            var c10Parameter = c10.HasValue ?
                new ObjectParameter("c10", c10) :
                new ObjectParameter("c10", typeof(int));
    
            var c11Parameter = c11 != null ?
                new ObjectParameter("c11", c11) :
                new ObjectParameter("c11", typeof(string));
    
            var c12Parameter = c12.HasValue ?
                new ObjectParameter("c12", c12) :
                new ObjectParameter("c12", typeof(System.DateTime));
    
            var c13Parameter = c13.HasValue ?
                new ObjectParameter("c13", c13) :
                new ObjectParameter("c13", typeof(System.DateTime));
    
            var c14Parameter = c14 != null ?
                new ObjectParameter("c14", c14) :
                new ObjectParameter("c14", typeof(string));
    
            var c15Parameter = c15 != null ?
                new ObjectParameter("c15", c15) :
                new ObjectParameter("c15", typeof(string));
    
            var c16Parameter = c16 != null ?
                new ObjectParameter("c16", c16) :
                new ObjectParameter("c16", typeof(string));
    
            var c17Parameter = c17 != null ?
                new ObjectParameter("c17", c17) :
                new ObjectParameter("c17", typeof(string));
    
            var c18Parameter = c18 != null ?
                new ObjectParameter("c18", c18) :
                new ObjectParameter("c18", typeof(string));
    
            var c19Parameter = c19 != null ?
                new ObjectParameter("c19", c19) :
                new ObjectParameter("c19", typeof(string));
    
            var c20Parameter = c20 != null ?
                new ObjectParameter("c20", c20) :
                new ObjectParameter("c20", typeof(string));
    
            var c21Parameter = c21 != null ?
                new ObjectParameter("c21", c21) :
                new ObjectParameter("c21", typeof(string));
    
            var c22Parameter = c22.HasValue ?
                new ObjectParameter("c22", c22) :
                new ObjectParameter("c22", typeof(int));
    
            var c23Parameter = c23.HasValue ?
                new ObjectParameter("c23", c23) :
                new ObjectParameter("c23", typeof(int));
    
            var c24Parameter = c24 != null ?
                new ObjectParameter("c24", c24) :
                new ObjectParameter("c24", typeof(byte[]));
    
            var pkc1Parameter = pkc1.HasValue ?
                new ObjectParameter("pkc1", pkc1) :
                new ObjectParameter("pkc1", typeof(int));
    
            var bitmapParameter = bitmap != null ?
                new ObjectParameter("bitmap", bitmap) :
                new ObjectParameter("bitmap", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MSupd_dboTASK", c1Parameter, c2Parameter, c3Parameter, c4Parameter, c5Parameter, c6Parameter, c7Parameter, c8Parameter, c9Parameter, c10Parameter, c11Parameter, c12Parameter, c13Parameter, c14Parameter, c15Parameter, c16Parameter, c17Parameter, c18Parameter, c19Parameter, c20Parameter, c21Parameter, c22Parameter, c23Parameter, c24Parameter, pkc1Parameter, bitmapParameter);
        }
    
        public virtual int sp_SensorPaymentTransactionAudit(Nullable<long> sensorPaymentTransactionID, Nullable<long> parkingSpaceID)
        {
            var sensorPaymentTransactionIDParameter = sensorPaymentTransactionID.HasValue ?
                new ObjectParameter("SensorPaymentTransactionID", sensorPaymentTransactionID) :
                new ObjectParameter("SensorPaymentTransactionID", typeof(long));
    
            var parkingSpaceIDParameter = parkingSpaceID.HasValue ?
                new ObjectParameter("ParkingSpaceID", parkingSpaceID) :
                new ObjectParameter("ParkingSpaceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SensorPaymentTransactionAudit", sensorPaymentTransactionIDParameter, parkingSpaceIDParameter);
        }
    
        public virtual int sp_TimeTypeCustomer(Nullable<int> cid, Nullable<System.DateTime> ts, string tt, ObjectParameter timeTypeId)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var tsParameter = ts.HasValue ?
                new ObjectParameter("ts", ts) :
                new ObjectParameter("ts", typeof(System.DateTime));
    
            var ttParameter = tt != null ?
                new ObjectParameter("tt", tt) :
                new ObjectParameter("tt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TimeTypeCustomer", cidParameter, tsParameter, ttParameter, timeTypeId);
        }
    
        public virtual int sp_TimeTypeLogic(Nullable<System.DateTime> tS, ObjectParameter timeType1, ObjectParameter timeType2, ObjectParameter timeType3, ObjectParameter timeType4, ObjectParameter timeType5)
        {
            var tSParameter = tS.HasValue ?
                new ObjectParameter("TS", tS) :
                new ObjectParameter("TS", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TimeTypeLogic", tSParameter, timeType1, timeType2, timeType3, timeType4, timeType5);
        }
    
        public virtual int sp_Trigger_Log(string mSG, string tRG)
        {
            var mSGParameter = mSG != null ?
                new ObjectParameter("MSG", mSG) :
                new ObjectParameter("MSG", typeof(string));
    
            var tRGParameter = tRG != null ?
                new ObjectParameter("TRG", tRG) :
                new ObjectParameter("TRG", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Trigger_Log", mSGParameter, tRGParameter);
        }
    
        public virtual int sp_TxTrigger_Helper(Nullable<long> transactionXxxID, Nullable<int> transactionType, Nullable<long> parkingSpaceId, Nullable<int> customerID, Nullable<int> areaID, Nullable<int> meterID, Nullable<System.DateTime> transDateTime, Nullable<int> bayNumber, Nullable<int> amountInCents, Nullable<int> timePaid, Nullable<int> ccType, Nullable<int> txStatus, Nullable<int> receiptNo, string txValue, Nullable<long> discountSchemeId, Nullable<int> discountAmt)
        {
            var transactionXxxIDParameter = transactionXxxID.HasValue ?
                new ObjectParameter("TransactionXxxID", transactionXxxID) :
                new ObjectParameter("TransactionXxxID", typeof(long));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var parkingSpaceIdParameter = parkingSpaceId.HasValue ?
                new ObjectParameter("ParkingSpaceId", parkingSpaceId) :
                new ObjectParameter("ParkingSpaceId", typeof(long));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(int));
    
            var transDateTimeParameter = transDateTime.HasValue ?
                new ObjectParameter("TransDateTime", transDateTime) :
                new ObjectParameter("TransDateTime", typeof(System.DateTime));
    
            var bayNumberParameter = bayNumber.HasValue ?
                new ObjectParameter("BayNumber", bayNumber) :
                new ObjectParameter("BayNumber", typeof(int));
    
            var amountInCentsParameter = amountInCents.HasValue ?
                new ObjectParameter("AmountInCents", amountInCents) :
                new ObjectParameter("AmountInCents", typeof(int));
    
            var timePaidParameter = timePaid.HasValue ?
                new ObjectParameter("TimePaid", timePaid) :
                new ObjectParameter("TimePaid", typeof(int));
    
            var ccTypeParameter = ccType.HasValue ?
                new ObjectParameter("CcType", ccType) :
                new ObjectParameter("CcType", typeof(int));
    
            var txStatusParameter = txStatus.HasValue ?
                new ObjectParameter("TxStatus", txStatus) :
                new ObjectParameter("TxStatus", typeof(int));
    
            var receiptNoParameter = receiptNo.HasValue ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(int));
    
            var txValueParameter = txValue != null ?
                new ObjectParameter("TxValue", txValue) :
                new ObjectParameter("TxValue", typeof(string));
    
            var discountSchemeIdParameter = discountSchemeId.HasValue ?
                new ObjectParameter("DiscountSchemeId", discountSchemeId) :
                new ObjectParameter("DiscountSchemeId", typeof(long));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TxTrigger_Helper", transactionXxxIDParameter, transactionTypeParameter, parkingSpaceIdParameter, customerIDParameter, areaIDParameter, meterIDParameter, transDateTimeParameter, bayNumberParameter, amountInCentsParameter, timePaidParameter, ccTypeParameter, txStatusParameter, receiptNoParameter, txValueParameter, discountSchemeIdParameter, discountAmtParameter);
        }
    
        public virtual int sp_UDP_getMeterTimeZone(Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, ObjectParameter tz)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_getMeterTimeZone", cidParameter, aidParameter, midParameter, tz);
        }
    
        public virtual int sp_UDP_getParkingSpaceID(Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> bay, ObjectParameter spaceid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var bayParameter = bay.HasValue ?
                new ObjectParameter("bay", bay) :
                new ObjectParameter("bay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_getParkingSpaceID", cidParameter, aidParameter, midParameter, bayParameter, spaceid);
        }
    
        public virtual int sp_UDP_Log(string msg)
        {
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_Log", msgParameter);
        }
    
        public virtual int SP_UDP_METERCOMM(Nullable<int> cUSTOMERID, Nullable<int> aREAID, Nullable<int> mETERID, string mESSAGE, Nullable<int> eLAPSED, Nullable<System.DateTime> tS, Nullable<int> ripnetResponse, Nullable<int> overAllResponse, Nullable<int> cardType, Nullable<int> oLTResponse)
        {
            var cUSTOMERIDParameter = cUSTOMERID.HasValue ?
                new ObjectParameter("CUSTOMERID", cUSTOMERID) :
                new ObjectParameter("CUSTOMERID", typeof(int));
    
            var aREAIDParameter = aREAID.HasValue ?
                new ObjectParameter("AREAID", aREAID) :
                new ObjectParameter("AREAID", typeof(int));
    
            var mETERIDParameter = mETERID.HasValue ?
                new ObjectParameter("METERID", mETERID) :
                new ObjectParameter("METERID", typeof(int));
    
            var mESSAGEParameter = mESSAGE != null ?
                new ObjectParameter("MESSAGE", mESSAGE) :
                new ObjectParameter("MESSAGE", typeof(string));
    
            var eLAPSEDParameter = eLAPSED.HasValue ?
                new ObjectParameter("ELAPSED", eLAPSED) :
                new ObjectParameter("ELAPSED", typeof(int));
    
            var tSParameter = tS.HasValue ?
                new ObjectParameter("TS", tS) :
                new ObjectParameter("TS", typeof(System.DateTime));
    
            var ripnetResponseParameter = ripnetResponse.HasValue ?
                new ObjectParameter("RipnetResponse", ripnetResponse) :
                new ObjectParameter("RipnetResponse", typeof(int));
    
            var overAllResponseParameter = overAllResponse.HasValue ?
                new ObjectParameter("OverAllResponse", overAllResponse) :
                new ObjectParameter("OverAllResponse", typeof(int));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("cardType", cardType) :
                new ObjectParameter("cardType", typeof(int));
    
            var oLTResponseParameter = oLTResponse.HasValue ?
                new ObjectParameter("OLTResponse", oLTResponse) :
                new ObjectParameter("OLTResponse", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UDP_METERCOMM", cUSTOMERIDParameter, aREAIDParameter, mETERIDParameter, mESSAGEParameter, eLAPSEDParameter, tSParameter, ripnetResponseParameter, overAllResponseParameter, cardTypeParameter, oLTResponseParameter);
        }
    
        public virtual int sp_UDP_MeterDiagnostic(Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> diagTime, Nullable<int> diagType, string diagValue)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var diagTimeParameter = diagTime.HasValue ?
                new ObjectParameter("diagTime", diagTime) :
                new ObjectParameter("diagTime", typeof(int));
    
            var diagTypeParameter = diagType.HasValue ?
                new ObjectParameter("diagType", diagType) :
                new ObjectParameter("diagType", typeof(int));
    
            var diagValueParameter = diagValue != null ?
                new ObjectParameter("diagValue", diagValue) :
                new ObjectParameter("diagValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_MeterDiagnostic", cidParameter, aidParameter, midParameter, diagTimeParameter, diagTypeParameter, diagValueParameter);
        }
    
        public virtual ObjectResult<sp_UDP_MeterPushSchedule_Result> sp_UDP_MeterPushSchedule(Nullable<long> pushId)
        {
            var pushIdParameter = pushId.HasValue ?
                new ObjectParameter("pushId", pushId) :
                new ObjectParameter("pushId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UDP_MeterPushSchedule_Result>("sp_UDP_MeterPushSchedule", pushIdParameter);
        }
    
        public virtual int sp_UDP_ParkingSpaceOccunpancy(Nullable<long> spaceid, Nullable<int> status, Nullable<System.DateTime> ts, Nullable<int> gcid, Nullable<int> gaid, Nullable<int> gmid, byte[] diag, Nullable<System.DateTime> currentTs, ObjectParameter psoId, ObjectParameter result)
        {
            var spaceidParameter = spaceid.HasValue ?
                new ObjectParameter("spaceid", spaceid) :
                new ObjectParameter("spaceid", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var tsParameter = ts.HasValue ?
                new ObjectParameter("ts", ts) :
                new ObjectParameter("ts", typeof(System.DateTime));
    
            var gcidParameter = gcid.HasValue ?
                new ObjectParameter("gcid", gcid) :
                new ObjectParameter("gcid", typeof(int));
    
            var gaidParameter = gaid.HasValue ?
                new ObjectParameter("gaid", gaid) :
                new ObjectParameter("gaid", typeof(int));
    
            var gmidParameter = gmid.HasValue ?
                new ObjectParameter("gmid", gmid) :
                new ObjectParameter("gmid", typeof(int));
    
            var diagParameter = diag != null ?
                new ObjectParameter("diag", diag) :
                new ObjectParameter("diag", typeof(byte[]));
    
            var currentTsParameter = currentTs.HasValue ?
                new ObjectParameter("currentTs", currentTs) :
                new ObjectParameter("currentTs", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_ParkingSpaceOccunpancy", spaceidParameter, statusParameter, tsParameter, gcidParameter, gaidParameter, gmidParameter, diagParameter, currentTsParameter, psoId, result);
        }
    
        public virtual int sp_UDP_SensorStatus(Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> bay, Nullable<int> time, Nullable<int> status, Nullable<int> gcid, Nullable<int> gaid, Nullable<int> gmid, byte[] diag, Nullable<System.DateTime> currentTs, ObjectParameter result)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var bayParameter = bay.HasValue ?
                new ObjectParameter("bay", bay) :
                new ObjectParameter("bay", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var gcidParameter = gcid.HasValue ?
                new ObjectParameter("gcid", gcid) :
                new ObjectParameter("gcid", typeof(int));
    
            var gaidParameter = gaid.HasValue ?
                new ObjectParameter("gaid", gaid) :
                new ObjectParameter("gaid", typeof(int));
    
            var gmidParameter = gmid.HasValue ?
                new ObjectParameter("gmid", gmid) :
                new ObjectParameter("gmid", typeof(int));
    
            var diagParameter = diag != null ?
                new ObjectParameter("diag", diag) :
                new ObjectParameter("diag", typeof(byte[]));
    
            var currentTsParameter = currentTs.HasValue ?
                new ObjectParameter("currentTs", currentTs) :
                new ObjectParameter("currentTs", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_SensorStatus", cidParameter, aidParameter, midParameter, bayParameter, timeParameter, statusParameter, gcidParameter, gaidParameter, gmidParameter, diagParameter, currentTsParameter, result);
        }
    
        public virtual int sp_UDP_SensorStatus_2(Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> bay, Nullable<int> time, Nullable<int> status, Nullable<int> gcid, Nullable<int> gaid, Nullable<int> gmid, byte[] diag, Nullable<System.DateTime> currentTs, ObjectParameter result, ObjectParameter mcid, ObjectParameter maid, ObjectParameter mmid, ObjectParameter mbay)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var bayParameter = bay.HasValue ?
                new ObjectParameter("bay", bay) :
                new ObjectParameter("bay", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var gcidParameter = gcid.HasValue ?
                new ObjectParameter("gcid", gcid) :
                new ObjectParameter("gcid", typeof(int));
    
            var gaidParameter = gaid.HasValue ?
                new ObjectParameter("gaid", gaid) :
                new ObjectParameter("gaid", typeof(int));
    
            var gmidParameter = gmid.HasValue ?
                new ObjectParameter("gmid", gmid) :
                new ObjectParameter("gmid", typeof(int));
    
            var diagParameter = diag != null ?
                new ObjectParameter("diag", diag) :
                new ObjectParameter("diag", typeof(byte[]));
    
            var currentTsParameter = currentTs.HasValue ?
                new ObjectParameter("currentTs", currentTs) :
                new ObjectParameter("currentTs", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_SensorStatus_2", cidParameter, aidParameter, midParameter, bayParameter, timeParameter, statusParameter, gcidParameter, gaidParameter, gmidParameter, diagParameter, currentTsParameter, result, mcid, maid, mmid, mbay);
        }
    
        public virtual int sp_UDP_SpaceExpiryConfirmation(Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> bay, Nullable<int> transTs, Nullable<int> occStatus, ObjectParameter status)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var bayParameter = bay.HasValue ?
                new ObjectParameter("bay", bay) :
                new ObjectParameter("bay", typeof(int));
    
            var transTsParameter = transTs.HasValue ?
                new ObjectParameter("transTs", transTs) :
                new ObjectParameter("transTs", typeof(int));
    
            var occStatusParameter = occStatus.HasValue ?
                new ObjectParameter("occStatus", occStatus) :
                new ObjectParameter("occStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_SpaceExpiryConfirmation", cidParameter, aidParameter, midParameter, bayParameter, transTsParameter, occStatusParameter, status);
        }
    
        public virtual int sp_UpdateOperationalStatus(Nullable<int> customerID, Nullable<int> areaID, Nullable<int> meterID, Nullable<int> operationalStatusId, Nullable<System.DateTime> operationalStatusTime)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(int));
    
            var operationalStatusIdParameter = operationalStatusId.HasValue ?
                new ObjectParameter("OperationalStatusId", operationalStatusId) :
                new ObjectParameter("OperationalStatusId", typeof(int));
    
            var operationalStatusTimeParameter = operationalStatusTime.HasValue ?
                new ObjectParameter("OperationalStatusTime", operationalStatusTime) :
                new ObjectParameter("OperationalStatusTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateOperationalStatus", customerIDParameter, areaIDParameter, meterIDParameter, operationalStatusIdParameter, operationalStatusTimeParameter);
        }
    
        public virtual int spImportCashBox(Nullable<int> customerID, string filename, string xmlpath, string xmldoc)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var xmlpathParameter = xmlpath != null ?
                new ObjectParameter("xmlpath", xmlpath) :
                new ObjectParameter("xmlpath", typeof(string));
    
            var xmldocParameter = xmldoc != null ?
                new ObjectParameter("xmldoc", xmldoc) :
                new ObjectParameter("xmldoc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportCashBox", customerIDParameter, filenameParameter, xmlpathParameter, xmldocParameter);
        }
    
        public virtual int spImportCashBoxHistory(Nullable<int> customerID, string filename, string xmlpath, string xmldoc)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var xmlpathParameter = xmlpath != null ?
                new ObjectParameter("xmlpath", xmlpath) :
                new ObjectParameter("xmlpath", typeof(string));
    
            var xmldocParameter = xmldoc != null ?
                new ObjectParameter("xmldoc", xmldoc) :
                new ObjectParameter("xmldoc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportCashBoxHistory", customerIDParameter, filenameParameter, xmlpathParameter, xmldocParameter);
        }
    
        public virtual ObjectResult<spImportMXCashBox_Result> spImportMXCashBox(Nullable<int> customerID, string filename, string xmlpath, string xmldoc)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var xmlpathParameter = xmlpath != null ?
                new ObjectParameter("xmlpath", xmlpath) :
                new ObjectParameter("xmlpath", typeof(string));
    
            var xmldocParameter = xmldoc != null ?
                new ObjectParameter("xmldoc", xmldoc) :
                new ObjectParameter("xmldoc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spImportMXCashBox_Result>("spImportMXCashBox", customerIDParameter, filenameParameter, xmlpathParameter, xmldocParameter);
        }
    
        public virtual int USP_AI_PARKING()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AI_PARKING");
        }
    
        public virtual int sp_UpdatePSOAudit(Nullable<long> parkingSpaceId, Nullable<System.DateTime> lastUpdatedTS, Nullable<long> auditID)
        {
            var parkingSpaceIdParameter = parkingSpaceId.HasValue ?
                new ObjectParameter("ParkingSpaceId", parkingSpaceId) :
                new ObjectParameter("ParkingSpaceId", typeof(long));
    
            var lastUpdatedTSParameter = lastUpdatedTS.HasValue ?
                new ObjectParameter("LastUpdatedTS", lastUpdatedTS) :
                new ObjectParameter("LastUpdatedTS", typeof(System.DateTime));
    
            var auditIDParameter = auditID.HasValue ?
                new ObjectParameter("AuditID", auditID) :
                new ObjectParameter("AuditID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePSOAudit", parkingSpaceIdParameter, lastUpdatedTSParameter, auditIDParameter);
        }
    
        public virtual int sp_addMeterJob1(string areaName, string collroutesName, string maintrtsName, string enfrtsName, string cg1gpsName, string cg2gpsName, string cg3gpsName, string locationName, string fileName, byte[] fileContent, Nullable<int> fileType, string chkSum, Nullable<System.DateTime> availableDate, Nullable<System.DateTime> activationDate, Nullable<int> cid)
        {
            var areaNameParameter = areaName != null ?
                new ObjectParameter("areaName", areaName) :
                new ObjectParameter("areaName", typeof(string));
    
            var collroutesNameParameter = collroutesName != null ?
                new ObjectParameter("collroutesName", collroutesName) :
                new ObjectParameter("collroutesName", typeof(string));
    
            var maintrtsNameParameter = maintrtsName != null ?
                new ObjectParameter("maintrtsName", maintrtsName) :
                new ObjectParameter("maintrtsName", typeof(string));
    
            var enfrtsNameParameter = enfrtsName != null ?
                new ObjectParameter("enfrtsName", enfrtsName) :
                new ObjectParameter("enfrtsName", typeof(string));
    
            var cg1gpsNameParameter = cg1gpsName != null ?
                new ObjectParameter("cg1gpsName", cg1gpsName) :
                new ObjectParameter("cg1gpsName", typeof(string));
    
            var cg2gpsNameParameter = cg2gpsName != null ?
                new ObjectParameter("cg2gpsName", cg2gpsName) :
                new ObjectParameter("cg2gpsName", typeof(string));
    
            var cg3gpsNameParameter = cg3gpsName != null ?
                new ObjectParameter("cg3gpsName", cg3gpsName) :
                new ObjectParameter("cg3gpsName", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("locationName", locationName) :
                new ObjectParameter("locationName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var fileContentParameter = fileContent != null ?
                new ObjectParameter("fileContent", fileContent) :
                new ObjectParameter("fileContent", typeof(byte[]));
    
            var fileTypeParameter = fileType.HasValue ?
                new ObjectParameter("fileType", fileType) :
                new ObjectParameter("fileType", typeof(int));
    
            var chkSumParameter = chkSum != null ?
                new ObjectParameter("chkSum", chkSum) :
                new ObjectParameter("chkSum", typeof(string));
    
            var availableDateParameter = availableDate.HasValue ?
                new ObjectParameter("availableDate", availableDate) :
                new ObjectParameter("availableDate", typeof(System.DateTime));
    
            var activationDateParameter = activationDate.HasValue ?
                new ObjectParameter("activationDate", activationDate) :
                new ObjectParameter("activationDate", typeof(System.DateTime));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_addMeterJob1", areaNameParameter, collroutesNameParameter, maintrtsNameParameter, enfrtsNameParameter, cg1gpsNameParameter, cg2gpsNameParameter, cg3gpsNameParameter, locationNameParameter, fileNameParameter, fileContentParameter, fileTypeParameter, chkSumParameter, availableDateParameter, activationDateParameter, cidParameter);
        }
    
        public virtual ObjectResult<string> sp_Alarm1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> currentTime, Nullable<int> workOrderId, string function)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("CurrentTime", currentTime) :
                new ObjectParameter("CurrentTime", typeof(System.DateTime));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            var functionParameter = function != null ?
                new ObjectParameter("Function", function) :
                new ObjectParameter("Function", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Alarm1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, currentTimeParameter, workOrderIdParameter, functionParameter);
        }
    
        public virtual int sp_Alarm_Clear1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfClearance, ObjectParameter message)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfClearanceParameter = timeOfClearance.HasValue ?
                new ObjectParameter("TimeOfClearance", timeOfClearance) :
                new ObjectParameter("TimeOfClearance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_Clear1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, timeOfClearanceParameter, message);
        }
    
        public virtual int sp_Alarm_DeleteActive1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> state, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<int> eventSource)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_DeleteActive1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, stateParameter, timeOfOccurranceParameter, timeOfNotificationParameter, eventSourceParameter);
        }
    
        public virtual int sp_Alarm_InsertActive1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<int> workOrderId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_InsertActive1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, timeOfNotificationParameter, workOrderIdParameter);
        }
    
        public virtual int sp_Alarm_InsertHistorical1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<int> eventState, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<System.DateTime> timeofClearance, Nullable<int> clearingEventUID, ObjectParameter eventUID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var eventStateParameter = eventState.HasValue ?
                new ObjectParameter("EventState", eventState) :
                new ObjectParameter("EventState", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var timeofClearanceParameter = timeofClearance.HasValue ?
                new ObjectParameter("TimeofClearance", timeofClearance) :
                new ObjectParameter("TimeofClearance", typeof(System.DateTime));
    
            var clearingEventUIDParameter = clearingEventUID.HasValue ?
                new ObjectParameter("ClearingEventUID", clearingEventUID) :
                new ObjectParameter("ClearingEventUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_InsertHistorical1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, eventStateParameter, timeOfOccurranceParameter, timeOfNotificationParameter, timeofClearanceParameter, clearingEventUIDParameter, eventUID);
        }
    
        public virtual int sp_Alarm_MeterStatus1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, ObjectParameter message)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_MeterStatus1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, timeOfNotificationParameter, message);
        }
    
        public virtual int sp_Alarm_MoveActiveToHistorical1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<int> eventState, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<System.DateTime> timeofClearance, Nullable<int> clearingEventUID, ObjectParameter eventUID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var eventStateParameter = eventState.HasValue ?
                new ObjectParameter("EventState", eventState) :
                new ObjectParameter("EventState", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var timeofClearanceParameter = timeofClearance.HasValue ?
                new ObjectParameter("TimeofClearance", timeofClearance) :
                new ObjectParameter("TimeofClearance", typeof(System.DateTime));
    
            var clearingEventUIDParameter = clearingEventUID.HasValue ?
                new ObjectParameter("ClearingEventUID", clearingEventUID) :
                new ObjectParameter("ClearingEventUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_MoveActiveToHistorical1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, eventStateParameter, timeOfOccurranceParameter, timeOfNotificationParameter, timeofClearanceParameter, clearingEventUIDParameter, eventUID);
        }
    
        public virtual int sp_Alarm_Raised1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, Nullable<System.DateTime> timeOfNotification, Nullable<int> workOrderId, ObjectParameter message)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            var timeOfNotificationParameter = timeOfNotification.HasValue ?
                new ObjectParameter("TimeOfNotification", timeOfNotification) :
                new ObjectParameter("TimeOfNotification", typeof(System.DateTime));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_Raised1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, timeOfNotificationParameter, workOrderIdParameter, message);
        }
    
        public virtual int sp_Alarm_SearchHistory1(Nullable<int> customerId, Nullable<int> areaId, Nullable<int> meterId, Nullable<int> eventCode, Nullable<int> eventSource, Nullable<System.DateTime> timeOfOccurrance, ObjectParameter eventUID, ObjectParameter timeOfClearance)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(int));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventSourceParameter = eventSource.HasValue ?
                new ObjectParameter("EventSource", eventSource) :
                new ObjectParameter("EventSource", typeof(int));
    
            var timeOfOccurranceParameter = timeOfOccurrance.HasValue ?
                new ObjectParameter("TimeOfOccurrance", timeOfOccurrance) :
                new ObjectParameter("TimeOfOccurrance", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alarm_SearchHistory1", customerIdParameter, areaIdParameter, meterIdParameter, eventCodeParameter, eventSourceParameter, timeOfOccurranceParameter, eventUID, timeOfClearance);
        }
    
        public virtual ObjectResult<string> sp_FDSummary_InsertorUpdate(Nullable<long> jobid, Nullable<long> fileid, Nullable<System.DateTime> actTs, Nullable<System.DateTime> failTs, Nullable<System.DateTime> downloadTs, Nullable<System.DateTime> downloadfailTs)
        {
            var jobidParameter = jobid.HasValue ?
                new ObjectParameter("jobid", jobid) :
                new ObjectParameter("jobid", typeof(long));
    
            var fileidParameter = fileid.HasValue ?
                new ObjectParameter("fileid", fileid) :
                new ObjectParameter("fileid", typeof(long));
    
            var actTsParameter = actTs.HasValue ?
                new ObjectParameter("actTs", actTs) :
                new ObjectParameter("actTs", typeof(System.DateTime));
    
            var failTsParameter = failTs.HasValue ?
                new ObjectParameter("FailTs", failTs) :
                new ObjectParameter("FailTs", typeof(System.DateTime));
    
            var downloadTsParameter = downloadTs.HasValue ?
                new ObjectParameter("downloadTs", downloadTs) :
                new ObjectParameter("downloadTs", typeof(System.DateTime));
    
            var downloadfailTsParameter = downloadfailTs.HasValue ?
                new ObjectParameter("downloadfailTs", downloadfailTs) :
                new ObjectParameter("downloadfailTs", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_FDSummary_InsertorUpdate", jobidParameter, fileidParameter, actTsParameter, failTsParameter, downloadTsParameter, downloadfailTsParameter);
        }
    
        public virtual int sp_SettledBatch1(Nullable<int> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SettledBatch1", cidParameter);
        }
    
        public virtual ObjectResult<string> sp_UDP_FDSummary(Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> fileId, Nullable<int> offset, Nullable<System.DateTime> currentTs)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("fileId", fileId) :
                new ObjectParameter("fileId", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var currentTsParameter = currentTs.HasValue ?
                new ObjectParameter("currentTs", currentTs) :
                new ObjectParameter("currentTs", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_UDP_FDSummary", cidParameter, aidParameter, midParameter, fileIdParameter, offsetParameter, currentTsParameter);
        }
    
        public virtual int sp_UDP_FDSummary_Insert(Nullable<int> cid, Nullable<int> aid, Nullable<int> mid, Nullable<int> fileId, ObjectParameter summaryId)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var aidParameter = aid.HasValue ?
                new ObjectParameter("aid", aid) :
                new ObjectParameter("aid", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("fileId", fileId) :
                new ObjectParameter("fileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UDP_FDSummary_Insert", cidParameter, aidParameter, midParameter, fileIdParameter, summaryId);
        }
    
        public virtual ObjectResult<sp_UDP_MeterResetSchedule_Result> sp_UDP_MeterResetSchedule(Nullable<long> scheduleId, Nullable<System.DateTime> ackTs)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("scheduleId", scheduleId) :
                new ObjectParameter("scheduleId", typeof(long));
    
            var ackTsParameter = ackTs.HasValue ?
                new ObjectParameter("ackTs", ackTs) :
                new ObjectParameter("ackTs", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UDP_MeterResetSchedule_Result>("sp_UDP_MeterResetSchedule", scheduleIdParameter, ackTsParameter);
        }
    
        public virtual int sp_SettledBatch(Nullable<int> cid)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SettledBatch", cidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_batterychange(Nullable<int> customerid)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_batterychange", customeridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_batteryPlanTochange(Nullable<int> customerid)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_batteryPlanTochange", customeridParameter);
        }
    
        public virtual ObjectResult<GetLandingRevenue> sp_Landing(Nullable<int> customerid, Nullable<System.DateTime> currentDate, Nullable<System.DateTime> dateMinusOne, Nullable<System.DateTime> dateMinusTwo, Nullable<System.DateTime> dateMinusThree, Nullable<System.DateTime> dateMinusFour, Nullable<System.DateTime> dateMinusFive, Nullable<System.DateTime> dateMinusFifteen)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            var dateMinusOneParameter = dateMinusOne.HasValue ?
                new ObjectParameter("dateMinusOne", dateMinusOne) :
                new ObjectParameter("dateMinusOne", typeof(System.DateTime));
    
            var dateMinusTwoParameter = dateMinusTwo.HasValue ?
                new ObjectParameter("dateMinusTwo", dateMinusTwo) :
                new ObjectParameter("dateMinusTwo", typeof(System.DateTime));
    
            var dateMinusThreeParameter = dateMinusThree.HasValue ?
                new ObjectParameter("dateMinusThree", dateMinusThree) :
                new ObjectParameter("dateMinusThree", typeof(System.DateTime));
    
            var dateMinusFourParameter = dateMinusFour.HasValue ?
                new ObjectParameter("dateMinusFour", dateMinusFour) :
                new ObjectParameter("dateMinusFour", typeof(System.DateTime));
    
            var dateMinusFiveParameter = dateMinusFive.HasValue ?
                new ObjectParameter("dateMinusFive", dateMinusFive) :
                new ObjectParameter("dateMinusFive", typeof(System.DateTime));
    
            var dateMinusFifteenParameter = dateMinusFifteen.HasValue ?
                new ObjectParameter("dateMinusFifteen", dateMinusFifteen) :
                new ObjectParameter("dateMinusFifteen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLandingRevenue>("sp_Landing", customeridParameter, currentDateParameter, dateMinusOneParameter, dateMinusTwoParameter, dateMinusThreeParameter, dateMinusFourParameter, dateMinusFiveParameter, dateMinusFifteenParameter);
        }
    
        public virtual ObjectResult<sp_revenue_Result> sp_revenue(Nullable<int> customerid, Nullable<System.DateTime> currentDate, Nullable<System.DateTime> dateMinusOne)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            var dateMinusOneParameter = dateMinusOne.HasValue ?
                new ObjectParameter("dateMinusOne", dateMinusOne) :
                new ObjectParameter("dateMinusOne", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_revenue_Result>("sp_revenue", customeridParameter, currentDateParameter, dateMinusOneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LowBattery(Nullable<int> customerid)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LowBattery", customeridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_changeBattery(Nullable<int> customerid)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_changeBattery", customeridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_NoMeterComm(Nullable<int> customerid, Nullable<System.DateTime> currentDate, Nullable<System.DateTime> dateMinusOne)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            var dateMinusOneParameter = dateMinusOne.HasValue ?
                new ObjectParameter("dateMinusOne", dateMinusOne) :
                new ObjectParameter("dateMinusOne", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_NoMeterComm", customeridParameter, currentDateParameter, dateMinusOneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LandingEnforceable(Nullable<int> customerid, Nullable<System.DateTime> localTime)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var localTimeParameter = localTime.HasValue ?
                new ObjectParameter("LocalTime", localTime) :
                new ObjectParameter("LocalTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LandingEnforceable", customeridParameter, localTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LandingSpaceStatusSensor(Nullable<int> customerid, Nullable<System.DateTime> localTime)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var localTimeParameter = localTime.HasValue ?
                new ObjectParameter("LocalTime", localTime) :
                new ObjectParameter("LocalTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LandingSpaceStatusSensor", customeridParameter, localTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_SensorComm(Nullable<int> customerid, Nullable<System.DateTime> currentDate, Nullable<System.DateTime> dateMinusOne)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            var dateMinusOneParameter = dateMinusOne.HasValue ?
                new ObjectParameter("dateMinusOne", dateMinusOne) :
                new ObjectParameter("dateMinusOne", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_SensorComm", customeridParameter, currentDateParameter, dateMinusOneParameter);
        }
    
        public virtual ObjectResult<zzzParkingInfo_Result> zzzParkingInfo(Nullable<short> customerID, Nullable<short> areaID, Nullable<short> zoneID, Nullable<int> mID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(short));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(short));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(short));
    
            var mIDParameter = mID.HasValue ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<zzzParkingInfo_Result>("zzzParkingInfo", customerIDParameter, areaIDParameter, zoneIDParameter, mIDParameter);
        }
    
        public virtual ObjectResult<zzzParkingSpace> zzzParkingInfoProc(Nullable<short> customerID, Nullable<short> areaID, Nullable<short> zoneID, Nullable<int> mID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(short));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(short));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(short));
    
            var mIDParameter = mID.HasValue ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<zzzParkingSpace>("zzzParkingInfoProc", customerIDParameter, areaIDParameter, zoneIDParameter, mIDParameter);
        }
    
        public virtual ObjectResult<zzParkingInfo_Result> zzParkingInfo(Nullable<short> customerID, Nullable<short> areaID, Nullable<short> zoneID, Nullable<int> mID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(short));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(short));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(short));
    
            var mIDParameter = mID.HasValue ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<zzParkingInfo_Result>("zzParkingInfo", customerIDParameter, areaIDParameter, zoneIDParameter, mIDParameter);
        }
    
        public virtual ObjectResult<zzzParkingSpace> zzParkingInfoProc(Nullable<short> customerID, Nullable<short> areaID, Nullable<short> zoneID, Nullable<int> mID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(short));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(short));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(short));
    
            var mIDParameter = mID.HasValue ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<zzzParkingSpace>("zzParkingInfoProc", customerIDParameter, areaIDParameter, zoneIDParameter, mIDParameter);
        }
    
        public virtual int sp_MeterGroups(Nullable<int> customerid)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MeterGroups", customeridParameter);
        }
    
        public virtual ObjectResult<GetLandingRevenue> sp_MeterGroupss(Nullable<int> customerid)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLandingRevenue>("sp_MeterGroupss", customeridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LandingEnforceableTest(Nullable<int> customerid, Nullable<System.DateTime> localTime)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var localTimeParameter = localTime.HasValue ?
                new ObjectParameter("LocalTime", localTime) :
                new ObjectParameter("LocalTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LandingEnforceableTest", customeridParameter, localTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_LandingSpaceStatusSensorTest(Nullable<int> customerid, Nullable<System.DateTime> localTime)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var localTimeParameter = localTime.HasValue ?
                new ObjectParameter("LocalTime", localTime) :
                new ObjectParameter("LocalTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_LandingSpaceStatusSensorTest", customeridParameter, localTimeParameter);
        }
    }
}
