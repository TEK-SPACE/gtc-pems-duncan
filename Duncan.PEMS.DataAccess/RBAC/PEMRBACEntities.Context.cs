//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Duncan.PEMS.DataAccess.RBAC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PEMRBACEntities : DbContext
    {
        public PEMRBACEntities()
            : base("name=PEMRBACEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AccessLog> AccessLogs { get; set; }
        public DbSet<AccessLogMembershipEvent> AccessLogMembershipEvents { get; set; }
        public DbSet<CustomerGrid> CustomerGrids { get; set; }
        public DbSet<CustomerProfile> CustomerProfiles { get; set; }
        public DbSet<CustomerReport> CustomerReports { get; set; }
        public DbSet<CustomerReportsAdHoc> CustomerReportsAdHocs { get; set; }
        public DbSet<CustomerReportsCategory> CustomerReportsCategories { get; set; }
        public DbSet<CustomerReportsSource> CustomerReportsSources { get; set; }
        public DbSet<CustomerSetting> CustomerSettings { get; set; }
        public DbSet<CustomerSettingsGroup> CustomerSettingsGroups { get; set; }
        public DbSet<CustomerSettingsGroupMember> CustomerSettingsGroupMembers { get; set; }
        public DbSet<CustomerSettingType> CustomerSettingTypes { get; set; }
        public DbSet<CustomerSettingTypeList> CustomerSettingTypeLists { get; set; }
        public DbSet<CustomerType> CustomerTypes { get; set; }
        public DbSet<ErrorMessage> ErrorMessages { get; set; }
        public DbSet<GridDefinition> GridDefinitions { get; set; }
        public DbSet<HelpMap> HelpMaps { get; set; }
        public DbSet<LocaleResource> LocaleResources { get; set; }
        public DbSet<LocaleResourcesCustom> LocaleResourcesCustoms { get; set; }
        public DbSet<LoginAttemptHistory> LoginAttemptHistories { get; set; }
        public DbSet<MaintenanceGroupCustomer> MaintenanceGroupCustomers { get; set; }
        public DbSet<MembershipEventType> MembershipEventTypes { get; set; }
        public DbSet<netsqlazman_StoreGroupsTable> netsqlazman_StoreGroupsTable { get; set; }
        public DbSet<netsqlazman_StoresTable> netsqlazman_StoresTable { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<NewsContent> NewsContents { get; set; }
        public DbSet<ResourceEvent> ResourceEvents { get; set; }
        public DbSet<ResourceEventType> ResourceEventTypes { get; set; }
        public DbSet<SystemInformation> SystemInformations { get; set; }
        public DbSet<CustomerTimeZone> CustomerTimeZones { get; set; }
        public DbSet<User_CustomerGrids> User_CustomerGrids { get; set; }
        public DbSet<UserCustomerAccess> UserCustomerAccesses { get; set; }
        public DbSet<UserPasswordHistory> UserPasswordHistories { get; set; }
        public DbSet<UserPasswordQuestion> UserPasswordQuestions { get; set; }
        public DbSet<UserProfile> UserProfiles { get; set; }
        public DbSet<UserSetting> UserSettings { get; set; }
        public DbSet<Membership> Memberships { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
    
        public virtual int ChangeStoreId(Nullable<int> originalId, Nullable<int> newId)
        {
            var originalIdParameter = originalId.HasValue ?
                new ObjectParameter("OriginalId", originalId) :
                new ObjectParameter("OriginalId", typeof(int));
    
            var newIdParameter = newId.HasValue ?
                new ObjectParameter("NewId", newId) :
                new ObjectParameter("NewId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeStoreId", originalIdParameter, newIdParameter);
        }
    
        public virtual int sp_RefreshCustomerGrids()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RefreshCustomerGrids");
        }
    
        public virtual int sp_ResetCustomerGrid(string customerId, string controller, string action)
        {
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResetCustomerGrid", customerIdParameter, controllerParameter, actionParameter);
        }
    
        public virtual int sp_UpdateCustomerGridEntry(Nullable<int> customerGridId, string title, Nullable<int> position, Nullable<bool> isHidden)
        {
            var customerGridIdParameter = customerGridId.HasValue ?
                new ObjectParameter("CustomerGridId", customerGridId) :
                new ObjectParameter("CustomerGridId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var isHiddenParameter = isHidden.HasValue ?
                new ObjectParameter("IsHidden", isHidden) :
                new ObjectParameter("IsHidden", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCustomerGridEntry", customerGridIdParameter, titleParameter, positionParameter, isHiddenParameter);
        }
    }
}
