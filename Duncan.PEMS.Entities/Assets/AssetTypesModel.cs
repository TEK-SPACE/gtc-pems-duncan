/******************* CHANGE LOG ***********************************************************************************************************************
 * DATE                 NAME                        DESCRIPTION
 * ___________          ___________________        ___________________________________________________________________________________________________
 * 
 * 12/20/2013       Sergey Ostrerov                Enhancement/Issue DPTXPEMS-14 - AssetID Change: Allow manually entering AssetID
 * 
 * *****************************************************************************************************************************************************/

using System;
using System.Collections.Generic;
using Duncan.PEMS.Entities.Enumerations;
using System.ComponentModel.DataAnnotations;

namespace Duncan.PEMS.Entities.Assets
{

    public class AssetTypeModel
    {
        public enum AssetType
        {
           // Space = 1, //** Sairam commented this on 1st oct 2014
            ParkingSpaces = 1,  //** Sairam added this on 1st oct 2014
            Gateway = 2,
            Sensor = 3,
            SingleSpaceMeter = 4,
            MultiSpaceMeter = 5,
            Cashbox = 6,
            Smartcard = 7,
            Mechanism = 8,
            DataKey = 9
        };

        public enum EnterMode
        {
            AutoGenerated = 1,
            ManuallyGenerated = 0,
        };

        public AssetType Type { get; set; }
        public string TypeValue { get { return ((int)Type).ToString(); } }
        public string Name { get; set; }

        public AssetTypeModel()
        {

        }

        public AssetTypeModel(AssetTypeModel assetTypeModel)
        {
            Type = assetTypeModel.Type;
            Name = assetTypeModel.Name;
        }

        public static AssetType GetAssetType(string assetType)
        {
            AssetType at;
            Enum.TryParse(assetType.Trim().Replace(" ", ""), out at);
            return at;
        }

        public static bool ConvertType(AssetType assetType, out MeterGroups? meterGroups)
        {
            meterGroups = null;
            switch (assetType)
            {
                case AssetType.Cashbox:
                    meterGroups = MeterGroups.Cashbox;
                    break;
                case AssetType.Gateway:
                    meterGroups = MeterGroups.Gateway;
                    break;
                case AssetType.MultiSpaceMeter:
                    meterGroups = MeterGroups.MultiSpaceMeter;
                    break;
                case AssetType.Sensor:
                    meterGroups = MeterGroups.Sensor;
                    break;
                case AssetType.SingleSpaceMeter:
                    meterGroups = MeterGroups.SingleSpaceMeter;
                    break;
                case AssetType.Mechanism:
                    meterGroups = MeterGroups.Mechanism;
                    break;
            }

            return meterGroups != null;
        }

        public static bool ConvertType(MeterGroups meterGroups, out AssetType? assetType)
        {
            assetType = null;
            switch (meterGroups)
            {
                case MeterGroups.Cashbox:
                    assetType = AssetType.Cashbox;
                    break;
                case MeterGroups.Gateway:
                    assetType = AssetType.Gateway;
                    break;
                case MeterGroups.MultiSpaceMeter:
                    assetType = AssetType.MultiSpaceMeter;
                    break;
                case MeterGroups.Sensor:
                    assetType = AssetType.Sensor;
                    break;
                case MeterGroups.SingleSpaceMeter:
                    assetType = AssetType.SingleSpaceMeter;
                    break;
                case MeterGroups.Mechanism:
                    assetType = AssetType.Mechanism;
                    break;
            }

            return assetType != null;
        }


    }

    public class AssetTypesModel
    //public class AssetTypesModel : IValidatableObject
    {
        public int CustomerId { get; set; }
        public int AreaId { get; set; }

        public List<AssetTypeModel> AssetTypes { get; set; }
        public int AssetTypesId { get; set; }

        // For multi-space meters
        public int StartBay { get; set; }
        public int EndBay { get; set; }

        public const string GroupName = "AssetType";
        public const string GroupNameMode = "EntryMode";

        public AssetTypesModel()
        {
            AssetTypes = new List<AssetTypeModel>();
        }

        // For AssetID manual Entry
        //[Required(ErrorMessage = "Asset ID may not be blank")]
        //[RegularExpression(@"[0-9]*\.?[0-9]+", ErrorMessage = "{0} must be a Number.")]
        //[StringLength(5)]
        public string AssetID { get; set; }
        public int isNewAsset { get; set; }

        //[Required(ErrorMessage = "Asset ID Confirm may not be blank")]
        public string AssetIDConfirm { get; set; }


        public int AssetMode { get; set; }

        //public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        //{
        //    List<ValidationResult> errors = new List<ValidationResult>();
        //    //errors.AddRange(base.Validate(validationContext));

        //     //AssetID
        //        if (string.IsNullOrWhiteSpace(AssetID))
        //        {
        //            errors.Add(new ValidationResult("Asset ID may not be blank", new[] { "AssetID" }));
        //        }
        //    return errors;
        //}

        //serial number for mechanisms
        public string SerialNumber { get; set; }

        public string LocationName { get; set; }
        public string MechSerialNo { get; set; }

    }


    public class AssetsUploadResultsModel
    {
        public int CustomerId { get; set; }
        public List<string> Results { get; set; }
        public List<string> Errors { get; set; }

        public string UploadedFileName { get; set; }

        public bool HasErrors { get { return Errors.Count > 0; } }

        public AssetsUploadResultsModel()
        {
            Results = new List<string>();
            Errors = new List<string>();
        }

        public bool isAssetIDValid { get; set; }
    }
}