using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Xml;
using Duncan.PEMS.DataAccess;
using Duncan.PEMS.DataAccess.RBAC;
using Duncan.PEMS.Entities.Audit;
using Duncan.PEMS.Entities.Customers;
using Duncan.PEMS.Entities.Roles;
using Duncan.PEMS.Entities.Users;
using Duncan.PEMS.Utilities;
using NLog;
using NetSqlAzMan;
using NetSqlAzMan.Cache;
using NetSqlAzMan.Interfaces;

namespace Duncan.PEMS.Security
{
    /// <summary>
    /// This class encapsulates Authorization functionality for PEMS resource access control.
    /// It presently uses NetSqlAzMan to provide the authorization services.  This class also provides the
    /// read/write functionality to process RBAC XML configuration files.
    /// </summary>
    public partial class AuthorizationManager
    {
        #region NLog Logger

        /// <summary>
        /// NLog logger instance.
        /// </summary>
        private static Logger _logger = LogManager.GetCurrentClassLogger();

        #endregion

        /// <summary>
        /// Storage context to access NetSqlAzMan API
        /// </summary>
        private IAzManStorage _storage = new SqlAzManStorage(ConfigurationManager.ConnectionStrings[Constants.Security.RbacConnectionStringName].ConnectionString);

        /// <summary>
        /// The name of the city as it is represented as a store in NetSqlAzman
        /// </summary>
        private string _storeName;

        /// <summary>
        /// The NetSqlAzMan store that represents the city
        /// </summary>
        private IAzManStore _store;

        /// <summary>
        /// The NetSqlAzMan store group that was most recently accessed.  Used for performance.
        /// </summary>
        private IAzManStoreGroup _activeStoreGroup;

        /// <summary>
        /// The NetSqlAzMan user that was most recently accessed.  Used for performance.
        /// </summary>
        private IAzManDBUser _activeUser;

        /// <summary>
        /// Property returning the city name that this Authorization instance is working with.
        /// </summary>
        public string City
        {
            get { return _storeName; }
        }

        /// <summary>
        /// Constructor to create an instance of AuthorizationManager for general use.
        /// </summary>
        public AuthorizationManager()
        {
        }

        /// <summary>
        /// Overloaded Constructor to create an instance of AuthorizationManager for a specific city.
        /// </summary>
        /// <param name="city">An instance of <see cref="PemsCity"/> that identifies the city against which
        /// authorization functions are applied and accessed. </param>
        public AuthorizationManager(PemsCity city)
        {
            _storeName = city.InternalName;
            _store = GetStore(_storeName);
        }

        /// <summary>
        /// Overloaded Constructor to create an instance of AuthorizationManager for a specific city.
        /// </summary>
        /// <param name="city">String that identifies the city against which
        /// authorization functions are applied and accessed. </param>
        public AuthorizationManager(string city)
        {
            _storeName = city;
            _store = GetStore(_storeName);
        }

        /// <summary>
        /// Determines if a user is in the authorization system
        /// </summary>
        /// <param name="userName">String representation of the user</param>
        /// <returns>True if user is in authorization system.  Not whether user is authorized.</returns>
        public bool InAuthorizationSystem(string userName)
        {
            return GetUser(userName) != null;
        }

        /// <summary>
        /// Soft-deletes a user from the authorization system
        /// </summary>
        /// <param name="userName">User to soft-delete</param>
        public void DeleteUser(string userName)
        {
            var user = GetUser(userName);
            if (user == null) return;
            _storage.OpenConnection();
            _storage.BeginTransaction();
            _storage.DBUsers[userName].CustomColumns[Constants.Security.ActiveUserAzManColumnName] = 0;
            _storage.CommitTransaction();
            _storage.CloseConnection();
        }

        #region Customers (Cities)

        /// <summary>
        /// Creates a new city in the authorization system.  Checks to see if this city already exists
        /// in the authorization system.  If not, creates the city and assigns it the given <paramref name="cityId"/> id
        /// by overwriting the id internally generated by the authorization system.
        /// </summary>
        /// <param name="cityId">Required int that matches PEMS database customer id</param>
        /// <param name="cityName">Internal name of city.  No spaces.</param>
        /// <param name="cityDescription">Optional city description.</param>
        /// <returns></returns>
        public bool CreateCity(int cityId, string cityName, string cityDescription)
        {
            bool cityCreated = false;

            // Make sure the city does not exist first.
            _store = GetStore(cityName);
            if (_store == null)
            {
                try
                {
                    _storage.OpenConnection();
                    _storage.BeginTransaction();
                    _store = _storage.CreateStore(cityName, cityDescription);
                    _storage.CommitTransaction();
                    _storage.CloseConnection();

                    // Call the 'ChangeStoreId' stored procedure.  
                    PEMRBACEntities entities = new PEMRBACEntities();
                    entities.ChangeStoreId(_store.StoreId, cityId);
                    cityCreated = true;
                }
                catch (Exception ex)
                {
                    if (_storage.TransactionInProgress)
                        _storage.RollBackTransaction();
                    _storage.CloseConnection();
                }
            }

            // Make this the active city for additional authorization actions.
            _storeName = cityCreated ? cityName : null;
            _store = cityCreated ? _store : null;

            return cityCreated;
        }


        /// <summary>
        /// Get a list of cities that username has authorizations to access
        /// </summary>
        /// <param name="username">Name of user</param>
        /// <returns>List of <see cref="PemsCity"/> that user can access.s</returns>
        public List<PemsCity> GetAuthorizedCities(string username)
        {
            var userStores = new List<PemsCity>();

            var user = GetUser(username);
            if (user == null)
                return userStores;
            foreach (var store in _storage.Stores)
            {
           //     if (store.Value.CheckStoreAccess(user, DateTime.Now, null))
                {
                    userStores.Add(new PemsCity(store.Value.Name));
                }
            }
            return userStores;
        }

        public List<string> GetStores()
        {
            return _storage.GetStores().Select(s => s.Name).ToList();
        }


        #endregion

        #region Authorization Tree List


        private Dictionary<string, List<string>> _requiredAuthorizations = null;

        /// <summary>
        /// Generate a dictionary of required authorizations from web.config.  Find all appSettings that begin with 
        /// <see cref="Constants.Security.RequiredAuthorizationsTemplate"/> and end in a 1 to n.  These required
        /// authorizations will cause the Create Roles to have defaulted authorizations.
        /// </summary>
        private void PopulateRequiredAuthorizations()
        {
            _requiredAuthorizations = new Dictionary<string, List<string>>();

            // Walk each web.config app setting that starts with Constants.Security.RequiredAuthorizationsTemplate
            int requiredAuthAppSettingIndex = 1;
            string requiredAuthorizationPair = null;
            do
            {
                requiredAuthorizationPair = ConfigurationManager.AppSettings[Constants.Security.RequiredAuthorizationsTemplate + requiredAuthAppSettingIndex.ToString()];
                if ( !string.IsNullOrWhiteSpace( requiredAuthorizationPair ) )
                {
                    string[] tokens = requiredAuthorizationPair.Split( '|' );
                    if ( tokens.Length == 2 )
                    {
                        if ( !_requiredAuthorizations.ContainsKey( tokens[0] ) )
                        {
                            _requiredAuthorizations[tokens[0]] = new List<string>();
                        }
                        if ( !_requiredAuthorizations[tokens[0]].Contains( tokens[1] ) )
                        {
                            _requiredAuthorizations[tokens[0]].Add( tokens[1] );
                        }
                    }
                }
                requiredAuthAppSettingIndex++;
            } while (!string.IsNullOrWhiteSpace( requiredAuthorizationPair ));
        }


        private bool IsRequiredAuthorization(string appAuthText, string itemAuthText)
        {
            bool isRequired = false;

            if ( _requiredAuthorizations == null )
            {
                PopulateRequiredAuthorizations();
            }

            if ( _requiredAuthorizations.ContainsKey( appAuthText ) )
            {
                isRequired = _requiredAuthorizations[appAuthText].Contains( itemAuthText );
            }

            return isRequired;
        }






        /// <summary>
        /// Get a list of <see cref="AuthorizationItem"/> representing authorization settings
        /// available for any city group.
        /// </summary>
        /// <returns>A list of <see cref="AuthorizationItem"/></returns>
        public List<AuthorizationItem> GetAuthorizationList()
        {
            List<AuthorizationItem> authList = new List<AuthorizationItem>();
            AuthorizationItem authItem;

            // Get all authorization items
            // Walk all applications and see if there is attribute called Constants.Menu.AuthText
            // If there is one then add that as an AuthorizationItem
            foreach (var app in _store.Applications)
            {
                if (app.Value.Attributes.ContainsKey(Constants.Menu.AuthText))
                {
                    string appAuthText = app.Value.Attributes[Constants.Menu.AuthText].Value;
                    authItem = new AuthorizationItem()
                        {
                            Name = appAuthText,
                            Required = false,
                            Id = app.Value.ApplicationId
                        };
                    authList.Add(authItem);

                    // Walk each application's Roles and see if is attribute called Constants.Menu.AuthText
                    foreach (var item in app.Value.Items.Where(item => item.Value.ItemType == ItemType.Role))
                    {
                        // Only add if Constants.Menu.AuthText attribute exists.
                        if (item.Value.Attributes.ContainsKey(Constants.Menu.AuthText))
                        {
                            string itemAuthText = item.Value.Attributes[Constants.Menu.AuthText].Value;
                            bool isRequired = IsRequiredAuthorization( appAuthText, itemAuthText );
                            authItem.Add(new AuthorizationItem()
                                {
                                    Name = itemAuthText,
                                    Authorized = isRequired,
                                    Required = isRequired,
                                    Id = item.Value.ItemId
                                });
                        }
                    }
                }
            }

            return authList;
        }

        /// <summary>
        /// Get a list of <see cref="AuthorizationItem"/> representing authorization settings
        /// for city group name <see cref="groupName"/>
        /// </summary>
        /// <param name="groupName">String name of a city group</param>
        /// <returns>A list of <see cref="AuthorizationItem"/></returns>
        public List<AuthorizationItem> GetAuthorizationList(string groupName)
        {
            List<AuthorizationItem> authList = new List<AuthorizationItem>();
            AuthorizationItem authItem;

            // Get a representative user to use to check authorizations.
            if (!_store.StoreGroups.ContainsKey(groupName))
                return null;
            IAzManStoreGroup storeGroup = _store.StoreGroups[groupName];

            // Get all authorization items
            // Walk all applications and see if there is attribute called Constants.Menu.AuthText
            // If there is one then add that as an AuthorizationItem
            foreach (var app in _store.Applications)
            {
                if (app.Value.Attributes.ContainsKey(Constants.Menu.AuthText))
                {
                    string appAuthText = app.Value.Attributes[Constants.Menu.AuthText].Value;
                    bool topLevelAuthorized = true;
                    authItem = new AuthorizationItem()
                        {
                            Name = appAuthText,
                            Required = false,
                            Id = app.Value.ApplicationId
                        };
                    authList.Add(authItem);

                    // Walk each application's Roles and see if is attribute called Constants.Menu.AuthText
                    foreach (var item in app.Value.Items.Where(item => item.Value.ItemType == ItemType.Role))
                    {
                        if ( item.Value.Attributes.ContainsKey( Constants.Menu.AuthText ) )
                        {
                            string itemAuthText = item.Value.Attributes[Constants.Menu.AuthText].Value;
                            AuthorizationItem authItemChild = new AuthorizationItem()
                                {
                                    Name = itemAuthText,
                                    Required = IsRequiredAuthorization( appAuthText, itemAuthText ),
                                    Id = item.Value.ItemId
                                };

                            var authOfRole = item.Value.GetAuthorizationsOfMember( storeGroup.SID );
                            if ( authOfRole != null && authOfRole.Any() )
                            {
                                authItemChild.Authorized = authOfRole[0].AuthorizationType == AuthorizationType.Allow;
                            }
                            else
                            {
                                // Since there was not any authorization assigned to the "Role" attribute
                                // check the children Operations.
                                foreach (var op in item.Value.Members.Where( op => op.Value.ItemType == ItemType.Operation ))
                                {
                                    authOfRole = op.Value.GetAuthorizationsOfMember( storeGroup.SID );
                                    if ( authOfRole != null && authOfRole.Any() )
                                    {
                                        authItemChild.Authorized = authOfRole[0].AuthorizationType == AuthorizationType.Allow;
                                    }
                                }
                            }

                            // If this authorization group is required then force authItemChild.Authorized to true.
                            if ( authItemChild.Required )
                            {
                                authItemChild.Authorized = true;
                            }

                            authItem.Add( authItemChild );
                            topLevelAuthorized = topLevelAuthorized && authItemChild.Authorized;
                        }
                    }
                    // Set the parent Authorized flag
                    authItem.Authorized = topLevelAuthorized;
                }
            }

            return authList;
        }

        /// <summary>
        /// Assigns authorization rights to <see cref="groupName"/> as indicated by
        /// <see cref="authList"/>.  Only affects authorization settings that are 
        /// referenced in <see cref="authList"/>.
        /// 
        /// It is suggested that the list of authorizations (<see cref="authList"/>) be a list that was
        /// aquired from a call to either version of <see cref="GetAuthorizationList()"/>
        /// </summary>
        /// <param name="groupName">String name of the City role</param>
        /// <param name="authList">List of <see cref="AuthorizationItem"/> </param>
        public int SaveAuthorizationList(string groupName, List<AuthorizationItem> authList)
        {

            if (!_store.StoreGroups.ContainsKey(groupName))
                CreateGroup(groupName, null);

            IAzManStoreGroup storeGroup = _store.StoreGroups[groupName];

            // Walk all applications then walk all application roles and operation
            foreach (AuthorizationItem authItem in authList)
            {
                // Find the Application Constants.Menu.AuthText that matches authItemName
                foreach (var app in _store.Applications)
                {
                    if (app.Value.Attributes.ContainsKey(Constants.Menu.AuthText))
                    {
                        if (app.Value.Attributes[Constants.Menu.AuthText].Value.Equals(authItem.Name, StringComparison.CurrentCultureIgnoreCase))
                        {
                            // This is correct application
                            SetApplicationAuthorization(app.Value, storeGroup, authItem);
                        }
                    }
                }
            }
            return storeGroup.StoreGroupId;

        }


        public int CreateAuthorizationList(string groupName, List<AuthorizationItem> authList)
        {

            if (!_store.StoreGroups.ContainsKey(groupName))
                CreateGroup(groupName, null);

            return SaveAuthorizationList(groupName, authList);

        }


        private void SetApplicationAuthorization(IAzManApplication app, IAzManStoreGroup storeGroup, List<AuthorizationItem> authList)
        {
            string appAuthText = app.Attributes[Constants.Menu.AuthText].Value;

            // Walk each AuthorizationItem in authList and set/clear authorization for storeGroup as indicated.

            foreach (AuthorizationItem authItem in authList)
            {
                // Walk each application's Roles and see if is attribute called Constants.Menu.AuthText
                foreach (var item in app.Items.Where(item => item.Value.ItemType == ItemType.Role))
                {
                    // Does this role have an attribute called Constants.Menu.AuthText
                    if (item.Value.Attributes.ContainsKey(Constants.Menu.AuthText))
                    {
                        // Enforce defaulting of Authorizations.
                        if ( !authItem.Authorized )
                        {
                            authItem.Authorized = IsRequiredAuthorization( appAuthText, authItem.Name );
                        }


                        if (item.Value.Attributes[Constants.Menu.AuthText].Value.Equals(authItem.Name, StringComparison.CurrentCultureIgnoreCase))
                        {
                            // Does this role already have authorization settings
                            var authOfRole = item.Value.GetAuthorizationsOfMember(storeGroup.SID);
                            if (authOfRole != null && authOfRole.Any())
                            {
                                authOfRole[0].Update(authOfRole[0].Owner, storeGroup.SID,
                                    WhereDefined.Store, authItem.Authorized ? AuthorizationType.Allow : AuthorizationType.Neutral,
                                                                    null,
                                                                    null);
                            }
                            else
                            {
                                // Set/clear authorization on this item
                                item.Value.CreateAuthorization(SqlAzManSID.NewSqlAzManSid(), WhereDefined.Local,
                                                                   storeGroup.SID,
                                                                    WhereDefined.Store,
                                                                    authItem.Authorized ? AuthorizationType.Allow : AuthorizationType.Neutral,
                                                                    null,
                                                                    null);
                            }
                        }
                    }
                }
            }

        }

        /// <summary>
        /// Given an existing group, create a new group with the same authorization settings.
        /// </summary>
        /// <param name="groupNameFrom">Name of existing group to create from.</param>
        /// <param name="groupNameTo">Name of new group.</param>
        public int CloneAuthorizationList(string groupNameFrom, string groupNameTo)
        {
            CreateGroup(groupNameTo, null);

            return SaveAuthorizationList(groupNameTo, GetAuthorizationList(groupNameFrom));
        }


        /// <summary>
        /// Delete a group from the customer (store)
        /// </summary>
        /// <param name="groupName">Name of group to delete.</param>
        public void DeleteGroup(string groupName)
        {
            if (!_store.StoreGroups.ContainsKey(groupName))
                return;

            IAzManStoreGroup storeGroup = _store.StoreGroups[groupName];

            // Remove any user members.
            foreach (var member in storeGroup.Members)
            {
                member.Value.Delete();
            }


            // Walk store applications and remove authorizations from application items
            // for this store group.

            foreach (var app in _store.Applications)
            {
                foreach (var item in app.Value.Items)
                {
                    // Does this item have authorization to this 'groupName'
                    var authorizationList = item.Value.GetAuthorizationsOfMember(storeGroup.SID);
                    foreach (var azManAuthorization in authorizationList)
                    {
                        azManAuthorization.Delete();
                    }
                }
            }

            // Remove store group.
            storeGroup.Delete();

        }


        #endregion

        #region Authorization Groups

        public Dictionary<string, int> GetStoreGroups(string storeName)
        {
            var groups = AzManGetStoreGroups(storeName);
            return groups != null ? groups.ToDictionary(x => x.Name, x => x.StoreGroupId) : null;
        }

        public Dictionary<string, bool> GetStoreGroupsForUser(string storeName, string username)
        {
            //get the groups for this store
            var groups = AzManGetStoreGroups(storeName);
            if (groups == null)
                return null;

            //get the user
            var user = GetUser(username);
            if (user == null)
                return null;

            return groups.ToDictionary(x => x.Name, x => x.IsInGroup(user));
        }

        public string GetStoreGroupForUser(string storeName, string username)
        {
            //get the groups for this store
            var groups = AzManGetStoreGroups(storeName);
            if (groups == null)
                return null;

            //get the user
            var user = GetUser(username);
            if (user == null)
                return null;

            //now we have the store groups and users, return a dictionary with the store name and if the user has access
            var group = groups.Where(x => !x.Name.StartsWith(Constants.Security.DefaultGroupNamePrefix)).FirstOrDefault(x => x.IsInGroup(user));

            if (group != null)
                return group.Name;
            return "N/A";
        }


        internal void DeleteStoreGroup(string storeName, string groupName)
        {
            try
            {
                _storage.OpenConnection();
                _storage.BeginTransaction();
                _storage.Stores[storeName].StoreGroups[groupName].Delete();
                _storage.CommitTransaction();
                _storage.CloseConnection();
            }

            catch (Exception ex)
            {
                if (_storage.TransactionInProgress)
                    _storage.RollBackTransaction();
                _storage.CloseConnection();
            }
        }

        #endregion

        #region Access

        /// <summary>
        /// Adds the user to the currently assigned store into the caching table
        /// </summary>
        /// <param name="userId"></param>
        public void AddCustomerAccess(int userId)
        {
            if (_store != null)
            {
                var ucaManager = new UserCustomerAccessManager();
                ucaManager.AddCustomerAccess(userId, _store.StoreId);
            }
        }

        /// <summary>
        ///Removes all customer access for a specific user. 
        /// </summary>
        /// <param name="userId">ID of the user to remove customer access from.</param>
        public void ClearCustomerAccess(int userId)
        {
            var ucaManager = new UserCustomerAccessManager();
            ucaManager.ClearCustomerAccess(userId);
        }

        #endregion

        #region Store Group Members

        /// <summary>
        /// Add a user to a city authorization group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="userName">The name of the user</param>
        /// <returns>Returns true if user added.</returns>
        public bool AddGroupMember(string groupName, string userName, bool autoCreate = true)
        {
            var user = GetUser(userName);
            if (user == null)
                return false;

            var storeGroup = GetGroup(groupName);
            if (autoCreate && storeGroup == null)
                storeGroup = CreateGroup(groupName, string.Empty);

            //make sure the group exists
            if (storeGroup == null)
                return false;

            //if the user doesn't already exist in this group, add them.
            if (!storeGroup.IsInGroup(user))
                return storeGroup.CreateStoreGroupMember(user.CustomSid, WhereDefined.Database, true) != null;
            //otherwise, return that user
            return storeGroup.GetStoreGroupMember(user.CustomSid) != null;
        }


        /// <summary>
        /// Removes a user from a city authorization group.
        /// </summary>
        /// <param name="groupName">Group name</param>
        /// <param name="userName">User name</param>
        public void RemoveGroupMember(string groupName, string userName)
        {
            //does the user exist
            var user = GetUser(userName);
            if (user == null)
                return;

            //make sure the store group exists
            var storeGroup = GetGroup(groupName);
            if (storeGroup == null)
                return;

            DeleteGroupMember(groupName, user);
        }

        /// <summary>
        /// Removes a user from all the groups for the city
        /// </summary>
        /// <param name="userName">User name</param>
        public void RemoveMemberGroups(string userName, bool removeDefaultGroups = false)
        {
            //does the user exist
            var user = GetUser(userName);
            if (user == null)
                return;
            //make sure the store groups exists
            var currentcityGroups = AzManGetStoreGroups(_store.Name);
            if (currentcityGroups == null) return;
            //remove all the groups that this user is assigned to.
            foreach (var currentcityGroup in currentcityGroups)
            {
                //dont remove the default group if you dont need to
                if (removeDefaultGroups == false)
                {
                    if (currentcityGroup.Name.StartsWith(Constants.Security.DefaultGroupNamePrefix) == false)
                        DeleteGroupMember(currentcityGroup.Name, user);
                }
                else
                    DeleteGroupMember(currentcityGroup.Name, user);
            }
        }

        /// <summary>
        /// Removes a user from all the groups for the city
        /// </summary>
        /// <param name="userName">User name</param>
        public void RemoveMemberFromMaintenanceGroup(string userName)
        {
            //does the user exist
            var user = GetUser(userName);
            if (user == null)
                return;
            //make sure the store groups exists
            var currentcityGroups = AzManGetStoreGroups(_store.Name);
            if (currentcityGroups == null) return;

            DeleteGroupMember(Constants.Security.DefaultMaintenanceGroupName, user);
        }

        /// <summary>
        /// deletes the user fromt he specified group
        /// </summary>
        /// <param name="groupName"></param>
        /// <param name="user"></param>
        private void DeleteGroupMember(string groupName, IAzManDBUser user)
        {
            try
            {
                _storage.OpenConnection();
                _storage.BeginTransaction();
                _store.StoreGroups[groupName].GetStoreGroupMember(user.CustomSid).Delete();
                _storage.CommitTransaction();
                _storage.CloseConnection();
            }

            catch (Exception ex)
            {
                if (_storage.TransactionInProgress)
                    _storage.RollBackTransaction();
                _storage.CloseConnection();
            }
        }

        #endregion

        #region Access Rights

        public enum AccessRights
        {
            /// <summary>
            /// Access rights denied because cookie city and url city do not match.
            /// </summary>
            DeniedWrongCity = -5,
            DeniedNoCity = -4,
            DeniedBadUserName = -3,
            DeniedNoCookie = -2,
            DeniedRBAC = -1,
            Allowed = 0,
            UndefinedAction = 1,
            UndefinedAjax = 2
        }

        /// <summary>
        /// Checks to see if the current user has access to the requested resource
        /// </summary>
        /// <param name="city">A <see cref="PemsCity"/> instance pointing to a city.</param>
        /// <param name="controller">The name of the controller</param>
        /// <param name="action">The name of the action</param>
        /// <param name="username">The user name</param>
        /// <returns>Returns an enumeration.  <see cref="AccessRights"/></returns>
        public AccessRights CheckAccess(PemsCity city, string controller, string action, string username)
        {
            if (city == null)
                return AccessRights.UndefinedAjax;

            try
            {
                var user = GetUser(username);
                if (user == null)
                    return AccessRights.DeniedRBAC;

                var authorization = _storage.CheckAccess(city.InternalName, controller, action, user, DateTime.Now, true);
                return authorization == AuthorizationType.Allow ? AccessRights.Allowed : AccessRights.DeniedRBAC;
            }
            catch (Exception)
            {
                return AccessRights.UndefinedAction;
            }
        }

        #endregion

        #region NetSqlAzMan-specific functions.

        private IAzManStore GetStore(string storeName)
        {
            try
            {
                return _storage.GetStore(storeName);
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private IAzManDBUser GetUser(string userName)
        {
            if (_activeUser == null || !_activeUser.UserName.Equals(userName, StringComparison.CurrentCultureIgnoreCase))
            {
                try
                {

                    _activeUser = _storage.GetDBUser(userName);
                }
                catch (Exception)
                {
                    _activeUser = null;
                }
            }
            return _activeUser;
        }

        /// <summary>
        /// gets a list of stores for this user that they reside in the _members group
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        public List<string> GetStoresForUser(string username)
        {
            var stores = new List<string>();
            //get all the users in the system and check access to see if they have access to the "_members" group for this store
            var user = GetUser(username);
            if (user != null)
            {

                foreach (var store in _storage.Stores)
                {
                    var group = GetStoreGroup(store.Value.Name, Constants.Security.DefaultStoreGroupName);
                    if (group != null)
                    {
                        if (group.IsInGroup(user))
                        {
                            //dont add them twice
                            if (!stores.Contains(store.Value.Name))
                                stores.Add(store.Value.Name);
                        }
                    }
                }

            }
            return stores;
        }


        public List<string> GetUsersForStore(string storeName)
        {
            var userNames = new List<string>();
            //get all the users in the system and check access to see if they have access to the "_members" group for this store
            var store = GetStore(storeName);
            if (store != null)
            {
                var group = GetStoreGroup(storeName, Constants.Security.DefaultStoreGroupName);
                if (group != null)
                {
                    //get all the users
                    var users = _storage.GetDBUsers();
                    //if they have access, add them
                    if (users != null)
                    {
                        foreach (var user in users)
                        {
                            if (group.IsInGroup(user))
                            {
                                //dont add them twice
                                if (!userNames.Contains(user.UserName))
                                    userNames.Add(user.UserName);
                            }
                        }

                    }
                }
            }
            return userNames;
        }

        public List<string> GetMaintenanceUsersForStore(string storeName)
        {
            var userNames = new List<string>();
            //get all the users in the system and check access to see if they have access to the "_members" group for this store
            var store = GetStore(storeName);
            if (store != null)
            {
                var group = GetStoreGroup(storeName, Constants.Security.DefaultMaintenanceGroupName);
                if (group != null)
                {
                    //get all the users
                    var users = _storage.GetDBUsers();
                    //if they have access, add them
                    if (users != null)
                    {
                        foreach (var user in users)
                        {
                            if (group.IsInGroup(user))
                            {
                                //dont add them twice
                                if (!userNames.Contains(user.UserName))
                                    userNames.Add(user.UserName);
                            }
                        }

                    }
                }
            }
            return userNames;
        }

        public bool DoesGroupExist(string groupName)
        {

            // Does the group already exist?
            try
            {
                _activeStoreGroup = _store.GetStoreGroup(groupName);
            }
            catch (Exception)
            {
                return false;
            }
            return true;
        }


        public IAzManStoreGroup GetGroup(string groupName)
        {
            if (_activeStoreGroup == null || !_activeStoreGroup.Name.Equals(groupName, StringComparison.CurrentCultureIgnoreCase))
            {
                // Does the group already exist?
                try
                {
                    _activeStoreGroup = _store.GetStoreGroup(groupName);
                }
                catch (Exception)
                {
                    // Do nothing.  This will be hit if group does not exisy.
                    _activeStoreGroup = null;
                }
            }

            return _activeStoreGroup;
        }


        public IAzManStoreGroup CreateGroup(string groupName, string groupDescription)
        {
            // Have I recently accessed this store group?
            IAzManStoreGroup group = GetGroup(groupName);

            if (group == null)
            {
                try
                {
                    _storage.OpenConnection();
                    _storage.BeginTransaction();
                    group = _store.CreateStoreGroup(SqlAzManSID.NewSqlAzManSid(),
                                                              groupName,
                                                              groupDescription ?? "",
                                                              string.Empty,
                                                              GroupType.Basic);
                    _storage.CommitTransaction();
                    _storage.CloseConnection();

                }
                catch (Exception ex)
                {
                    if (_storage.TransactionInProgress)
                        _storage.RollBackTransaction();
                    _storage.CloseConnection();
                }
            }
            return _activeStoreGroup = group;
        }



        private List<IAzManStoreGroup> AzManGetStoreGroups(string storeName)
        {
            var store = GetStore(storeName);
            if (store == null)
                return null;

            try
            {
                //now get the store group
                return store.GetStoreGroups().ToList();
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        private IAzManStoreGroup GetStoreGroup(string storeName, string groupName)
        {
            //get the store
            var store = GetStore(storeName);
            if (store == null)
                return null;

            try
            {
                //now get the store group
                return store.GetStoreGroup(groupName);
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        private IAzManStoreGroup UpdateStoreGroup(string storeName, string groupName, string newName,
                                                   string newDescription)
        {
            //make sure the store exists
            var store = GetStore(storeName);
            if (store == null)
                return null;

            //make sure the store group exists
            var storeGroup = GetStoreGroup(storeName, groupName);
            if (storeGroup == null)
                return null;

            //once we know they both exists, update the group

            try
            {
                _storage.OpenConnection();
                _storage.BeginTransaction();
                _storage.Stores[storeName].StoreGroups[groupName].Update(newDescription, GroupType.Basic);
                _storage.Stores[storeName].StoreGroups[groupName].Rename(newName);
                _storage.CommitTransaction();
                _storage.CloseConnection();
                return GetStoreGroup(storeName, newName);
            }
            catch (Exception ex)
            {
                if (_storage.TransactionInProgress)
                    _storage.RollBackTransaction();
                _storage.CloseConnection();
            }
            return null;
        }


        private IAzManApplication AzManCreateApplication(string applicationName, string applicationDescription)
        {
            // Does application already exist?
            if (_store.Applications.ContainsKey(applicationName))
                return _store.Applications[applicationName];

            // Create the application
            return _store.CreateApplication(applicationName, applicationDescription ?? "");
        }


        private IAzManApplication AzManGetApplication(string applicationName)
        {
            // Does application exist?
            if (!_store.Applications.ContainsKey(applicationName))
            {
                return null;
            }
            else
            {
                return _store.Applications[applicationName];
            }

        }


        private void AzManDeleteApplication(string applicationName)
        {
            List<IAzManItem> items = new List<IAzManItem>();

            // Does application exist?
            if (!_store.Applications.ContainsKey(applicationName))
                return;

            // Walk the application and remove all Authorizations from all Roles, Tasks and Operations
            foreach (var item in _store.Applications[applicationName].Items)
            {
                AzManRemoveAnyAuthorizations(item.Value);
                AzManRemoveAnyMembers(item.Value);
                AzManRemoveAnyAttributes(item.Value);
                items.Add(item.Value);
            }

            foreach (var azManItem in items)
            {
                azManItem.Delete();
            }


            _store.Applications[applicationName].Delete();


        }


        private IAzManItem AzManCreateOperation(string applicationName, string operationName, string operationDescription)
        {
            IAzManItem operation = null;

            IAzManApplication application = null;

            try
            {
                application = _store.GetApplication(applicationName);
            }
            catch (Exception)
            {
                application = null;
            }

            // Does application already exist?
            if (application == null)
                return null;


            // Get operation if it exists.
            try
            {
                IAzManItem[] items = application.GetItems();
                operation = items.FirstOrDefault(m => m.Name.Equals(operationName) && m.ItemType == ItemType.Operation);
            }
            catch (Exception ex)
            {
                operation = null;
            }


            // Does this operation already exist?
            if (operation == null)
            {
                try
                {
                    operation = application.CreateItem(operationName, operationDescription ?? "", ItemType.Operation);
                }
                catch (Exception)
                {
                    operation = null;
                }
            }


            return operation;

        }

        private IAzManItem AzManGetOperation(string applicationName, string operationName)
        {
            IAzManItem operation = null;

            // Does application already exist?
            if (_store.Applications.ContainsKey(applicationName))
            {
                // Does this operation already exist?
                if (_store.Applications[applicationName].Items.ContainsKey(operationName))
                {
                    operation = _store.Applications[applicationName].Items[operationName];
                    operation = operation.ItemType == ItemType.Operation ? operation : null;
                }
            }

            return operation;
        }

        private void AzManDeleteOperation(string applicationName, string operationName)
        {
            IAzManItem operationItem = null;

            // Does application already exist?
            if (!_store.Applications.ContainsKey(applicationName))
                return;


            // Walk all Roles and Tasks to see if Operation is a child.  If so, remove it.
            foreach (var item in _store.Applications[applicationName].Items.Where(item => item.Value.ItemType != ItemType.Operation))
            {
                operationItem = null;
                foreach (var operation in item.Value.Members.Where(childItem => childItem.Value.ItemType == ItemType.Operation))
                {
                    if (operation.Value.Name == operationName)
                    {
                        operationItem = operation.Value;
                        break;
                    }
                }
                if (operationItem != null)
                {
                    item.Value.RemoveMember(operationItem);
                }
            }

            // Remove the Operation
            if (_store.Applications[applicationName].Items.ContainsKey(operationName))
            {
                operationItem = _store.Applications[applicationName].Items[operationName];
                operationItem.Delete();
            }


        }

        private IAzManItem AzManGetRole(string applicationName, string roleName)
        {
            IAzManItem role = null;

            // Does application already exist?
            if (_store.Applications.ContainsKey(applicationName))
            {
                // Does this operation already exist?
                if (_store.Applications[applicationName].Items.ContainsKey(roleName))
                {
                    role = _store.Applications[applicationName].Items[roleName];
                    role = role.ItemType == ItemType.Role ? role : null;
                }
            }

            return role;
        }


        private IAzManItem AzManCreateRole(string applicationName, string roleName, string roleDescription)
        {
            IAzManItem role = null;

            // Does application already exist?
            if (!_store.Applications.ContainsKey(applicationName))
                return null;

            // Does this operation already exist?
            if (!_store.Applications[applicationName].Items.ContainsKey(roleName))
            {
                try
                {
                    role = _store.Applications[applicationName].CreateItem(roleName, roleDescription ?? "", ItemType.Role);
                }
                catch (Exception)
                {
                    role = null;
                }
            }
            else
            {
                role = _store.Applications[applicationName].Items[roleName];
            }

            return role;

        }


        private void AzManDeleteRole(string applicationName, string roleName)
        {
            // Does application already exist?
            if (!_store.Applications.ContainsKey(applicationName))
                return;

            // Get the role item
            IAzManItem roleItem = _store.Applications[applicationName].Items.FirstOrDefault(item => item.Value.Name.Equals(roleName) && item.Value.ItemType == ItemType.Role).Value;
            if ( roleItem == null )
                return;

            // Remove all authorizations from this role.
            AzManRemoveAnyAuthorizations( roleItem );

            // Now delete this role.
            roleItem.Delete();
        }



        private IAzManItem AzManGetTask(string applicationName, string taskName)
        {
            IAzManItem task = null;

            // Does application already exist?
            if (_store.Applications.ContainsKey(applicationName))
            {
                // Does this operation already exist?
                if (_store.Applications[applicationName].Items.ContainsKey(taskName))
                {
                    task = _store.Applications[applicationName].Items[taskName];
                    task = task.ItemType == ItemType.Task ? task : null;
                }
            }

            return task;
        }


        private void AzManDeleteTask(string applicationName, string taskName)
        {
            // Does application already exist?
            if (_store.Applications.ContainsKey(applicationName))
            {
                // Does this operation already exist?
                if (_store.Applications[applicationName].Items.ContainsKey(taskName))
                {
                    IAzManItem task = _store.Applications[applicationName].Items[taskName];
                    if (task.ItemType == ItemType.Task)
                    {
                        if (_store.Applications[applicationName].Items.Remove(taskName))
                        {
                            task.Delete();
                        }
                    }
                }
            }
        }



        private IAzManItem AzManCreateTask(string applicationName, string taskName, string taskDescription)
        {
            IAzManItem task = null;

            // Does application already exist?
            if (!_store.Applications.ContainsKey(applicationName))
                return null;

            // Does this operation already exist?
            if (!_store.Applications[applicationName].Items.ContainsKey(taskName))
            {
                try
                {
                    task = _store.Applications[applicationName].CreateItem(taskName, taskDescription ?? "", ItemType.Task);
                }
                catch (Exception)
                {
                    task = null;
                }
            }
            else
            {
                task = _store.Applications[applicationName].Items[taskName];
                task = task.ItemType == ItemType.Task ? task : null;
            }

            return task;

        }


        private void AzManRemoveAnyAuthorizations(IAzManItem item)
        {
            List<IAzManAuthorization> list = new List<IAzManAuthorization>();
            foreach (var authorization in item.Authorizations)
            {
                list.Add(authorization);
            }
            foreach (var azManAuthorization in list)
            {
                azManAuthorization.Delete();
            }
        }

        private void AzManRemoveAnyMembers(IAzManItem item)
        {
            List<IAzManItem> list = new List<IAzManItem>();
            foreach (var memberItem in item.Members)
            {
                list.Add(memberItem.Value);
            }
            foreach (var azManItem in list)
            {
                item.RemoveMember(azManItem);
            }
        }


        private void AzManRemoveAnyMembers(IAzManItem item, ItemType itemTypeToRemove)
        {
            List<IAzManItem> list = new List<IAzManItem>();
            foreach (var memberItem in item.Members)
            {
                if (memberItem.Value.ItemType == itemTypeToRemove)
                    list.Add(memberItem.Value);
            }
            foreach (var azManItem in list)
            {
                item.RemoveMember(azManItem);
            }
        }



        private void AzManRemoveAnyAttributes(IAzManItem item)
        {
            List<IAzManAttribute<IAzManItem>> list = new List<IAzManAttribute<IAzManItem>>();
            List<string> keyList = new List<string>();
            foreach (var attribute in item.Attributes)
            {
                list.Add(attribute.Value);
                keyList.Add(attribute.Key);
            }
            foreach (var attributeKey in keyList)
            {
                item.Attributes.Remove(attributeKey);
            }
            foreach (var azManAttribute in list)
            {
                azManAttribute.Delete();
            }
        }


        private void AzManSetItemParent(IAzManItem parentItem, IAzManItem childItem)
        {
            if (parentItem == null || childItem == null)
                return;

            // Is child already associated with parent?
            if (parentItem.Members.ContainsKey(childItem.Name))
                return;

            // Add child.
            parentItem.AddMember(childItem);

        }

        private void AzManAddAttribute(IAzManItem item, string attributeName, string attributeValue)
        {
            if (item == null)
                return;

            // Does attribute exists?
            // NOTE:  There is a bug in NetSqlAzMan where newly added attributes do not show in the IAzManItem attribute dictionary.
            // This check does not work.  Perhaps in a later version of NetSqlAzMan.

            IAzManAttribute<IAzManItem> attribute = null;

            try
            {
                attribute = item.GetAttribute(attributeName);
            }
            catch (Exception)
            {
                attribute = null;
            }


//            if (item.Attributes.ContainsKey(attributeName))
            if (attribute != null)
            {
                attribute.Update(attributeName, attributeValue);
//                item.Attributes[attributeName].Update(attributeName, attributeValue);
            }
            else
            {
                item.CreateAttribute(attributeName, attributeValue);
            }

        }

        private void AzManAddAttribute(IAzManItem item, string attributeName, int attributeValue)
        {
            AzManAddAttribute(item, attributeName, attributeValue.ToString());
        }

        private void AzManRemoveAttribute(IAzManItem item, string attributeName)
        {
            if (item == null)
                return;

            // Does attribute exists?
            if (item.Attributes.ContainsKey(attributeName))
            {
                IAzManAttribute<IAzManItem> azManAttribute = item.Attributes[attributeName];
                if (azManAttribute != null)
                    azManAttribute.Delete();
            }
        }


        #endregion

        #region

        /// <summary>
        /// Checks whether a user has rights to the indicated controller/action resource.  The "store"
        /// has already been set by the constructor to <see cref="AuthorizationManager"/>.
        /// </summary>
        /// <param name="userName">User name</param>
        /// <param name="actionName">Controller action name</param>
        /// <param name="controllerName">Controller name</param>
        /// <returns>True if <paramref name="userName"/> has rights to resource.</returns>
        public bool IsAuthorized(string userName, string actionName, string controllerName)
        {
            bool isAuthorized = false;
            GetUser(userName);
            if (_activeUser != null)
            {
                try
                {
                    isAuthorized = _storage.CheckAccess(_storeName,
                                                         controllerName,
                                                         actionName,
                                                         _activeUser,
                                                         DateTime.Now,
                                                         true,
                                                         null)
                                   == AuthorizationType.Allow;
                }
                catch (Exception)
                {
                    // Do nothing.  This is to handle
                    // NetSqlAzMan annoyances.
                }
            }

            return isAuthorized;
        }

        #endregion

    }
}
