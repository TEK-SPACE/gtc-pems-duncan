@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@model Duncan.PEMS.Entities.PayByCell.PayByCellModelAdmin



@{
    ViewBag.Title = "Pay By Cell";

}

@section Scripts
{

    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

    <!-- file upload -->
    <script type="text/javascript" src="/scripts/Kendo/kendo.all.min.js"></script>

    <script type="text/javascript" src="/scripts/spin.min.js"></script> <!-- Added by Sai on July 2nd 2013 -->
    @Scripts.Render("~/bundles/kendo")
}
@section Styles
{
    @Styles.Render("~/css/Kendo")


    <style type="text/css">
        .disabled {
            background-color: #F5F5F5 !important;
        }

        ready .filter-SearchButton {
            background-color: #33BAB1 !important;
            border: 1px solid #00A99D !important;
        }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }




        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }


        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }

        #exportButtons {
            display: none;
        }


        .k-textbox {
            height: auto !important;
        }

        #filterPanel_1 input[type=checkbox] {
            visibility: hidden;
        }

        .k-widget .templateCell {
            overflow: visible;
        }

        /*.squaredThree input[type=checkbox] {
            visibility: hidden;
        }*/


        #ddlAssetType input[type=checkbox] {
            visibility: visible;
        }

        #assetStatusDropDown input[type=checkbox] {
            visibility: visible;
        }

        /*            for file upload            */
        .file-icon {
            display: inline-block;
            float: left;
            width: 48px;
            height: 48px;
            margin-left: 10px;
            margin-top: 13.5px;
        }

        .img-file {
            background-image: url(/content/web/upload/jpg.png);
        }

        .doc-file {
            background-image: url(/content/web/upload/doc.png);
        }

        .pdf-file {
            background-image: url(/content/web/upload/pdf.png);
        }

        .xls-file {
            background-image: url(/content/web/upload/xls.png);
        }

        .zip-file {
            background-image: url(/content/web/upload/zip.png);
        }

        .default-file {
            background-image: url(/content/web/upload/default.png);
        }

        #example .file-heading {
            font-family: Arial;
            font-size: 1.1em;
            display: inline-block;
            float: left;
            width: 450px;
            margin: 0 0 0 20px;
            height: 25px;
            -ms-text-overflow: ellipsis;
            -o-text-overflow: ellipsis;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }

        #example .file-name-heading {
            font-weight: bold;
        }

        #example .file-size-heading {
            font-weight: normal;
            font-style: italic;
        }

        li.k-file .file-wrapper .k-upload-action {
            position: absolute;
            top: 0;
            right: 0;
        }

        li.k-file div.file-wrapper {
            position: relative;
            height: 75px;
        }
    </style>
}

@section PageHeader
{
    <h1><a href="/">@HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "Admin")</a> / @HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "Pay By Cell") / @HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "Pay By Cell Vendor Inquiry")</h1>
}

@section ExportButtons
{
    @*Export options - Step 1 *@
    <div class="export-buttons" id="exportButtons">
        <a id="exportExcel" class="exportButton" href="@Url.Action("ExportToExcel_PBC", new { page = 1, pageSize = "~", filter = "~", sort = "~"})">
            <img src='/images/export-excel.png' />
        </a>
        <a id="exportCSV" class="exportButton" href="@Url.Action("ExportToCsv_PBC", new { page = 1, pageSize = "~", filter = "~", sort = "~"})">
            <img src='/images/export-csv.png' />
        </a>
        <a id="exportPDF" class="exportButton" href="@Url.Action("ExportToPdf_PBC", new { page = 1, pageSize = "~", filter = "~", sort = "~"})">
            <img src='/images/export-pdf.png' />
        </a>
    </div>
}






@section PageFilter
{
    <div class="two-column" style="width: 455px;">


  
            <div class="filter-option">
                <label class="filter-label">Vendor ID:</label>

                @(Html.Kendo().AutoComplete()
                      .Name("autocompleteVendorId")
                      .DataTextField("Value")
              .Filter("contains")
                     .Events(e =>
                        {
                            e.Close("GetVendorName");
                        })
              .MinLength(1)
                      .HtmlAttributes(new { style = "width:280px;font-size:16px;" })
              .DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetVendorIds", "PayByCell")
                          .Data("onAdditionalData");
                  })

                  .ServerFiltering(true);
              })
                )
                <script>
                    function onAdditionalData() {
                        return {
                            typedtext: $("#autocompleteVendorId").val()
                        };
                    }
                </script>


            </div>
        </div>
<div class="two-column" style="width: 455px;">
    <div class="filter-option">
        <label class="filter-label">Vendor Name:</label>

        @(Html.Kendo().AutoComplete()
                .Name("autocompleteVendorName")
                .DataTextField("Text")
        .Filter("contains")
        .Events(e => e.Close("GetVendorID"))
        .MinLength(1)
        .HtmlAttributes(new { style = "width:280px;font-size:16px;" })
        .DataSource(source =>
        {
        source.Read(read =>
        {
        read.Action("GetVendorIds", "PayByCell")
        .Data("onAdditionalData");
        })

        .ServerFiltering(true);
        })
        )
        <script>
            function onAdditionalData() {
                return {
                    typedtext: $("#autocompleteVendorName").val()
                };
            }
        </script>


    </div>
</div>

      
    <div class="filter-searchBox">
        <div style="float: left">
            <button id="btnSearch" type="button" value="Refresh" class="button important filter-SearchButton" onclick=" LoadFreshGrid(); return false; ">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Refresh")</button>
        </div>
    </div>
}

<input type="button" value="Add Vendor" onclick="@("window.location.href='" + @Url.Action("AddPayByCell", "PayByCell") + "'");" />

<div class="grid-header" style="margin-left:-40px">

</div>

<div id="DivPayByCellDetails" class="grid-content" style=" width: 100%;margin-left:0px;">
    @(Html.Kendo().Grid<Duncan.PEMS.Entities.PayByCell.PayByCellModelAdmin>()
        .Name("grdPayByCellDetails")
        .Columns(col =>
        {
          
                col.Bound(p => p.VendorID).ClientTemplate(@Html.ActionLink("#= VendorID #", "EditPayByCell", "PayByCell", new
                {
                    vendorID = "#= VendorID #",
                    Active = "#= Deprecated #",
                    CustID = "#= CustomerID #"

                }, new { onclick = "abc(event)" ,id="a" }).ToHtmlString()).Width(125).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Vendor ID").ToString());//

            col.Bound(a => a.VendorName).Title("Vendor Name").Width("200px");
            col.Bound(a => a.CreatedOnDate).Format("{0:dd/MM/yyyy hh:mm tt}").Title("Created On").Width("190px");
            col.Bound(a => a.CreatedByName).Title("Created By").Width("190px");
            col.Bound(a => a.Deprecated).Visible(false).Width("190px");
        }
            )
                       .Scrollable(scr => scr.Height(400))
                         .Events(events => events.DataBound("onDataBound"))
               .Navigatable()
                .Sortable()
                .AutoBind(false)
                .Pageable(x =>
                {
                    x.Enabled(true);
                    x.PreviousNext(true);
                    x.PageSizes(true);
                    x.Info(true);
                    x.Input(true);
                    x.Numeric(true);
                    x.Refresh(false);
                })
                .Filterable()
                .Reorderable(reoder => reoder.Columns(true))
                .Selectable(selectable => selectable
                .Mode(GridSelectionMode.Single))

                .DataSource(dataSource => dataSource
                .Ajax()
                 .Read(read => read.Action("GetPayByCellSummary", "PayByCell").Data("GetAllFilterData"))
                   .PageSize(50)
                )

                .Resizable(resize => resize.Columns(true))
                .Pageable(pager => pager.PageSizes(new int[] { 10, 50, 100, 200 })) // Enable paging

    )

</div>



<script>
    var spinner;
    var viewModel = kendo.observable({
        VendorIds: [],
        VendorId: "",

        VendorNames: [],
        VendorName: "",
    });


    //** STEP-2
    var gridFilters = { "CurrentPage": 1, "PageSize": 50 };
    var sorts = {};

    $(document).ready(function () {

        kendo.bind($(document.body), viewModel);

        viewModel.bind("change", function (e) {
            SaveViewState();
        });


        if (getParameterByName('rtn') == 'true') {
            LoadViewState();
            invokeDataSource(50)



        } else {

        }

    });

    function multiSelectAssetTypeDropDownFunc() {
        window.clearInterval(timeInterval)
        $("#grdPayByCellDetails").css("display", "inline");
        $("#grdPayByCellDetails").data("kendoGrid").dataSource.read();

    }


    function SaveViewState() {

        /// Save filters view state to local storage, with fallback to
        /// server if HTML5 local storage not supported (IE7)

        // serialize viewstate
        var json = viewModel.toJSON();
        var stringified = JSON.stringify(json);

        // test for HTML5 local storage support
        if (typeof (Storage) !== "undefined") {
            // HTML5 sessionStorage support! Yay!
            window.sessionStorage.setItem("PayByCellViewState", stringified);
            // alert("SaveViewState")
        } else {
            // No web storage support..
            // todo: implement fall back to server caching
        }
    }


    function LoadViewState() {
        /// Load filter view state if found in session

        var stringified;

        // test for HTML5 local storage support
        if (typeof (Storage) !== "undefined") {
            // HTML5 sessionStorage support! Yay!
            stringified = window.sessionStorage.getItem("PayByCellViewState");
        } else {
            // No web storage support..
            // todo: implement fall back to server caching
        }

        // reconstruct the view model from the cache
        if (stringified) {
            var parsed = JSON.parse(stringified);
            if (parsed) {


                $('#autocompleteVendorId').val(parsed.VendorId);
                $('#autocompleteVendorName').val(parsed.VendorName);
            }
        } else {

        }

        showProgressBar(false);
    }


    function GetAllFilterData() {
        var VendorID = $("#autocompleteVendorId").val();
        return {
            vendorID: VendorID
        }
    }
  
    function abc(e) {

        var grid = $("#grdPayByCellDetails").data().kendoGrid;
        var rowindex = grid.select().index();
        var datasource = grid.dataSource.data()[rowindex];
        if (datasource.Deprecated == false) {

            alert("This vendor is no longer available.")
            e.preventDefault();
            return false;
        }
    }

    function GetVendorName() {
        var VID = $("#autocompleteVendorId").val();

        var url = '@Url.Action("GetVendorName")';
        $.get(url, { VendorID: VID }, function (data) {
            $("#autocompleteVendorName").val(data);

                  viewModel.set('VendorName', data);
        });
        viewModel.set('VendorId', $("#autocompleteVendorId").val());

    }
    function GetVendorID() {

        var VName = $("#autocompleteVendorName").val();
        var url = '@Url.Action("GetVendorID")';
        $.get(url, { VendorName: VName }, function (data) {
            $("#autocompleteVendorId").val(data);
            viewModel.set('VendorID', data);
        });


        viewModel.set('VendorName', $("#autocompleteVendorName").val());
      

    }

    $('#autocompleteVendorId').keyup(function (key) {
        var code = key.keyCode || key.which;
        if (code == 46 || code == 8) { // enter,delete and backspace
            var assetIdTxt = $("#autocompleteVendorId").val()
            $("#autocompleteVendorName").val("");
        }
    });



    $('#autocompleteVendorName').keyup(function (key) {
        var code = key.keyCode || key.which;

        if (code == 46 || code == 8) { // enter,delete and backspace
            var assetIdTxt = $("#autocompleteVendorName").val()
            $("#autocompleteVendorId").val("");
        }
    });



    function LoadFreshGrid() {

        showProgressBar(false); //** Display Progress bar animation till the server returns response;
        invokeDataSource(50) //** set the default no. of records as 50
        SaveViewState();
    }
    var gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": 100 };
    var sorts = {};

    function invokeDataSource(maxCount) {

        showProgressBar(true); //** Display Progress bar animation till the server returns response;
        var $filter = new Array();

        //AssetId
        var $AssetIdVal = $("#autocompleteVendorId").val();

        if ($AssetIdVal) {

            gridFilters.assetID = $AssetIdVal;
            $filter.push({ field: "vendorID", operator: "contains", value: $("#autocompleteVendorId").val() });
        }
        else {
            $filter.push({ field: "vendorID", operator: "contains", value: "" });
        }
        var grid = $("#grdPayByCellDetails").data("kendoGrid");
        $("#grdPayByCellDetails").data("kendoGrid").dataSource.filter($filter);
        $("#grdPayByCellDetails").data("kendoGrid").dataSource.view({ page: gridFilters.CurrentPage, filter: $filter, pageSize: gridFilters.PageSize, sort: sorts });
    }

    var set = -1;
    function onDataBound(arg) {
        set++;
        //then once the page changes it hits this -  select the row
        if (set == 0) {
            //highlight the selected row (if they did)
            if (gridFilters.SelectedIndex > -1) {
                //we have to set a timeout since the databind event gets called again :(
                var row = $("#grdPayByCellDetails").data("kendoGrid").tbody.find(">tr:not(.k-grouping-row)").eq(gridFilters.SelectedIndex);
                $("#grdPayByCellDetails").data("kendoGrid").select(row);
            }
        }
        var result = $("#grdPayByCellDetails").data().kendoGrid.dataSource.data()
        showProgressBar(false); //** Hide Progress bar animation after the server response;
        //**First clear the Grid
        $('#grdPayByCellDetails').css('display', 'none');
        $("#grdPayByCellDetails").show();
        $('#grdPayByCellDetails').css('visibility', 'visible');
        if (result.length == 0) {
            alert('No Data.');
            return;
        }

        UpdateGridState();
        UpdateExportLinks();
    }

    function UpdateGridState() {
        /// Update the grid state object with grid's current state
        var currentGrid = $("#grdPayByCellDetails").data("kendoGrid");

        gridFilters.CurrentPage = currentGrid.dataSource.page();
        gridFilters.SelectedRow = currentGrid.select().index();
        gridFilters.sorts = JSON.stringify(currentGrid.dataSource._sort);
        gridFilters.pageSize = currentGrid.dataSource.pageSize();

    }

    //** STEP-3b
    function UpdateExportLinks() { //** Export options - Step 3
        /// Update the href for the export buttons
        var grid = $('#grdPayByCellDetails').data('kendoGrid');

        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
            .options.parameterMap({
                page: grid.dataSource.page(),
                sort: grid.dataSource.sort(),
                filter: grid.dataSource.filter()
            });

        //EXCEL
        var $excelLink = $('#exportExcel');
        $excelLink.attr('href', GetExportHref($excelLink.attr('href'), requestObject, grid));

        //CSV
        var $csvLink = $('#exportCSV');
        $csvLink.attr('href', GetExportHref($csvLink.attr('href'), requestObject, grid));

        //PDF
        var $pdfLink = $('#exportPDF');
        $pdfLink.attr('href', GetExportHref($pdfLink.attr('href'), requestObject, grid));

        $("#exportButtons").css("display", "inline");

    }

    function GetExportHref(href, requestObject, grid) { //** Export options - Step 4
        // Update the 'page' parameter with the grid's current page
        href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');
        // Update the 'sort' parameter with the grid's current sort descriptor
        href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        // Update the 'pageSize' parameter with the grid's current pageSize
        //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);
        href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + 100000);  //** sai modified pagesize to export all pages on jan 1st 2015
        //update filter descriptor with the filters applied
        href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

        return href;
    }



    function showProgressBar(visisbility) {
        if (visisbility == false) {
            if (spinner != null || spinner != undefined) {
                spinner.stop() //** hide the PB
            }
        } else {
            //** Create spinner and display PB
            var opts = {
                lines: 13, // The number of lines to draw
                length: 0, // The length of each line
                width: 5, // The line thickness
                radius: 15, // The radius of the inner circle
                corners: 1, // Corner roundness (0..1)
                rotate: 48, // The rotation offset
                direction: 1, // 1: clockwise, -1: counterclockwise
                color: '#000', // #rgb or #rrggbb
                speed: 1, // Rounds per second
                trail: 60, // Afterglow percentage
                shadow: false, // Whether to render a shadow
                hwaccel: false, // Whether to use hardware acceleration
                className: 'spinner', // The CSS class to assign to the spinner
                zIndex: 2e9, // The z-index (defaults to 2000000000)
                top: '230px', // Top position relative to parent in px
                left: 'auto' // Left position relative to parent in px
            };
            spinner = new Spinner(opts).spin(document.body);

        }

    }





</script>


