@using Duncan.PEMS.Business.ConditionalValues
@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@model IEnumerable<Duncan.PEMS.Entities.Discounts.UserAccountListModel>

@{
    ViewBag.Title = @HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Discount Management" );
}

@section Styles
{
    <style type="text/css">
        #CurrentGrid { display: none; }

        #exportButtons { display: none; }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-pager-wrap .k-dropdown { width: 75px !important; }

        .k-red { color: crimson !important; }

        .k-yellow { color: yellow !important; }

        .k-timepicker, .k-datetimepicker, .k-datepicker { background-color: transparent !important; }

    </style>

}


@section PageHeader 
{
    <h1><a href="/">@HttpContext.Current.GetLocaleResource( ResourceTypes.Glossary, "Home" )</a> / @HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Discount Management" ) / <span>@HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Account Summary Inquiry" )</span></h1>
}


@section ExportButtons 
{
    <div class="export-buttons" id="exportButtons">
        <a id="exportExcel" class="exportButton" href="@Url.Action( "ExportToExcel", new {page = 1, pageSize = "~", filter = "~", sort = "~", scheme ="~", schemeStatusId="~", customerId="~"} )">
            <img src='/images/export-excel.png' />
        </a>
        <a id="exportCSV" class="exportButton" href="@Url.Action( "ExportToCsv", new {page = 1, pageSize = "~", filter = "~", sort = "~", scheme ="~", schemeStatusId="~", customerId="~"} )">
            <img src='/images/export-csv.png' />
        </a>
        <a id="exportPDF" class="exportButton" href="@Url.Action( "ExportToPdf", new {page = 1, pageSize = "~", filter = "~", sort = "~", scheme ="~", schemeStatusId="~", customerId="~"} )">
            <img src='/images/export-pdf.png' />
        </a>
    </div>
}


@(Html.Kendo().Grid( Model )
      .HtmlAttributes( new {style = "max-width: 1693px; height: 470px;"} )
      .Name( "CurrentGrid" )
      .Columns( columns =>
                    {
                        columns.Bound(p => p.UserId).ClientTemplate(@Html.ActionLink("#= LastName #", "Details", "Discounts", new{userId = "#= UserId #"}, new {@onclick = "RowClick(this);"} ).ToHtmlString() ).Width( 150 ).Title("Last Name");
                        columns.Bound(p => p.FirstName).Width(150);
                        columns.Bound(p => p.Email).Width(225);
                        columns.Bound(p => p.PendingCount).Width(100);
                        columns.Bound(p => p.ApprovedCount).Width(100);
                        columns.Bound(p => p.RejectedCount).Width(100);
                        columns.Bound(p => p.AccountStatus).Width(125);
                        columns.Bound(p => p.CreationDate).Width(175).ClientTemplate("#= CreationDateDisplay  #");
                        
                    } )
      .Selectable( select => select.Mode( GridSelectionMode.Single ).Type( GridSelectionType.Row ) )
      .Reorderable( reorder => reorder.Columns( false ) )
      .Pageable( pager => pager.PageSizes( true ).PageSizes( new[] {100, 250, 500, 1000} ) )
      .AutoBind( false )
      .Sortable( sortable => sortable.SortMode( GridSortMode.MultipleColumn ) )
      .Resizable( resize => resize.Columns( true ) )
      .Scrollable()
      .Events( events => events.DataBound( "OnDataBound" ) )
      //.Events( events => events.ColumnResize( "OnRowResized" ) )
      .DataSource( dataSource => dataSource.Ajax().Read( read => read.Action( "GetAccounts", "Discounts" ).Type( HttpVerbs.Get ).Data( "additionalData" ) )
      ))


@section Scripts
{
    <script src="~/scripts/DiscountSummaryGrid.js" type="text/javascript"> </script>
}


@section PageFilter 
{
   


    <div class="two-column-wrapper">
        <div class="two-column">
            <div class="filter-option">
                <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "First Name" )</span>
                <input id="txtFirstName" class="filter-input k-textbox" />
            </div>
        </div>
        <div class="two-column">
            <div class="filter-option">
                <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Last Name" )</span>
                <input id="txtLastName" class="filter-input k-textbox" />
            </div>
        </div>
   
        <div class="two-column">
            <div class="filter-option">
                <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Email Address" )</span>
                <input id="txtEmailAddress" class="filter-input k-textbox" />
            </div>
        </div>
        <div class="two-column">
            <div class="filter-option">
                <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Account Status" )</span>
                <select id="ddlAccountStates" class="filter-dropdown" data-role="dropdownlist" data-bind="source: accountStates, value: accountState" data-option-label="All" data-text-field="Text" data-value-field="Value"></select>
            </div>
        </div>
        
        <div class='two-column @ConditionalValueFactory.GetHiddenFieldClass(
                                    int.Parse(ViewData[Constants.ViewData.CurrentCityId].ToString()), 
                                    Constants.HiddenFields.FieldDiscountScheme)' >
            <div class="filter-option">
                <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Discount Scheme" )</span>
                <select id="ddlDiscountSchemes" class="filter-dropdown" data-role="dropdownlist" data-bind="source: discountSchemes, value: discountScheme" data-option-label="All" data-text-field="Text" data-value-field="Value"></select>
            </div>
        </div>
        <div class="two-column">
            <div class="filter-option">
                <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Discount Status" )</span>
                <select id="ddlDiscountStates" class="filter-dropdown" data-role="dropdownlist" data-bind="source: discountStates, value: discountState" data-option-label="All" data-text-field="Text" data-value-field="Value"></select>
            </div>
        </div>
    </div>
    <div class="one-column">
         <div class="filter-option">
              <div class="two-inputs">
               <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Create Date" )</span>
               <input id="dpCreationDateStart" data-role="datepicker" style="width: 130px; height:30px" data-bind="value: createStartDate" />
           </div>
           <div class="two-inputs">
               <span class="to">to</span>
               <input id="dpCreationDateEnd" data-role="datepicker" style="width: 130px; height:30px" data-bind="value: createEndDate" />
           </div>
        </div>
    </div>
    <div class="filter-searchBox">
        <button id="btnSearch" type="button" value="Refresh" class="button important filter-SearchButton" onclick=" LoadFreshGrid(); return false; ">@HttpContext.Current.GetLocaleResource( ResourceTypes.Button, "Refresh" )</button>
    </div>
    <script type="text/javascript">
        
        var viewModel = kendo.observable({
            createStartDate: null,
            createEndDate: null,
            accountStates:[],
            accountState: null,
            discountSchemes:[],
            discountScheme: null,
            discountStates:[],
            discountState: null
        });
        
        $(document).ready(function() {

            kendo.bind($(document.body), viewModel);
            LoadFilterDropdowns(@ViewData[Constants.ViewData.CurrentCityId]);

            //$(window).bind('resize', function() {
            //    $('#CurrentGrid').freezeGridColumn(2);
            //});
            
            // If 'returnUrl' exists in session (from a previous page), remove it 
            if (window.sessionStorage.returnUrl) {
                // remove the saved returnUrl from session
                window.sessionStorage.removeItem("returnUrl");
            }
        });


        //SORTS - default this to time of complaint descending
        var sorts = {};

        function LoadSorts() {
            $.post('/Discounts/GetSavedSortValues?indexType=DiscountSummary', OnSortsLoaded);
        }

        function OnSortsLoaded(data) {
            if (!isEmptyObject(data)) {
                sorts = data;
            } else {
                sorts = {};
            }
            LoadFilters();
        }

        //function OnRowResized(e) {
        //    var th = $('#CurrentGrid .k-grid-header table th[data-field="' + e.column.field + '"][data-title="' + e.column.title + '"]');
        //    var index = $('#CurrentGrid .k-grid-header table th').index(th);
        //    $('#CurrentGrid').UpdateWidths(index, 2, e.newWidth, e.oldWidth);
        //    $('#CurrentGrid').freezeGridColumn(2);
        //}

        //FILTERS
        var gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": 100 };

        function LoadFilters() {
            $.post('/shared/Sessions/GetDiscountSummaryFilters', OnFiltersLoaded);
        }

        function OnFiltersLoaded(data) {
            if (!isEmptyObject(data) && getParameterByName('rtn') == 'true') {
                gridFilters = data;
                
                $("#txtFirstName").val(gridFilters.FirstName);
                $("#txtLastName").val(gridFilters.LastName);
                $("#txtEmailAddress").val(gridFilters.Email);
                $("#ddlAccountStates").data("kendoDropDownList").select(function(dataItem) {return dataItem.Text ===  gridFilters.AccountStatus;});
                $("#ddlDiscountSchemes").data("kendoDropDownList").select(function(dataItem) {return dataItem.Text ===  gridFilters.DiscountScheme;});
                $("#ddlDiscountStates").data("kendoDropDownList").select(function(dataItem) {return dataItem.Text ===  gridFilters.SchemeStatus;});

                // don't want to create a new Date if null because will default to 1970
                if (gridFilters.CreateDateStart) {
                    viewModel.set('createStartDate', new Date(gridFilters.CreateDateStart));
                }
                if (gridFilters.CreateDateEnd) {
                    viewModel.set('createEndDate', new Date(gridFilters.CreateDateEnd));
                }
               
                LoadGrid();
            } else {
                //if nothing came back, set it back to the default
                gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": 100 };
            }
        }

        //GRID LOADING
        //pull the filters down and apply them to the grid - calling the .filter method will call the read automatically

        function LoadGrid() {
            //Get the grid data out of the DB and load it
            var $currentCid = @ViewBag.CurrentCityId;
            $.post('/Discounts/GetGridData?cid=' + $currentCid + '&cont=Discounts&act=GetItems', OnGridDataLoaded);
        }

        function LoadFreshGrid() {
            var currentPageSize = $("#CurrentGrid").data("kendoGrid").dataSource.pageSize();
            
            // Ensure the page size is at least 100
            if (currentPageSize < 100) {
                currentPageSize = 100;
            }

            gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": currentPageSize };
            LoadGrid();
        }

        var hasBeenOrdered = false;
        function OnGridDataLoaded(data) {
            if (!isEmptyObject(data) &&  !hasBeenOrdered){
                //update the grid titles
                LoadGridTitles(data);
            } else {
                //if there is no grid data for this in the DB, jsut load the grid as usual
                LoadGridData();
            }
        }

        function LoadGridTitles(data) {
            //load all the titles for the grid here
            var tableHeaderCol = $('#CurrentGrid').find(".k-grid-header table thead tr th");
            for (var i = 0; i < data.length; i++) {
                $(tableHeaderCol).eq(i).find('a,span').text(data[i].Title);
            }
            //once that is complete, load the grid order
            LoadGridOrder(data);
        }

        function LoadGridOrder(data) {
            //update the grid orders here
            //data is sorted by original position name, so the logic is as follows
            //create an array of expected positions. this is what we will use to get the value at a specified index
            hasBeenOrdered = true;
            var postionArray = [];
            var hiddenCount = 0;
            for (var h = 0; h < data.length; h++) {
                postionArray.push(data[h].Position);
                if (data[h].IsHidden)
                    hiddenCount = hiddenCount + 1;
            }
            var grid = $("#CurrentGrid").data("kendoGrid");
            //foreach item in data
            for (var currentIndex = 0; currentIndex < data.length; currentIndex++) {
                var actualIndex = jQuery.inArray(currentIndex, postionArray);

                //check to see if the original and new posisiton is different (if it is the same, do nothing)
                if (currentIndex != actualIndex) {
                    //if different, find the index of the original position item  that has the same value of the current position of the loop (i)
                    //once you have the index, you wil need to reporder the columns with index of the original with the current position of hte loop
                    grid.reorderColumn(currentIndex, grid.columns[actualIndex]);
                    grid.reorderColumn(actualIndex, grid.columns[currentIndex + 1]);

                    //update the position array to reflect the change
                    postionArray[actualIndex] = postionArray[currentIndex];
                    postionArray[currentIndex] = currentIndex;
                }
            }
            if (hiddenCount > 0)
                $('#CurrentGrid').hideLastColumns(hiddenCount);
            //then load the data for the grid
            LoadGridData();
        }

        function LoadGridData() {
            var $createStartDate = viewModel.createStartDate;
            //Test to see if the start date is not empty, and if it is a valid date
            if ($createStartDate && !Date.parse($createStartDate)) {
                alert("Creation Start Date Must Be A Valid Date");
                return;
            }
            var $createEndDate = viewModel.createEndDate;

            //Test to see if the end date is not empty and if it is a valid date
            if ($createEndDate && !Date.parse($createEndDate)) {
                alert("Creation End Date Must Be A Valid Date");
                return;
            }
            //Test to see if start date is less than end date
            if ($createStartDate != '' && $createEndDate != '') {
                if (Date.parse($createStartDate) > Date.parse($createEndDate)) {
                    alert("Creation End Date Must Be Greater Than Creation Start Date");
                    return;
                }
            }
            

            var $filter = new Array();
            //Required fields not in filters

            //FirstName
            var $firstName = $("#txtFirstName").val();
            if ($firstName) {
                gridFilters.FirstName = $firstName;
                $filter.push({ field: "FirstName", operator: "contains", value: $firstName });
            }
            
            //LastName
            var $lastName = $("#txtLastName").val();
            if ($lastName) {
                gridFilters.LastName = $lastName;
                $filter.push({ field: "LastName", operator: "contains", value: $lastName });
            }
            
            //Email
            var $email = $("#txtEmailAddress").val();
            if ($email) {
                gridFilters.Email = $email;
                $filter.push({ field: "Email", operator: "contains", value: $email });
            }
            
            //Account Status
            var $accountStatus =  $("#ddlAccountStates").data("kendoDropDownList").text();
            if ($accountStatus && $accountStatus != "All") {
                gridFilters.AccountStatus = $accountStatus;
                $filter.push({ field: "AccountStatus", operator: "contains", value: $accountStatus });
            } 
            
             
            //Discount Schemes
            var $discountSchemes =  $("#ddlDiscountSchemes").data("kendoDropDownList").text();
            if ($discountSchemes && $discountSchemes != "All") {
                gridFilters.DiscountScheme = $discountSchemes;
                // $filter.push({ field: "AccountStatus", operator: "contains", value: $accountStatus }); might have to add this via additional method
            } 
             
            //Scheme Status
            var $discountSchemeState =  $("#ddlDiscountStates").data("kendoDropDownList").text();
            if ($discountSchemeState && $discountSchemeState != "All") {
                gridFilters.SchemeStatus = $discountSchemeState;
                //  $filter.push({ field: "AccountStatus", operator: "contains", value: $accountStatus }); add this via additional method
            } 

            //Additional Data not plugged into filters but send in addtional data method, still need these to be loaded on reentry to the page
            // creation Date
            var cStartDate = viewModel.createStartDate;
            var cEndDate = viewModel.createEndDate;
            if (cStartDate) {
                gridFilters.CreateDateStart = cStartDate;
                $filter.push({ field: "CreationDate", operator: "gte", value: cStartDate });
            }
            if (cEndDate) {
                cEndDate.setHours(23, 59, 59, 999); // set to end of day
                gridFilters.CreateDateEnd = cEndDate;
                $filter.push({ field: "CreationDate", operator: "lte", value: cEndDate });
            }
            
            $("#CurrentGrid").data("kendoGrid").dataSource.query({ page: gridFilters.CurrentPage, filter: $filter, pageSize: gridFilters.PageSize, sort: sorts });
            $("#CurrentGrid").css("display", "block");
        }

        //ROW CLICK

        function RowClick() {

            var grid = $("#CurrentGrid").data("kendoGrid");

            //get the current page 
            gridFilters.CurrentPage = grid.dataSource.page();
            //get selected row here
            gridFilters.SelectedIndex = grid.select().index();

            gridFilters.PageSize = grid.dataSource.pageSize();

            //save the filters
            $.post('/shared/Sessions/SaveDiscountSummaryFilters', gridFilters);
        }

        //DATABOUND EVENT - setting a saved page and selected row
        //every time a page is changed or row selected, it also call sthe databind event, which calls this method, which is why we need the set variable to determine if some action has already been preformed.
        //also happens when you page, etc, dont remove this variable unless you can fully test this
        var set = -1;

        function OnDataBound() {
            set++;
            //then once the page changes it hits this -  select the row
            if (set == 0) {

                //highlight the selected row (if they did)
                if (gridFilters.SelectedIndex > -1) {
                    //we have to set a timeout since the databind event gets called again :(
                    var row = $("#CurrentGrid").data("kendoGrid").tbody.find(">tr:not(.k-grouping-row)").eq(gridFilters.SelectedIndex);
                    $("#CurrentGrid").data("kendoGrid").select(row);
                }
            }
            applyFrozenColumns();
            SetExportData();
        }

        function SetExportData() {
            var grid = $('#CurrentGrid').data('kendoGrid');

            // ask the parameterMap to create the request object for you
            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
                .options.parameterMap({
                    page: grid.dataSource.page(),
                    sort: grid.dataSource.sort(),
                    filter: grid.dataSource.filter()
                });

            //EXCEL
            var $excelLink = $('#exportExcel');
            $excelLink.attr('href', GetExportHref($excelLink.attr('href'), requestObject, grid));

            //CSV
            var $csvLink = $('#exportCSV');
            $csvLink.attr('href', GetExportHref($csvLink.attr('href'), requestObject, grid));

            //PDF
            var $pdfLink = $('#exportPDF');
            $pdfLink.attr('href', GetExportHref($pdfLink.attr('href'), requestObject, grid));

            //show the div holding these items
            $("#exportButtons").css("display", "block");
        }

        function GetExportHref(href, requestObject, grid) {
            // Update the 'page' parameter with the grid's current page
            href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');
            // Update the 'sort' parameter with the grid's current sort descriptor
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            // Update the 'pageSize' parameter with the grid's current pageSize
            // href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);
            href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + 100000);  //** sai modified pagesize to export all pages on jan 1st 2015
            //update filter descriptor with the filters applied
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
            
            //discount scheme and status
            var $customerId =  @ViewData[Constants.ViewData.CurrentCityId];
            href = href.replace(/scheme=([^&]*)/, 'scheme=' + $("#ddlDiscountSchemes").data("kendoDropDownList").value());
            href = href.replace(/schemeStatusId=([^&]*)/, 'schemeStatusId=' + $("#ddlDiscountStates").data("kendoDropDownList").value());
            href = href.replace(/customerId=([^&]*)/, 'customerId=' + $customerId);
            return href;
        }

        //Freeze columns if you need to for this grid
        function applyFrozenColumns() {
            //  $('#CurrentGrid').freezeGridColumn(2);
        }

        //additional data sent to the action when the read method is called (when we apply a filter)
        function additionalData() {
            var $customerId =  @ViewData[Constants.ViewData.CurrentCityId];
            return {
                scheme: $("#ddlDiscountSchemes").data("kendoDropDownList").value(),
                schemeStatusId:$("#ddlDiscountStates").data("kendoDropDownList").value(),
                customerId: $customerId
            };
        }
    </script>
}