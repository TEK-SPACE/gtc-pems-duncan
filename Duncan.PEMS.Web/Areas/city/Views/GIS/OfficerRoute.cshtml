@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@model Duncan.PEMS.Entities.GIS.GISModel

@{
    ViewBag.Title = "Officer Route";
}

@section Styles
{
    @Styles.Render("~/css/Kendo")

    <style type="text/css">
        .labels {
            color: black;
            background-color: white;
            font-family: "Lucida Grande", "Arial", sans-serif;
            font-size: 8px;
            font-weight: bold;
            text-align: center;
            width: 41px;
            /*width: 16px;*/
            border: 2px solid black;
            white-space: nowrap;
        }

        #grdCustomerDetails {
            border-width: 0;
            height: 100%;
            width: 100%;
            min-height: 500px;
        }

        #DivCustomerDetails {
            display: none;
            border-width: 0;
            height: 100%;
            width: 100%;
        }


        .disabled {
            background-color: #F5F5F5 !important;
        }

        .filter-SearchButton {
            background-color: #ff6112 !important;
            border: 1px solid #00A99D !important;
        }

            .filter-SearchButton:hover {
                background: #ccc !important;
                text-decoration: none !important;
            }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-timepicker, .k-datetimepicker, .k-datepicker {
            background-color: transparent !important;
        }

        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }

        #exportButtons {
            display: none;
        }

        #legendTitle {
            width: 223px;
            height: 27px;
            margin: 0px;
            padding-right: 5px;
            display: none;
            font-family: "futura-pt-n4", "futura-pt", Arial, sans-serif;
            font-weight: 400;
            font-size: 16px;
        }

        #legendPanel {
            width: 227px;
            height: 245px;
            background: #fff;
            background-color: #fff;
            padding: 0px;
            margin: 0px;
            margin-right: 0px;
            border: solid;
            border-color: darkgray;
            border-width: thin;
            display: inline;
            overflow: scroll;
        }

        .legendHeaders {
            margin-left: 5px;
            margin-top: 5px;
            margin-bottom: 2px;
        }


        .legImg {
            float: left;
        }

        .legendLabels {
            /*font-family:Arial;*/
            /*font-weight:normal;*/
            font-size: 11px;
            margin: 0px;
            margin-left: 5px;
        }

        #legendTitle {
            background-color: #174A7D;
            margin: 0px;
            color: white;
        }


        .k-textbox {
            height: auto !important;
        }

        #filterPanel_1 input[type=checkbox] {
            visibility: hidden;
        }

        .squaredThree input[type=checkbox] {
            visibility: hidden;
        }


        #ddlAssetType input[type=checkbox] {
            visibility: visible;
        }

        #assetStatusDropDown input[type=checkbox] {
            visibility: visible;
        }

        /* SQUARED THREE */
        .squaredThree {
            width: 18px;
            margin: 20px;
            position: relative;
        }

            .squaredThree label {
                cursor: pointer;
                position: absolute;
                width: 17px;
                height: 17px;
                top: 0;
                border-radius: 4px;
                -webkit-box-shadow: inset 0px 1px 1px rgba(0,0,0,0.5), 0px 1px 0px rgba(255,255,255,.4);
                -moz-box-shadow: inset 0px 1px 1px rgba(0,0,0,0.5), 0px 1px 0px rgba(255,255,255,.4);
                box-shadow: inset 0px 1px 1px rgba(0,0,0,0.5), 0px 1px 0px rgba(255,255,255,.4);
                background: -webkit-linear-gradient(top, #FFF 0%, #FFF 100%);
                background: -moz-linear-gradient(top, #FFF 0%, #FFF 100%);
                background: -o-linear-gradient(top, #222 0%, #45484d 100%);
                background: -ms-linear-gradient(top, #FFF 0%, #FFF 100%);
                background: linear-gradient(top, #222 0%, #45484d 100%);
                filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#222', endColorstr='#45484d',GradientType=0 );
            }

                .squaredThree label:after {
                    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
                    filter: alpha(opacity=0);
                    opacity: 0;
                    content: '';
                    position: absolute;
                    width: 7px;
                    height: 3px;
                    background: transparent;
                    top: 4px;
                    left: 4px;
                    border: 2px solid #000000;
                    border-top: none;
                    border-right: none;
                    -webkit-transform: rotate(-45deg);
                    -moz-transform: rotate(-45deg);
                    -o-transform: rotate(-45deg);
                    -ms-transform: rotate(-45deg);
                    transform: rotate(-45deg);
                }

                .squaredThree label:hover::after {
                    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=30)";
                    filter: alpha(opacity=30);
                    opacity: 0.3;
                }

            .squaredThree input[type=checkbox]:checked + label:after {
                -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=100)";
                filter: alpha(opacity=100);
                opacity: 1;
            }
    </style>
}

@section PageHeader
{
    <h1>GIS / <span>Officer Route</span></h1>
}

@section PageFilter
{
    <div class="one-column">
        <div class="filter-option">
            <span class="filter-label">@HttpContext.Current.GetLocaleResource(ResourceTypes.Label, "Date Range")</span>
            <input id="dp-1" data-role="datetimepicker" style="width: 210px" data-bind="value: startDate" />
            to
            <input id="dp-2" data-role="datetimepicker" style="width: 210px" data-bind="value: endDate" />
            <span class="required_asterisk">*</span>
        </div>
    </div>


    <div id="animSpeedControl" class="two-column" style="clear:both;float:left;">
        <div class="filter-option">
            <label class="filter-label">Animation Speed:</label>
            @(Html.Kendo().DropDownList()
                      .Name("animSpeed")
                      .DataTextField("Text")
                      .DataValueField("Value")
                      .HtmlAttributes(new { style = "width:131px;font-size:16px;" })
                      .Events(e => e.Change("onSpeedChange"))
                      .BindTo(new List<SelectListItem>() {
                          new SelectListItem() {
                              Text = "Normal",
                              Value = "1"
                          },
                          new SelectListItem() {
                              Text = "High",
                              Value = "2"
                          },
                          new SelectListItem() {
                              Text = "Low",
                              Value = "3"
                          }
                      })
                      .Value("1")
            )




        </div>
    </div>

  



    <div id="refreshControls" style="clear:both;margin-left: 20px; float: left;">
        <div style="float: left;">
            <button id="btnSearch" type="button" value="Refresh" class="button important filter-SearchButton" onclick="GetCustomerGridDetails_func('clicked', 'Search')">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Refresh")</button>
        </div>

        <div class="squaredThree" style="margin-top: 11px;float:left;margin-left: 12px;display:none;">
            <input type="checkbox" value="None" id="showMapBtn" name="check" checked="checked" />
            <label for="showMapBtn">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Show&nbsp;Map</label>
        </div>
        <div class="squaredThree" style="margin-top: 11px;margin-left: 65px;float:left;display:none;">
            <input type="checkbox" value="None" id="showGridBtn" name="check" checked="checked" />
            <label for="showGridBtn">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Show&nbsp;Grid</label>
        </div>
        <div class="squaredThree" style="margin-top: 11px;margin-left: 65px;float:left;display:none;" onclick="onAnimBtnClicked()">
            <input type="checkbox" value="None" id="showAnimBtn" name="check" />
            <label for="showAnimBtn">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Animate&nbsp;Route</label>
        </div>

        <div class="generalCheckBox" style="margin-top: 11px; float: left; margin-left: 22px;display:none;">
            <input type="checkbox" id="showMapBtn" value="None" checked="checked">  Show Map
        </div>
        <div class="generalCheckBox" style="margin-top: 11px;  float: left;margin-left: 15px;display:none;">
            <input type="checkbox" id="showGridBtn" value="None" checked="checked">  Show Grid
        </div>
        <div class="generalCheckBox" style="margin-top: 11px;  float: left;margin-left: 15px;display:none;">
            <input type="checkbox" id="showAnimBtn" value="None">  Animate Route
        </div>

    </div>

}
<input type="hidden" name="hdnCheckPageLoad" id="hdnIdCheckPageLoad" />

    <div  style="display:none;">
        @(Html.Kendo().DropDownListFor(a => a.officerID).HtmlAttributes(new { @class = "filter-dropdown", style = "width:289px;height:2px;font-size:16px;", id = "officerID_DD", onchange = "onOffIDChanged()" })
                       .OptionLabel("Please select...")
                                .DataTextField("Text")
                                .DataValueField("Value")
                                 .Events(e => e
                                    .DataBound("onDataBound_AssetStatus")
                                )
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Url("../GIS/GetOfficerIDS").Data("fetchCustomerID");

                                            });
                                        })
        )

    </div>

  <div class="filter-option" style="visibility:hidden;display:none;">
        <label class="filter-label">Hidden Field:</label>
        @(Html.Kendo().DropDownListFor(a => a.officerID).HtmlAttributes(new { @class = "filter-dropdown", style = "width:289px;height:0px;font-size:16px;", id = "hiddenField", onchange = "" })
                       .OptionLabel("Please select...")
                                .AutoBind(false)
                                .DataTextField("Text")
                                .DataValueField("Value")
                                 .Events(e => e
                                    .DataBound("onDataBound_HiddenField")
                                )
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Url("../GIS/GetCitationIssued").Data("GetAllFilterData");

                                    });
                                })
        )

    </div>



<!-- Sairam added below line to display google map. Code added on 28th May -->
<div id="mHolder" style="font-family:futura-pt-n4, futura-pt, Arial, sans-serif;margin-top:-2px;">
    <div id="map_canvas" style=" max-height: 95%; min-height: 95%; height: 487px; margin: 2px; margin-top:0px; font-family:futura-pt-n4, futura-pt, Arial, sans-serif;"></div>

</div>

<div id="legendPanel">

</div>

<div id="legendTitle">
    <p>&nbsp;&nbsp;Legend Panel</p>
</div>


 <div id="window">
            @(Html.Kendo().ListView<Duncan.PEMS.Entities.BatteryChange.BatteryChangeModel>()
                        .HtmlAttributes(new { id = "assetStatusDropDown", style = "width:158px;height:240px;font-size:12px;margin-Top:0px; overflow-y:scroll;" })
                        .Name("assetStatusDropDown")
                        .TagName("div")
                        .AutoBind(true)
                        .Selectable()
                        .Navigatable()
                        .ClientTemplateId("template_status")
                        .Events(events => events.Change("checkboxChange"))
                        .DataSource(dataSource =>
                        {
                            dataSource
                            .ServerOperation(false)
                             .Events(events => events
                                 .RequestStart("onGroupListReqStart_status")
                                 .RequestEnd("onGroupListReqEnd_status")

            )
                            .Read(read => read.Action("GetOfficerNames_List", "GIS").Data("fetchCustomerID"));
                        })
            )



        </div>

@section ExportButtons
{
    @*Export options - Step 1 *@
    <div class="export-buttons" id="exportButtons">
        <a id="exportExcel" class="exportButton" href="@Url.Action("ExportToExcel_OfficerRoute", new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~", officerID = "~"})">
            <img src='/images/export-excel.png' />
        </a>
        <a id="exportCSV" class="exportButton" href="@Url.Action("ExportToCsv_OfficerRoute", new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~", officerID = "~"})">
            <img src='/images/export-csv.png' />
        </a>
        <a id="exportPDF" class="exportButton" href="@Url.Action("ExportToPdf_OfficerRoute", new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~", officerID = "~"})">
            <img src='/images/export-pdf.png' />
        </a>
    </div>
}


<div id="DivCustomerDetails" style="display: none;">

    @(Html.Kendo().Grid<Duncan.PEMS.Entities.GIS.GISOfficerRouteModel>()

        .Name("grdCustomerDetails")
        .Columns(col =>
        {
            col.Bound(a => a.officerID).Title("Officer Id").Width("130px");
            col.Bound(a => a.officerName).Title("Officer Name").Width("130px");
            col.Bound(a => a.officerActivity).Title("Activity").Width("129px");
            col.Bound(a => a.dateOnly).Title("Activity Date").Width("140px");
            col.Bound(a => a.startTime).Title("Time").Width("140px");
            //col.Bound(a => a.endTime).Title("End Time").Width("140px");
            //col.Bound(a => a.startTime).Title("Start Time").Width("140px");
            col.Bound(a => a.Latitude).Title("Latitude").Width("100px");
            col.Bound(a => a.Longitude).Title("Longitude").Width("100px");

        }
            )
            // .Scrollable()
               .Navigatable()
                .Sortable()
                .AutoBind(false)
                .Groupable()
                .Pageable(x =>
                {
                    x.Enabled(true);
                    x.PreviousNext(true);
                    x.PageSizes(true);
                    x.Info(true);
                    x.Input(true);
                    x.Numeric(true);
                    x.Refresh(false);
                })

                .Filterable()
                .Reorderable(reoder => reoder.Columns(true))
                .Selectable(selectable => selectable
                .Mode(GridSelectionMode.Single))
                .Events(events => events.Change("onGridRowSelected").DataBound("onDataBound"))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetOfficerRouteDetails", "GIS").Data("GetAllFilterData"))
                .PageSize(50)
                )
                .Resizable(resize => resize.Columns(true))
                .Pageable(pager => pager.PageSizes(new int[] { 50, 100, 200 })) // Enable paging

    )


</div>

@section Scripts
{
    @*<script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>*@

    @*<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>   <!-- Added by Sai on May 28th 2013 -->*@
      @*<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>   <!-- Added by Sai on May 28th 2013 -->*@
      <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>   <!-- Added by Sai on May 28th 2013 -->
    <script type="text/javascript" src="/scripts/markermanager_packed.js"></script> <!-- Added by Sai on June 26th 2013 -->
    <script type="text/javascript" src="/scripts/markerwithlabel_packed.js"></script> <!-- Added by Sai on Oct 24th 2014 -->
    <script type="text/javascript" src="/scripts/maplabel-compiled.js"></script> <!-- Added by Sai on July 10th 2013 -->
    <script type="text/javascript" src="/scripts/spin.min.js"></script> <!-- Added by Sai on July 2nd 2013 -->
    <script src="/scripts/nscgis.js"></script>  <!-- Added by Sai on May 28th 2013 -->
    <script src="/scripts/v3_epoly.js"></script>  <!-- Added by Sai on May 28th 2013 -->
    <script type="text/javascript" src="~/Scripts/html2canvas.js"></script>

    <script type="text/x-kendo-tmpl" id="template_status">
        <div>
            @*<input type="checkbox" class="clickStatus" onclick="checkboxChange(this)" name='#:Text#'   />*@
            <span style='width:100%;fontSize:16;font-family: "Lucida Grande", "Arial", sans-serif;'>#:Text# </span>

        </div>

    </script>

    <script>


        var spinner;
        var timeInterval;
        var AssetStatus_timeInterval;
        var spCrit_layer_2_timeInterval;
        var isLegendDisplayed = false;
        var ROOT = '@Url.Content("~/")';

        var uniqueNames = [];
        var uniqueSensors = [];
        var StatListBoxSelections = [];
        var SensorListBoxSelections = [];


        var isAssetTypeLoaded = false;
        var isAssetStatusLoaded = false;
        var isLocationTypeLoaded = false;
        var isDemandZonesLoaded = false;
        var isLayer2_SpecCriteriaLoaded = false;
        var isLayer3_SpecCriteriaLoaded = false;

        var legendImagesArr = [
                           //** Inventory Layer Icons
                           ROOT + 'Images/msm_high_demand.png',
                           ROOT + 'Images/msm_low_demand.png',
                           ROOT + 'Images/msm_low_medium_demand.png',
                           ROOT + 'Images/msm_medium_high_demand.png',

                           ROOT + 'Images/sensor_high_demand.png',
                           ROOT + 'Images/sensor_low_demand.png',
                           ROOT + 'Images/sensor_low_medium_demand.png',
                           ROOT + 'Images/sensor_medium_high_demand.png',

                           ROOT + 'Images/gateway_high_demand.png',
                           ROOT + 'Images/gateway_low_demand.png',
                           ROOT + 'Images/gateway_low_medium_demand.png',
                           ROOT + 'Images/gateway_medium_high_demand.png',

                           ROOT + 'Images/space_high_demand.png',
                           ROOT + 'Images/space_low_demand.png',
                           ROOT + 'Images/space_low_med_demand.png',
                           ROOT + 'Images/space_med_high_demand.png',

                           //** High Demand Parking Bays Layer Icons
                           ROOT + 'Images/Occupied.png',
                           ROOT + 'Images/vacant.png',
                           ROOT + 'Images/Compliant.png',
                           ROOT + 'Images/Non_Compliant.png',

                           //** Parking Meter Operations Layer Icons
                           ROOT + 'Images/Inactive.png',
                           ROOT + 'Images/Operational.png',
                           ROOT + 'Images/Non_Operational_With_Alarm.png',
                           ROOT + 'Images/Operational_With_Alarm.png',
                           ROOT + 'Images/Non_Operational_With_Special_Event.png',
                           ROOT + 'Images/Non_Operational_With_Work_Zone.png',
                           ROOT + 'Images/Non_Operational_With_Maintenance.png',

                           //** Officer location and route Icons
                           ROOT + 'Images/officerIcon.png',
                           ROOT + 'Images/car.png',
                           ROOT + 'Images/citationIssued.png',

                           ROOT + 'Images/greenMarker.png',
                           ROOT + 'Images/blueMarker.png',
                           ROOT + 'Images/pinkMarker.png',
                           ROOT + 'Images/lightyellowMarker.png',
                           ROOT + 'Images/brownMarker.png',
                           ROOT + 'Images/yellowMarker.png',

                            ROOT + 'Images/orangeMarker.png',
                            ROOT + 'Images/redMarker.png',
                            ROOT + 'Images/creamMarker.png',
                            ROOT + 'Images/coffeeBreak.png',
                            ROOT + 'Images/grayIcon.png'





        ]



    </script>

    @Scripts.Render("~/bundles/kendo")

    @*Scripts by Sampath Start*@

    <script type="text/javascript">



        var startD = new Date();
        startD.setDate(new Date('@ViewData[Constants.ViewData.CurrentLocalTimeDisplay]').getDate());
        startD.setHours(0);
        startD.setMinutes(0);
        startD.setSeconds(0);
        var endD = new Date('@ViewData[Constants.ViewData.CurrentLocalTimeDisplay]');
        endD.setDate(endD.getDate());
        endD.setHours(23);
        endD.setMinutes(59);
        endD.setSeconds(59);

        var viewModel = kendo.observable({
            assetTypes: "",
            assetType: "All",
            assetStatus: "All", //** newly added on 19th july
            showPoly: "All", //** newly added on 19th july
            assetId: null,
            assetName: null,
            eventCode: null,
            startDate: startD,
            myOfficerID: "",
            endDate: endD,
            locationTypes: ["All", "Area", "Zone", "Street", "Suburb", "Demand Area"],
            locationType: "All",
            location: "Select Location type",
            locationLabel: "Location:",

            OnLocationTypeChange: function () {
                // 'Location Type' filter (e.g. Area ID, Suburb, etc) drives the location input.
                // So when the location type drop-down is changed, update the location type label

                var $locationInput = $('#txtLocation');

                switch (viewModel.locationType) {
                    case 'All':
                        $locationInput.attr("disabled", "disabled"); // disable textbox
                        $locationInput.addClass('disabled'); // gray background
                        viewModel.set("location", "Please select location type");
                        viewModel.set("locationLabel", "Location:");
                        break;
                    default:
                        $locationInput.removeAttr("disabled");
                        $locationInput.removeClass('disabled');
                        viewModel.set("locationLabel", viewModel.locationType + ':');
                        viewModel.set("location", "");
                }
            },



        });

        function onAnimBtnClicked() {
            if ($("#showAnimBtn").prop('checked') == true) {
                //** Display the Animation speed control
                $('#animSpeedControl').css('display', 'inline');
            } else {
                $('#animSpeedControl').css('display', 'none');
            }
        }

        //function checkboxChange(e) {
        //    var check = e.checked;
        //    var listview = $(e).closest(".k-listview").data("kendoListView");

        //    //Get Selected rows's data
        //    var dataItem = listview.dataSource.view()[listview.select().index()];

        //    var myValue = dataItem.Text;
        //    //if (check == true) {
        //    //    uniqueNames.push(myValue);
        //    //}

        //    uniqueNames.push(myValue);

        //    //** Remove duplicates from the array using jquery
        //    StatListBoxSelections = [];
        //    $.each(uniqueNames, function (i, el) {
        //        if ($.inArray(el, StatListBoxSelections) === -1) StatListBoxSelections.push(el);
        //    });

        //    var checkAll = [];
        //    var items = document.getElementsByClassName('clickStatus');
        //    for (var i = 0; i < items.length; i++)
        //        if (items[i].checked == true) {
        //            checkAll.push(items[i].name);

        //        }

        //    alert('StatListBoxSelections' + StatListBoxSelections);
        //    //if (checkAll.length > 0) {
        //    //    var AutoComplete = $("#groupListBox").data("kendoListView");
        //    //    AutoComplete.dataSource.read();
        //    //}
        //    //if (checkAll.length == 0) {
        //    //    var grplistBoxUI = $("#groupListBox").data("kendoListView");
        //    //    grplistBoxUI.dataSource.data({});
        //    //}

        //};

        function checkboxChange() {
            //var selected = $.map(this.select(), function (item) {
            //    return $(item).text();
            //});

            var listview = $("#assetStatusDropDown").closest(".k-listview").data("kendoListView");

            //Get Selected rows's data
            var dataItem = listview.dataSource.view()[listview.select().index()];

            var myValue = dataItem.Text;
            uniqueNames = [];
            uniqueNames.push(dataItem.Value);

            //** Remove duplicates from the array using jquery
            StatListBoxSelections = [];
            $.each(uniqueNames, function (i, el) {
                if ($.inArray(el, StatListBoxSelections) === -1) StatListBoxSelections.push(el);
            });


        };


        function resizeGrid() {
            var gridElement = $("#grdCustomerDetails");
            gridElement.data("kendoGrid").resize();
        }

        function onOffNameChanged() {

            //var offName = $("#assetStatusDropDown").data("kendoDropDownList").text();
            //var dropdownlist = $("#officerID_DD").data("kendoDropDownList");
            //if (offName == "Please select...") {
            //    //** enable the officer name dd
            //    dropdownlist.enable(true);
            //} else {
            //    //** disable the officer name dd
            //    dropdownlist.enable(false);
            //}

        }

        function onGroupListReqStart_status() {
            $('#StatusBox').addClass('k-loading-image');
        }

        function onGroupListReqEnd_status(e) {

            $('#StatusBox').removeClass('k-loading-image');

            //var AutoComplete = $("#groupListBox").data("kendoListView");
            //AutoComplete.dataSource.read();

        }

        function onOffIDChanged() {
            var offID = $("#officerID_DD").data("kendoDropDownList").text();
            var dropdownlist = $("#assetStatusDropDown").data("kendoDropDownList");
            if (offID == "Please select...") {
                //** enable the officer name dd
                dropdownlist.enable(true);
            } else {
                //** disable the officer name dd
                dropdownlist.enable(false);
            }

        }

        //** STEP-2
        var gridFilters = { "CurrentPage": 1, "PageSize": 50 };
        var sorts = {};


        //** STEP-3a
        function UpdateGridState() {

            /// Update the grid state object with grid's current state
            var currentGrid = $("#grdCustomerDetails").data("kendoGrid");

            gridFilters.CurrentPage = currentGrid.dataSource.page();

            //gridFilters.SelectedRow = currentGrid.select().index();
            gridFilters.sorts = JSON.stringify(currentGrid.dataSource._sort);

            gridFilters.pageSize = currentGrid.dataSource.pageSize();

        }

        //** STEP-3b
        function UpdateExportLinks() { //** Export options - Step 3

            /// Update the href for the export buttons
            var grid = $('#grdCustomerDetails').data('kendoGrid');

            // ask the parameterMap to create the request object for you
            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
                .options.parameterMap({
                    page: grid.dataSource.page(),
                    sort: grid.dataSource.sort(),
                    filter: grid.dataSource.filter()
                });

            //EXCEL
            var $excelLink = $('#exportExcel');
            $excelLink.attr('href', GetExportHref($excelLink.attr('href'), requestObject, grid));

            //CSV
            var $csvLink = $('#exportCSV');
            $csvLink.attr('href', GetExportHref($csvLink.attr('href'), requestObject, grid));

            //PDF
            var $pdfLink = $('#exportPDF');
            $pdfLink.attr('href', GetExportHref($pdfLink.attr('href'), requestObject, grid));


            $("#exportButtons").css("display", "inline");

        }

        function GetExportHref(href, requestObject, grid) { //** Export options - Step 4
            // Update the 'page' parameter with the grid's current page
            href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');
            // Update the 'sort' parameter with the grid's current sort descriptor
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            // Update the 'pageSize' parameter with the grid's current pageSize
            //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);
            href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + 100000);  //** sai modified pagesize to export all pages on jan 1st 2015
            //update filter descriptor with the filters applied
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

            var $StartDate = $('#dp-1').val();//viewModel.get('startDate');
            href = href.replace(/startDate=([^&]*)/, 'startDate=' + ($StartDate));

            var $EndDate = $('#dp-2').val();//viewModel.get('endDate');
            href = href.replace(/endDate=([^&]*)/, 'endDate=' + ($EndDate));

            var $officerID = viewModel.get('myOfficerID');
            href = href.replace(/officerID=([^&]*)/, 'officerID=' + ($officerID));

            return href;
        }

        //$(document.body).keydown(function (e) {
        //    if (e.altKey && e.keyCode == 87) {
        //        $("#assetStatusDropDown").focus();
        //    }
        //});

        $(document).ready(function () {

            loadGoogleMap('@Model.Latitude', '@Model.Longitude'); //** Sairam added on OCt 3rd 2014;


            //** Make the map invisible for the first time when the page is loaded.
            $("#mHolder").css('display', 'none');
            $('#DivCustomerDetails').css('display', 'none'); //** When the page loads for the first time, Don't show Grid.
            $('#legendPanel').css('display', 'none');

            $('#animSpeedControl').css('display', 'none');

            //** Declare Filter panel Window
            var myWindow = $("#window");
            myWindow.kendoWindow({
                width: "180px",
                title: "Officer Name",
                visible: true,
                //animation: {
                //    open: {
                //        effects: "slideIn:up fadeIn",
                //        duration: 1000
                //    },
                //    close: {
                //    }
                //},
                actions: {},
                close: onClose,
                resizable: false
            }).data("kendoWindow");



            //** Display checkbox for Chrome and other browsers
            var userAgent = navigator.userAgent.toLowerCase();
            if ($.browser.chrome) {
                $(".squaredThree").css("display", "inline");
                $(".generalCheckBox").css("display", "none");
            } else if (/msie/.test(userAgent) && parseFloat((userAgent.match(/.*(?:rv|ie)[\/: ](.+?)([ \);]|$)/) || [])[1]) <= 9) {
                // Test if the browser is IE and check the version number is lower than or equal 9
                $(".squaredThree").css("display", "none");
                $(".generalCheckBox").css("display", "inline");
            } else if (/msie/.test(userAgent) && parseFloat((userAgent.match(/.*(?:rv|ie)[\/: ](.+?)([ \);]|$)/) || [])[1]) > 9) {
                // Test if the browser is IE and check the version number is greater than 9
                $(".squaredThree").css("display", "inline");
                $(".generalCheckBox").css("display", "none");
            } else {
                //** Other browsers
                $(".squaredThree").css("display", "inline");
                $(".generalCheckBox").css("display", "none");
            }


            // bind the view model to the filter controls
            kendo.bind($(document.body), viewModel);

            // when the view state changes, cache it
            viewModel.bind("change", function (e) {
            });

            $("#hdnIdCheckPageLoad").val("");

            $('#autocompleteAssetId').keypress(function (key) {
                var charCode = (typeof key.which == "number") ? key.which : key.keyCode
                //** Check for empty asset id and if so, empty the corresponding asset name
                if (key.charCode == 46 || key.charCode == 8 || key.charCode == 0 || charCode == 0) {

                    var assetIdTxt = $("#autocompleteAssetId").val()
                    if (assetIdTxt.length == 0 || assetIdTxt.length == 1) //** Asset ID becomes empty
                    {
                        $("#txtAssetName").val("");
                    }
                }

                if (charCode != 46 && charCode != 8 && charCode != 0) //** allows only backspace and delete keys
                {
                    if (charCode < 48 || charCode > 57) {
                        return false;
                    }

                }

            });


            // timeInterval = window.setInterval(function () { multiSelectAssetTypeDropDownFunc(); }, 1000);
            //AssetStatus_timeInterval = window.setInterval(function () { multiSelectAssetStatusDropDownFunc(); }, 1000);
            loadLegendDetails();

            function onClose() {
                $('#filterPanel').css('visibility', 'visible');
            }

            function multiSelectAssetTypeDropDownFunc() {
                window.clearInterval(timeInterval)

                //** The below codes are for asset type selection
                var firstValueMultiselect = $('#ddlAssetType');
                firstValueMultiselect.kendoMultiSelectBox({
                    dataTextField: "Text",
                    dataValueField: "Value",
                    dataSource: {
                        transport: {
                            read: {
                                url: "../GIS/GetAssetTypes",
                                dataType: 'json',
                            },

                            parameterMap: function (options, type) {
                                if (type === 'read') {
                                    var layerID = $("#layerDropDown").val();
                                    return { LayerID: layerID }
                                }
                            }

                        }

                    },
                    emptySelectionLabel: "All",//"Please select...",
                    value: ["0"],
                    placeholder: "All"
                });

                firstValueMultiselect.data("kendoMultiSelectBox").bind("selectionChanged", function (e) {
                    FilterAssetIds();
                });

            }

            //******





            function isIE() {
                var myNav = navigator.userAgent.toLowerCase();
                return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;
            }


            function getLegendDetails(xml, layerName) {


                $("<p id='ifwTitle'></p>").text('  Officer').appendTo("#legendPanel");




                //** Image 1
                var legendImage = "@Url.Content("~/Images/carLegend.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;" + 'Officer Route' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 2a
                var legendImage = "@Url.Content("~/Images/citationIssued.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Citation Issued' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)



                //** Image 3
                var legendImage = "@Url.Content("~/Images/greenMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Login' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 4
                var legendImage = "@Url.Content("~/Images/blueMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Log out' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 5
                var legendImage = "@Url.Content("~/Images/pinkMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Parking' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 6
                var legendImage = "@Url.Content("~/Images/lightyellowMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Plate Permit' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 7
                var legendImage = "@Url.Content("~/Images/brownMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Mark Mode' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 2b
                var legendImage = "@Url.Content("~/Images/yellowMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Lunch break' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 8
                var legendImage = "@Url.Content("~/Images/orangeMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Direct Traffic' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 9
                var legendImage = "@Url.Content("~/Images/redMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Damaged Sign' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 10
                var legendImage = "@Url.Content("~/Images/creamMarker.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Meter Status' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)

                //** Image 11
                var legendImage = "@Url.Content("~/Images/coffeeBreak.png")";
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': 'Officer', 'src': legendImage, 'alt': 'Officer' })

                var imageHolder = $('<div style="display:inline";>').html(img);
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + 'Coffee Break' + "</p>")
                var legItem = $("<div style='width:210px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)



            }

            function drawStLine() {
                var legendImage = "@Url.Content("~/Images/stLine.png")";
                var img = $('<img style="float:left;margin-left:0px;"/>').attr({ 'id': 'stLiner', 'src': legendImage, 'alt': 'stLiner' })
                var imageHolder = $('<div style="display:inline";>').html(img);
                $("#legendPanel").append(imageHolder)
            }

            function loadLegendDetails() {

                $("#legendPanel").append("<div></div>");
                $.ajax({
                    type: "GET",
                    // url: "@Url.Content("~/legendDetails.xml")",
                    url: "@Url.Content("~/Images/legendDetails.xml")",
                    dataType: "xml",
                    success: function (xml) {

                        //** Inventory Layer legends (if any)
                        getLegendDetails(xml, 'OfficerLoc')
                        // drawStLine()

                    },
                    error: function () {
                        alert("An error occurred while processing XML file.");
                    }
                });

            }


            function multiSelectPolygonDropDownFunc() {

                //** The below codes are for asset type selection
                var polygonMultiselect = $('#showPolygonDropDown');

                polygonMultiselect.kendoMultiSelectBox({
                    dataTextField: "Text",
                    dataValueField: "Value",
                    dataSource: [{ "Value": "1", "Text": "Areas" }, { "Value": "2", "Text": "Zones" }],
                    emptySelectionLabel: "Please select...",
                    value: ["0"]
                });

                polygonMultiselect.data("kendoMultiSelectBox").bind("selectionChanged", function (e) { });

            }



            function multiSelectAssetStatusDropDownFunc() {

                window.clearInterval(AssetStatus_timeInterval)

                //** The below codes are for asset type selection
                var assetStatus_Multiselect = $('#assetStatusDropDown');

                assetStatus_Multiselect.kendoMultiSelectBox({
                    dataTextField: "Text",

                    dataValueField: "Value",
                    dataSource: {
                        transport: {
                            read: {
                                url: "../GIS/GetOfficerNames",
                                dataType: 'json',
                            },

                            parameterMap: function (options, type) {
                                if (type === 'read') {
                                    var CustomerId = '@ViewBag.CurrentCityID';
                                    return { customerid: CustomerId }
                                }
                            }

                        }
                    },
                    emptySelectionLabel: "All",//"Please select...",
                    value: ["0"]
                });

                assetStatus_Multiselect.data("kendoMultiSelectBox").bind("selectionChanged", function (e) { });

            }

            function multiSelect_SpecificCrtieria_Layer2_DropDownFunc() {

                window.clearInterval(spCrit_layer_2_timeInterval)
                //** The below codes are for asset type selection
                var specCriteria_Multiselect = $('#specificCriteria_Layer2');

                specCriteria_Multiselect.kendoMultiSelectBox({
                    dataTextField: "Text",
                    dataValueField: "Value",
                    dataSource: {
                        transport: {
                            read: "../GIS/GetOccupancyStatus"
                        }
                    },
                    emptySelectionLabel: "All",//"Please select...",
                    value: ["0"]
                });

                specCriteria_Multiselect.data("kendoMultiSelectBox").bind("selectionChanged", function (e) { });

            }

            function multiSelect_SpecificCrtieria_Layer3_DropDownFunc() {

                window.clearInterval(spCrit_layer_3_timeInterval)
                //** The below codes are for asset type selection
                var specCriteria_Multiselect = $('#specificCriteria_Layer3');

                specCriteria_Multiselect.kendoMultiSelectBox({
                    dataTextField: "Text",
                    dataValueField: "Value",
                    dataSource: {
                        transport: {
                            read: "../GIS/GetOperationalStatus"
                        }
                    },
                    emptySelectionLabel: "All",//"Please select...",
                    value: ["0"]
                });

                specCriteria_Multiselect.data("kendoMultiSelectBox").bind("selectionChanged", function (e) { });

            }


        });



    </script>

    <script type="text/javascript">

        var AssetType;
        var AssetStatus;
        var showPolygons;
        var processPolygonValue;
        var layer2_Criteria;
        var layer3_Criteria;
        var temp = 0;
        function onGridRowSelected(e) {
            var selectedRows = this.select();
            var selectedDataItems = [];
            for (var i = 0; i < selectedRows.length; i++) {
                var dataItem = this.dataItem(selectedRows[i]);
                selectedDataItems.push(dataItem);
            }
            layerNameIs = $("#layerDropDown").val();
            var assetIdValue = selectedDataItems[0].AssetId
            showInfoOnGridRowSelected_OffRoute(selectedDataItems, layerNameIs)
        }


        function onSpeedChange(arg) {
            var speed = $("#animSpeed").val();
            alterAnimSpeed(speed)
        }




        function onDataBound(arg) {

            var result = $("#grdCustomerDetails").data().kendoGrid.dataSource.data()
            showProgressBar(false); //** Hide Progress bar animation after the server response;

            if (result.length == 0) {
                clearRoute();
                alert('No data.');
                return;
            }



            //**First clear both the Grid and Map
            $("#mHolder").css('display', 'none');
            $('#DivCustomerDetails').css('display', 'none');

            //** Check the states of 'Show Map' and 'Show Grid' buttons



            if ($("#showGridBtn").prop('checked') == true) {

                window.setTimeout(function () { resizeGrid(); }, 1);
                //** Display the Grid part
                $("#DivCustomerDetails").show();
                $('#DivCustomerDetails').css('display', 'inline');
            }



            //************************************************************************************************
            var grid = $("#grdCustomerDetails").data("kendoGrid");
            var grouping = grid.dataSource.group();
            var dataSource = grid.dataSource;
            var view = dataSource.view();
            if (grouping.length > 0) {
                result = [];
            }

            if (grouping.length == 1) {
                for (var i = 0; i < view.length; i++) {
                    for (var j = 0; j < view[i].items.length; j++) {
                        result.push(view[i].items[j])
                    }
                }
            } else if (grouping.length == 2) {
                for (var i = 0; i < view.length; i++) {  //no. of views = 2
                    var holder_1 = view[i].items  //view_0, view_1
                    for (var j = 0; j < holder_1[0].items.length; j++) {
                        result.push(holder_1[0].items[j])
                    }
                }
            } else if (grouping.length == 3) {
                for (var i = 0; i < view.length; i++) {  //no. of views = 2
                    var holder_1 = view[i].items  //view_0, view_1
                    var holder_2 = holder_1[0].items
                    for (var j = 0; j < holder_2[0].items.length; j++) {
                        result.push(holder_2[0].items[j])
                    }
                }
            } else if (grouping.length == 4) {
                for (var i = 0; i < view.length; i++) {  //no. of views = 2
                    var holder_1 = view[i].items  //view_0, view_1
                    var holder_2 = holder_1[0].items
                    var holder_3 = holder_2[0].items
                    for (var j = 0; j < holder_3[0].items.length; j++) {
                        result.push(holder_3[0].items[j])
                    }
                }
            } else if (grouping.length == 5) {
                for (var i = 0; i < view.length; i++) {  //no. of views = 2
                    var holder_1 = view[i].items  //view_0, view_1
                    var holder_2 = holder_1[0].items
                    var holder_3 = holder_2[0].items
                    var holder_4 = holder_3[0].items
                    for (var j = 0; j < holder_4[0].items.length; j++) {
                        result.push(holder_4[0].items[j])
                    }
                }
            } else if (grouping.length == 6) {
                for (var i = 0; i < view.length; i++) {  //no. of views = 2
                    var holder_1 = view[i].items  //view_0, view_1
                    var holder_2 = holder_1[0].items
                    var holder_3 = holder_2[0].items
                    var holder_4 = holder_3[0].items
                    var holder_5 = holder_4[0].items
                    for (var j = 0; j < holder_5[0].items.length; j++) {
                        result.push(holder_5[0].items[j])
                    }
                }
            }

            //** Once the results are grouped, then Show/Hide occupancy status and operation status descriptions as per layer selection
            var layerValue = $("#layerDropDown").val();
            var grid = $("#grdCustomerDetails").data("kendoGrid");



            if ($("#showMapBtn").prop('checked')) {

                //** Display the Map part
                $("#mHolder").css('display', 'inline');
                if (temp == 0) {
                    temp = 1;
                    redrawMap();
                    if (isLegendDisplayed == false) {
                        showLegendPanel();
                        isLegendDisplayed = true;
                        $('#legendPanel').scroll();
                    }

                    if (result.length > 0) {
                        //** Invoke No. of Citations issued action method
                        var AutoComplete = $("#hiddenField").data("kendoDropDownList");
                        AutoComplete.dataSource.read();
                        AutoComplete.refresh();

                        //** First plot all the way point markers for this route
                        plotMarkers_RouteActivity(result, legendImagesArr);

                        //** Plot the route
                        if ($("#showAnimBtn").prop('checked') == true) {
                            //calcRoute(result, legendImagesArr, "true");
                            runRoutes(result, legendImagesArr, "true");
                        } else {
                            // calcRoute(result, legendImagesArr, "false");
                            runRoutes(result, legendImagesArr, "false");
                        }



                    }

                }
            }

            //** Export options - Step 3

            UpdateGridState();
            UpdateExportLinks();

        }

        function onDataBound_HiddenField() {
            var result = $("#hiddenField").data().kendoDropDownList.dataSource.data()
            showProgressBar(false); //** Hide Progress bar animation after the server response;

            if (result.length == 0) {
                // alert('No data.');
                return;
            }
            if (result.length > 0) {
                //** Plot all the citations Issued by the officer for the given date
                plotMarkers_CitIssuedByOfficer(result, legendImagesArr);
            }


        }

        function onDataBound_AssetType() {
            isAssetTypeLoaded = true;
        }

        function onDataBound_AssetStatus() {
            isAssetStatusLoaded = true;
        }

        function onDataBound_LocationType() {
            isLocationTypeLoaded = true;
        }

        function onDataBound_DemandZones() {
            isDemandZonesLoaded = true;
        }

        function onDataBound_SpecCriteria_HDPB() {
            isLayer2_SpecCriteriaLoaded = true;
        }

        function onDataBound_SpecCriteria_PMO() {
            isLayer3_SpecCriteriaLoaded = true;
        }


        function GetCustomerGridDetails_func(IsClicked, ClickType) {

            //animControl.value = "PAUSE"; //reset to pause whenever refresh btn is clicked;
            var listview = $("#assetStatusDropDown").closest(".k-listview").data("kendoListView");

            //Get Selected rows's data
            var dataItem = listview.dataSource.view()[listview.select().index()];
            if (dataItem == "undefined") {
                alert('Please select an officer to view the route.')
                return false;
            }

            if (IsClicked == "clicked") {

                if (isAssetStatusLoaded == false) {
                    alert('The GIS filters are being processed. Please wait until processing is completed.')
                    return false
                }

                showProgressBar(false); //** Display Progress bar animation till the server returns response;

                var $startDate = viewModel.startDate;



                //Test to see if the start date is not empty, and if it is a valid date
                if (!Date.parse($startDate)) {
                    alert("Start Date Must Be A Valid Date");
                    return;
                }
                var $endDate = viewModel.endDate;

                //Test to see if the end date is not empty and if it is a valid date
                if (!Date.parse($endDate)) {
                    alert("End Date Must Be A Valid Date");
                    return;
                }


                //Test to see if start date is less than end date
                if ($startDate != '' && $endDate != '') {
                    if (Date.parse($startDate) > Date.parse($endDate)) {
                        alert("End Date Must Be Greater Than Start Date");
                        return;
                    }
                }


                //** Validation for one day date range

                var dayIs = viewModel.startDate;
                var day = dayIs.getDate()
                var month = viewModel.startDate.getMonth() + 1
                var year = viewModel.startDate.getFullYear()
                var tempStartDate = day + '/' + month + '/' + year;

                var day = viewModel.endDate.getDate()
                var month = viewModel.endDate.getMonth() + 1
                var year = viewModel.endDate.getFullYear()
                var tempEndDate = day + '/' + month + '/' + year;

                //if (dateDiff(tempStartDate, tempEndDate) > 0)
                //{
                //    alert("Route animation can be viewed for a single day only.");
                //    return;
                //}

                if (CheckValidations()) {

                    var CustomerId = '@ViewBag.CurrentCityID';

                    if ($("#showMapBtn").prop('checked') == false && $("#showGridBtn").prop('checked') == false) {
                        //**Don't execute any service if none of the checkbox options are chosen.
                        alert('Please select either Show Map or Show Grid before Refresh is clicked.')
                        return false;
                    } else if ($("#showMapBtn").prop('checked') == true && $("#showGridBtn").prop('checked') == false) {
                        invokeDataSource(100000) //** set the maximum no. of records as 1 lakh

                    } else {
                        //** Either if map and/or Datagrid options are chosen.
                        invokeDataSource(50) //** set the default no. of records as 50
                    }

                }
            }

        }

        function dateDiff(date1, date2) {
            //Get 1 day in milliseconds
            var one_day = 1000 * 60 * 60 * 24;

            // Convert both dates to milliseconds
            var date1_ms = new Date(date1).getTime();
            var date2_ms = new Date(date2).getTime();

            // Calculate the difference in milliseconds
            var difference_ms = date2_ms - date1_ms;

            // Convert back to days and return
            return Math.round(difference_ms / one_day);
        }

        function invokeDataSource(maxCount) {
            temp = 0;
            //** The below line needs to be uncommented after fetching service
            showProgressBar(true); //** Display Progress bar animation till the server returns response;

            //** The below 4 lines of grid are commented temporarily.
            //var grid = $("#grdCustomerDetails").data("kendoGrid");

            //grid.dataSource.pageSize(maxCount);
            //grid.dataSource.groupable(false);
            //grid.dataSource.read();

            var offName_disabledState = $("#assetStatusDropDown").prop('disabled');
            //********************************************************************************
            if (offName_disabledState == false) {
                //**Officer Name validation



                //var getTxtFromAssetStatus = $("#assetStatusDropDown").data("kendoDropDownList").text()
                //if (getTxtFromAssetStatus == "All") {
                //    //** 'All' is selected by default
                //    OfficerID = "All";
                //    viewModel.set('myOfficerID', OfficerID);
                //} else if (getTxtFromAssetStatus == "Please select...") {
                //    alert('Please select Asset Status.');
                //    return;
                //}
                //else {
                //    OfficerID = $("#assetStatusDropDown").val();
                //    viewModel.set('myOfficerID', OfficerID);
                //}

            } else {
                //********************************************************************************
                //**Officer ID validation
                //var getTxtFromAssetStatus = $("#officerID_DD").data("kendoDropDownList").text()
                //if (getTxtFromAssetStatus == "All") {
                //    //** 'All' is selected by default
                //    OfficerID = "All";
                //    viewModel.set('myOfficerID', OfficerID);
                //} else if (getTxtFromAssetStatus == "Please select...") {
                //    alert('Please select Asset Status.');
                //    return;
                //}
                //else {
                //    OfficerID = $("#officerID_DD").data("kendoDropDownList").text();
                //    viewModel.set('myOfficerID', OfficerID);
                //}

            }
            //********************************************************************************

            var $filter = new Array();

            // Date Range
            var startDate = viewModel.startDate;
            var endDate = viewModel.endDate;
            if (startDate) {
                gridFilters.DateRangeFrom = startDate;
                $filter.push({ field: "StartDate", operator: "gte", value: startDate });
            }
            if (endDate) {
                gridFilters.DateRangeTo = endDate;
                $filter.push({ field: "EndDate", operator: "lte", value: endDate });
            }

            // OfficerID

            viewModel.set('myOfficerID', StatListBoxSelections[0].toString());
            var OfficerIDIs = viewModel.get('myOfficerID');
            if (OfficerIDIs) {
                gridFilters.OfficerID = OfficerIDIs;
            }

            $filter.push({ field: "OfficerID", operator: "equals", value: OfficerIDIs });

            $("#grdCustomerDetails").data("kendoGrid").dataSource.filter($filter);
            $("#grdCustomerDetails").data("kendoGrid").dataSource.view({ page: gridFilters.CurrentPage, filter: $filter, pageSize: gridFilters.PageSize, sort: sorts });




        }




        function executeClearPOI() {
            var layerValue = $("#layerDropDown").val();
            //** Clear all the OLD data POI on the map for the respective layers
            if (layerValue == 1) {
                clearMap(InvMarkerRepository, invMgr, InvPolygonRepository_Area, InvPolylineRepository_Area, InvPolygonRepository_Zone, InvPolylineRepository_Zone)
            } else if (layerValue == 2) {
                clearMap(HdbMarkerRepository, hdbMgr, HdbPolygonRepository_Area, HdbPolylineRepository_Area, HdbPolygonRepository_Zone, HdbPolylineRepository_Zone)
            } else if (layerValue == 3) {
                clearMap(PmoMarkerRepository, pmoMgr, PmoPolygonRepository_Area, PmoPolylineRepository_Area, PmoPolygonRepository_Zone, PmoPolylineRepository_Zone)
            }
        }

        function executeClearPOI_Enforcement() {
            clearMap(InvMarkerRepository, invMgr, InvPolygonRepository_Area, InvPolylineRepository_Area, InvPolygonRepository_Zone, InvPolylineRepository_Zone)
            clearMap(HdbMarkerRepository, hdbMgr, HdbPolygonRepository_Area, HdbPolylineRepository_Area, HdbPolygonRepository_Zone, HdbPolylineRepository_Zone)
            clearMap(PmoMarkerRepository, pmoMgr, PmoPolygonRepository_Area, PmoPolylineRepository_Area, PmoPolygonRepository_Zone, PmoPolylineRepository_Zone)
        }

        function CheckValidations() {
            var listview = $("#assetStatusDropDown").closest(".k-listview").data("kendoListView");

            //Get Selected rows's data
            var dataItem = listview.dataSource.view()[listview.select().index()];
            if (dataItem.toString().toLowerCase() == "undefined") {
                alert('Please select an officer.');
                return;
            }



            //**Asset Status validation
            //var getTxtFromAssetStatus = $("#assetStatusDropDown").data("kendoDropDownList").text()
            //if (getTxtFromAssetStatus == "All") {
            //    //** 'All' is selected by default
            //    AssetStatus = -1;
            //} else if (getTxtFromAssetStatus == "Please select...") {
            //   // alert('Please select a officer.');
            //   // return;
            //}
            //else {
            //    AssetStatus = $("#assetStatusDropDown").val();
            //}
            var offName_disabledState = $("#assetStatusDropDown").prop('disabled');
            //********************************************************************************
            //**Officer Name validation
            if (offName_disabledState == false) {

                //var listview = $("#assetStatusDropDown").closest(".k-listview").data("kendoListView");

                ////Get Selected rows's data
                //var dataItem = listview.dataSource.view()[listview.select().index()];
                //var myValue = dataItem.Text;
                //if (myValue.length == 0) {
                //    alert('Please select an officer.');
                //    return;
                //}

                //var getTxtFromAssetStatus = $("#assetStatusDropDown").data("kendoDropDownList").text()
                //if (getTxtFromAssetStatus == "All") {
                //    //** 'All' is selected by default
                //    OfficerID = -1;
                //} else if (getTxtFromAssetStatus == "Please select...") {
                //    alert('Please select an officer.');
                //    return;
                //}
                //else {
                //    OfficerID = $("#assetStatusDropDown").val();
                //}
            } else {
                //**Officer ID validation
                //var getTxtFromAssetStatus = $("#officerID_DD").data("kendoDropDownList").text()
                //if (getTxtFromAssetStatus == "All") {
                //    //** 'All' is selected by default
                //    OfficerID = -1;
                //} else if (getTxtFromAssetStatus == "Please select...") {
                //    alert('Please select an officer.');
                //    return;
                //}
                //else {
                //    OfficerID = $("#officerID_DD").data("kendoDropDownList").text();
                //}
            }
            return true;
        }



        function GetAllFilterData() {
            var CustomerId = '@ViewBag.CurrentCityID';
            var offName_disabledState = $("#assetStatusDropDown").prop('disabled');
            //********************************************************************************
            //**Officer Name validation
            if (offName_disabledState == false) {
                //var getTxtFromAssetStatus = $("#assetStatusDropDown").data("kendoDropDownList").text()
                //if (getTxtFromAssetStatus == "All") {
                //    //** 'All' is selected by default
                //    OfficerID = -1;
                //} else if (getTxtFromAssetStatus == "Please select...") {
                //    alert('Please select an officer.');
                //    return;
                //}
                //else {
                //    OfficerID = $("#assetStatusDropDown").val();
                //}

                //StatListBoxSelections = [];
                //var items = document.getElementsByClassName('clickStatus');
                //for (var i = 0; i < items.length; i++)
                //    if (items[i].checked == true) {
                //        StatListBoxSelections.push(items[i].name);

                //    }

                var listview = $("#assetStatusDropDown").closest(".k-listview").data("kendoListView");

                //Get Selected rows's data
                var dataItem = listview.dataSource.view()[listview.select().index()];
                var myValue = dataItem.Text;
                if (myValue.length == 0) {
                    alert('Please select an officer.');
                    return;
                } else {

                }


            } else {
                //**Officer ID validation
                //var getTxtFromAssetStatus = $("#officerID_DD").data("kendoDropDownList").text()
                //if (getTxtFromAssetStatus == "All") {
                //    //** 'All' is selected by default
                //    OfficerID = -1;
                //} else if (getTxtFromAssetStatus == "Please select...") {
                //    alert('Please select an officer.');
                //    return;
                //}
                //else {
                //    OfficerID = $("#officerID_DD").data("kendoDropDownList").text();
                //}
            }
            //********************************************************************************

            //**start and end dates

            var $startDate = viewModel.startDate;
            var $endDate = viewModel.endDate;
            var finalStart = $('#dp-1').val();
            var finalEnd = $('#dp-2').val();

            //  viewModel.set('startDate', finalStart);
            //  viewModel.set('endDate', finalEnd);

            //return { customerId: CustomerId, startDate: finalStart, endDate: finalEnd, officerID: OfficerID }
            return { customerId: CustomerId, startDate: finalStart, endDate: finalEnd, officerID: StatListBoxSelections.toString() }
        }

        function GetAssetName() {

            var layerID = $("#layerDropDown").val();

            var MeterId = $("#autocompleteAssetId").val();

            $.ajax(
            {
                url: '../GIS/GetAssetName?meterId=' + MeterId + ',' + layerID,
                type: 'GET',
                contentType: 'application.json',
                success: function (data) {
                    $("#txtAssetName").val(data);
                },
                error: function () {

                }

            });

        }

        function SetLocationType() {
            var LocationType = $("#ddlLocationType").val();
            var CustomerId = '@ViewBag.CurrentCityID';
            return { locationType: LocationType, customerid: CustomerId }
        }

        function fetchCustomerID() {
            var CustomerId = '@ViewBag.CurrentCityID';
            return { customerid: CustomerId }
        }






        function SetAssetType() {

            var AssetType = $("#ddlAssetType").val();
            var layerID = $("#layerDropDown").val();

            return { officerName: AssetType, LayerID: layerID }
        }

        function GetLocationTypeId() {


            var AutoComplete = $("#autocompleteLocationId").data("kendoAutoComplete");

            var LocationType = $("#ddlLocationType").data("kendoDropDownList").text();
            $("#autocompleteLocationId").val("");
            if (LocationType != "All") {

                $("#lblLocationType").html(LocationType + ":");

            }
            else {

                $("#lblLocationType").html("Location:");
                $("#autocompleteLocationId").val("Select a type");
            }

            AutoComplete.dataSource.read();

            AutoComplete.refresh();


        }


        function FilterAssetIds() {

            if ($("#ddlAssetType").val() == "-2") {
                return;
            }
        }

    </script>

    @*Scripts by Sampath end *@


    @*Scripts by Sairam Start*@
    <script>
        //function layerChange() {
        //    var value = $("#layerDropDown").val();
        //    M_A_T_DropDownFunc();

        //    //** Change it to default value ('All') for all filters
        //    $("#ddlAssetType").data("kendoDropDownList").text("All")
        //    $("#ddlDemandZones").data("kendoDropDownList").text("All")
        //    $("#showPolygonDropDown").data("kendoDropDownList").text("All")
        //    $("#assetStatusDropDown").data("kendoDropDownList").text("All")
        //    $("#showPolygonDropDown").data("kendoDropDownList").text("Please select...")
        //    $("#specificCriteria_Layer2").data("kendoDropDownList").text("All")
        //    $("#specificCriteria_Layer3").data("kendoDropDownList").text("All")
        //    $("#ddlLocationType").data("kendoDropDownList").text("All")
        //    $("#lblLocationType").html("Location:");
        //    $("#autocompleteLocationId").val("Select a type");
        //    $("#autocompleteAssetId").val("");
        //    $("#txtAssetName").val("");

        //    $("#ddlLocationType").data("kendoDropDownList").select(0);
        //    $("#ddlDemandZones").data("kendoDropDownList").select(0);
        //    $("#showPolygonDropDown").data("kendoDropDownList").select(0);
        //    $("#assetStatusDropDown").data("kendoDropDownList").select(0);
        //    $("#specificCriteria_Layer2").data("kendoDropDownList").select(0);
        //    $("#specificCriteria_Layer3").data("kendoDropDownList").select(0);


        //    if (value == "1") {
        //        $('#filterPanel_2').css('display', 'none');
        //        $('#filterPanel_3').css('display', 'none');
        //        $('#filterPanel_1').css('display', 'inline');
        //        $('#stEndDate').css('display', 'none');
        //    } else if (value == "2") {
        //        $('#filterPanel_2').css('display', 'inline');
        //        $('#filterPanel_3').css('display', 'none');
        //        $('#filterPanel_1').css('display', 'inline');
        //        $('#stEndDate').css('display', 'none');
        //    } else if (value == "3") {
        //        $('#filterPanel_2').css('display', 'none');
        //        $('#filterPanel_3').css('display', 'inline');
        //        $('#filterPanel_1').css('display', 'inline');
        //        $('#stEndDate').css('display', 'inline');
        //    }


        //}

        function showProgressBar(visisbility) {

            if (visisbility == false) {
                if (spinner != null || spinner != undefined) {
                    spinner.stop() //** hide the PB
                }
            } else {
                //** Create spinner and display PB
                var opts = {
                    lines: 13, // The number of lines to draw
                    length: 0, // The length of each line
                    width: 5, // The line thickness
                    radius: 15, // The radius of the inner circle
                    corners: 1, // Corner roundness (0..1)
                    rotate: 48, // The rotation offset
                    direction: 1, // 1: clockwise, -1: counterclockwise
                    color: '#000', // #rgb or #rrggbb
                    speed: 1, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: false, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 2e9, // The z-index (defaults to 2000000000)
                    top: '380px', // Top position relative to parent in px
                    left: 'auto' // Left position relative to parent in px
                };
                spinner = new Spinner(opts).spin(document.body);
            }

        }

        //******************
        //MultiSelect - A user extension of KendoUI DropDownList widget.
        (function ($) {

            // shorten references to variables
            var kendo_MS = window.kendo,
                ui = kendo_MS.ui,
                DropDownList_MS = ui.DropDownList,
                keys = kendo_MS.keys,
                SELECT = "select",
                SELECTIONCHANGED = "selectionChanged",
                SELECTED = "k-state-selected",
                HIGHLIGHTED = "k-state-active",
                CHECKBOX = "custom-check-item",
                SELECTALLITEM = "custom-multiselect-selectAll-item",
                MULTISELECTPOPUP = "custom-multiselect-popup",
                EMPTYSELECTION = "custom-multiselect-summary-empty";




            var lineTemplate = '<input type="checkbox" name="#= {1} #" value="#= {0} #" class="' + CHECKBOX + '" />' +
                               '<span data-value=" #= {0} #"> #= {1} #</span>';



            var MultiSelectBox = DropDownList_MS.extend({

                init: function (element, options) {

                    options.template = kendo_MS.template(kendo_MS.format(lineTemplate, options.dataValueField, options.dataTextField));

                    // base call to widget initialization
                    DropDownList_MS.fn.init.call(this, element, options);
                },

                options: {
                    name: "MultiSelectBox",
                    index: 0,
                    showSelectAll: true,
                    preSummaryCount: 10,  // number of items to show before summarising
                    emptySelectionLabel: "All"//"Please select..."  // what to show when no items are selected
                },

                events: [
                    SELECTIONCHANGED
                ],

                refresh: function () {

                    // base call
                    DropDownList_MS.fn.refresh.call(this);

                    this._updateSummary();

                    $(this.popup.element).addClass(MULTISELECTPOPUP);
                },


                current: function (candidate) {
                    return this._current;
                },


                open: function () {
                    var that = this;

                    this._removeSelectAllItem();

                    this._addSelectAllItem();

                    if (!that.ul[0].firstChild) {
                        that._open = true;

                        if (!that._request) {
                            that.dataSource.fetch();
                        }
                    } else {
                        that.popup.open();
                        that._scroll(that._current);
                    }
                },


                close: function () {

                    this._removeSelectAllItem();

                    this._current = null;
                    this._highlightCurrent();

                    this._raiseSelectionChanged();

                    DropDownList_MS.fn.close.call(this);
                },

                _raiseSelectionChanged: function () {

                    var currentValue = this.value();
                    var currentValues = currentValue.length > 0 ? currentValue.split(",") : [];

                    if (this._oldValue) {

                        var hasChanged = !($(this._oldValue).not(currentValues).length == 0 && $(currentValues).not(this._oldValue).length == 0);

                        if (hasChanged) {
                            this.trigger(SELECTIONCHANGED, { newValue: currentValues, oldValue: this._oldValue });
                        }
                    }
                    else if (currentValue.length > 0) {
                        this.trigger(SELECTIONCHANGED, { newValue: currentValues, oldValue: this._oldValue });
                    }

                    this._oldValue = currentValues;
                },


                _addSelectAllItem: function () {

                    if (!this.options.showSelectAll) return;

                    var firstListItem = this.ul.children('li:first');

                    if (firstListItem.length > 0) {
                        this.selectAllListItem = $('<li tabindex="-1" role="option" unselectable="on" class="k-item ' + SELECTALLITEM + '"></li>').insertBefore(firstListItem);

                        // fake a data object to use for the template binding below
                        var selectAllData = {};
                        selectAllData[this.options.dataValueField] = '*';
                        selectAllData[this.options.dataTextField] = 'All';

                        this.selectAllListItem.html(this.options.template(selectAllData));

                        this._updateSelectAllItem();

                        //this._checkItem(this.selectAllListItem);
                        //this.selectAllListItem.addClass(SELECTED);

                        this._makeUnselectable(); // required for IE8
                    }
                },


                _removeSelectAllItem: function () {

                    if (this.selectAllListItem) {
                        this.selectAllListItem.remove();
                    }
                    this.selectAllListItem = null;
                },


                _focus: function (li) {
                    if (this.popup.visible() && li && this.trigger(SELECT, { item: li })) {
                        this.close();
                        return;
                    }
                    this.select(li);
                },


                _highlightCurrent: function () {

                    $('li', this.ul).removeClass(HIGHLIGHTED);
                    $(this._current).addClass(HIGHLIGHTED);
                },


                _keydown: function (e) {

                    // currently ignore Home and End keys
                    // can be added later
                    if (e.keyCode == kendo_MS.keys.HOME ||
                        e.keyCode == kendo_MS.keys.END) {
                        e.preventDefault();
                        return;
                    }

                    DropDownList_MS.fn._keydown.call(this, e);
                },


                _move: function (e) {
                    var that = this,
                        key = e.keyCode,
                        ul = that.ul[0],
                        down = key === keys.DOWN,
                        pressed;


                    if (key === keys.UP || down) {

                        if (down) {

                            if (!that.popup.visible()) {
                                that.toggle(down);
                            }
                            if (!that._current) {
                                that._current = ul.firstChild;
                            } else {
                                that._current = ($(that._current)[0].nextSibling || that._current);
                            }

                        } else {
                            //up

                            // only if anything is highlighted
                            if (that._current) {
                                that._current = ($(that._current)[0].previousSibling || ul.firstChild);
                            }
                        }


                        if (that._current) {
                            that._scroll(that._current);
                        }

                        that._highlightCurrent();

                        e.preventDefault();
                        pressed = true;

                    } else {
                        pressed = DropDownList_MS.fn._move.call(this, e);
                    }

                    return pressed;
                },


                selectAll: function () {
                    //alert('ya');
                    var unselectedItems = this._getUnselectedListItems();
                    this._selectItems(unselectedItems);

                    // todo: raise custom event
                },

                unselectAll: function () {

                    var selectedItems = this._getSelectedListItems();
                    this._selectItems(selectedItems);  // will invert the selection

                    // todo: raise custom event
                },


                _selectItems: function (listItems) {
                    var that = this;

                    $.each(listItems, function (i, item) {
                        var idx = ui.List.inArray(item, that.ul[0]);
                        that.select(idx);  // select OR unselect
                    });
                },

                _select: function (li) {
                    var that = this,
                         current = that._current,
                         data = that._data(),
                         value,
                         text,
                         idx;

                    li = that._get(li);

                    if (li && li[0]) {
                        idx = ui.List.inArray(li[0], that.ul[0]);
                        if (idx > -1) {

                            if (li.hasClass(SELECTED)) {
                                li.removeClass(SELECTED);
                                that._uncheckItem(li);

                                if (this.selectAllListItem && li[0] === this.selectAllListItem[0]) {
                                    this.unselectAll();
                                }
                            } else {
                                li.addClass(SELECTED);
                                that._checkItem(li);

                                if (this.selectAllListItem && li[0] === this.selectAllListItem[0]) {
                                    this.selectAll();
                                }
                            }

                            if (this._open) {
                                that._current(li);
                                that._highlightCurrent();
                            }

                            var selecteditems = this._getSelectedListItems();
                            value = [];
                            text = [];
                            $.each(selecteditems, function (indx, item) {
                                var obj = $(item).children("span").first();
                                value.push(obj.attr("data-value"));
                                text.push(obj.text());
                            });

                            that._updateSummary(text);

                            that._updateSelectAllItem();

                            that._accessor(value, idx);

                            // todo: raise change event (add support for selectedIndex) if required
                        }
                    }

                },

                _getAllValueListItems: function () {
                    if (this.selectAllListItem) {
                        return this.ul.children("li").not(this.selectAllListItem[0]);
                    } else {
                        return this.ul.children("li");
                    }
                },

                _getSelectedListItems: function () {
                    return this._getAllValueListItems().filter("." + SELECTED);
                },

                _getUnselectedListItems: function () {
                    return this._getAllValueListItems().filter(":not(." + SELECTED + ")");
                },

                _getSelectedItemsText: function () {

                    var text = [];
                    var selecteditems = this._getSelectedListItems();
                    $.each(selecteditems, function (indx, item) {
                        var obj = $(item).children("span").first();
                        text.push(obj.text());
                    });
                    return text;
                },

                _updateSelectAllItem: function () {

                    if (!this.selectAllListItem) return;

                    // are all items selected?
                    if (this._getAllValueListItems().length == this._getSelectedListItems().length) {
                        //alert('yes')
                        this._checkItem(this.selectAllListItem);
                        this.selectAllListItem.addClass(SELECTED);
                    }
                    else {
                        this._uncheckItem(this.selectAllListItem);
                        this.selectAllListItem.removeClass(SELECTED);
                    }
                },

                _updateSummary: function (itemsText) {

                    if (!itemsText) {
                        itemsText = this._getSelectedItemsText();
                    }

                    if (this._getAllValueListItems().length == this._getSelectedListItems().length) {
                        this.text('All');
                        return;
                    }
                    //** end of code
                    if (itemsText.length == 0) {
                        this._inputWrapper.addClass(EMPTYSELECTION);
                        this.text(this.options.emptySelectionLabel);
                        return;
                    } else {
                        this._inputWrapper.removeClass(EMPTYSELECTION);
                    }

                    if (itemsText.length <= this.options.preSummaryCount) {
                        this.text(itemsText.join(", "));
                    }
                    else {
                        this.text(itemsText.length + ' selected');
                    }
                },

                _checkItem: function (itemContainer) {
                    if (!itemContainer) return;
                    itemContainer.children("input").attr("checked", "checked");
                },

                _uncheckItem: function (itemContainer) {
                    if (!itemContainer) return;
                    itemContainer.children("input").removeAttr("checked");
                },

                _isItemChecked: function (itemContainer) {
                    return itemContainer.children("input:checked").length > 0;
                },

                value: function (value) {
                    var that = this,
                        idx,
                        valuesList = [];

                    if (value !== undefined) {

                        if (!$.isArray(value)) {
                            valuesList.push(value);
                            this._oldValue = valuesList; // to allow for selectionChanged event
                        }
                        else {
                            valuesList = value;
                            this._oldValue = value; // to allow for selectionChanged event
                        }

                        // clear all selections first
                        $(that.ul[0]).children("li").removeClass(SELECTED);
                        $("input", that.ul[0]).removeAttr("checked");

                        $.each(valuesList, function (indx, item) {
                            if (item !== null) {
                                item = item.toString();
                            }

                            that._valueCalled = true;

                            if (item && that._valueOnFetch(item)) {
                                return;
                            }

                            idx = that._index(item);

                            if (idx > -1) {
                                that.select(idx);
                            }

                        });

                    }
                    else {
                        return that._accessor();
                    }
                }

            });

            ui.plugin(MultiSelectBox);

        })(jQuery);



        //******************

        function _valueOnFetch(e) {
            return;
        }




        function M_A_T_DropDownFunc() {
            //** The below codes are for asset type selection
            var firstValueMultiselect = $('#ddlAssetType');
            firstValueMultiselect.kendoMultiSelectBox({
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    transport: {
                        read: {
                            url: "../GIS/GetAssetTypes",
                            dataType: 'json',
                        },

                        parameterMap: function (options, type) {
                            if (type === 'read') {
                                var layerID = $("#layerDropDown").val();
                                return { LayerID: layerID }
                            }
                        }

                    }

                },
                emptySelectionLabel: "All",//"Please select...",
                value: ["0"],
                placeholder: "All"
            });

            firstValueMultiselect.data("kendoMultiSelectBox").bind("selectionChanged", function (e) {
                FilterAssetIds();
            });

        }


    </script>


}

