@using Duncan.PEMS.DataAccess.RBAC
@using Duncan.PEMS.Utilities
@model List<Duncan.PEMS.Entities.News.NewsItem>
@using Kendo.Mvc.UI

@{
    ViewBag.Title = @HttpContext.Current.GetLocaleResource(ResourceTypes.PageTitle, "PEMS City Home Page");
}

@section Styles
{
    @Styles.Render("~/css/Kendo")

    <style type="text/css">
        .disabled {
            background-color: #F5F5F5 !important;
        }

        ready .filter-SearchButton {
            background-color: #33BAB1 !important;
            border: 1px solid #00A99D !important;
        }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }


        #legendTitle {
            width: 223px;
            height: 27px;
            margin: 0px;
            padding-right: 5px;
            display: none;
            font-family: "futura-pt-n4", "futura-pt", Arial, sans-serif;
            font-weight: 400;
            font-size: 16px;
        }

        #legendPanel {
            width: 226px;
            height: 275px;
            background: #fff;
            background-color: #fff;
            padding: 0px;
            margin: 0px;
            margin-right: 0px;
            border: solid;
            border-color: darkgray;
            border-width: thin;
            display: inline;
            overflow: scroll;
        }

        .legendHeaders {
            margin-left: 5px;
            margin-top: 5px;
            margin-bottom: 2px;
        }


        .legImg {
            float: left;
        }

        .legendLabels {
            /*font-family:Arial;*/
            /*font-weight:normal;*/
            font-size: 11px;
            margin: 0px;
            margin-left: 5px;
        }

        #legendTitle {
            background-color: #174A7D;
            margin: 0px;
            color: white;
        }



        .k-panel {
            -webkit-transform: translatez(0);
        }

        .demo-section {
            width: 300px;
        }

            .demo-section h3 {
                font-weight: normal;
                padding-bottom: 10px;
            }

        #panelbar-images > .k-item > .k-link > .k-image {
            margin-top: 2px;
            margin-left: -5px;
        }

        #panelbar-sprites > .k-item > .k-link > .k-sprite {
            margin-top: 6px;
        }


        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 {
            position: relative;
            min-height: 1px;
            padding-right: 15px;
            padding-left: 15px;
        }

        .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 {
            float: left;
        }
        .panel {
            margin-bottom: 20px;
            background-color: #fff;
            border: 1px solid transparent;
            border-radius: 4px;
            -webkit-box-shadow: 0 1px 1px rgba(0,0,0,.05);
            box-shadow: 0 1px 1px rgba(0,0,0,.05);
        }

        .panel-body {
            padding: 15px;
        }

        .panel-heading {
            padding: 10px 15px;
            border-bottom: 1px solid transparent;
            border-top-left-radius: 3px;
            border-top-right-radius: 3px;
        }

            .panel-heading > .dropdown .dropdown-toggle {
                color: inherit;
            }

        .panel-title {
            margin-top: 0;
            margin-bottom: 0;
            font-size: 16px;
            color: inherit;
        }

            .panel-title > .small, .panel-title > .small > a, .panel-title > a, .panel-title > small, .panel-title > small > a {
                color: inherit;
            }
        .row {
            margin-right: -15px;
            margin-left: -15px;
        }
        .panel-green {
            border-color: #5cb85c;
        }
        .panel-primary {
            border-color: #337ab7;
        }
    </style>
}

@section Scripts
{

    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>   <!-- Added by Sai on May 28th 2013 -->
    <script type="text/javascript" src="/scripts/markermanager_packed.js"></script> <!-- Added by Sai on June 26th 2013 -->
    <script type="text/javascript" src="/scripts/maplabel-compiled.js"></script> <!-- Added by Sai on July 10th 2013 -->
    <script type="text/javascript" src="/scripts/spin.min.js"></script> <!-- Added by Sai on July 2nd 2013 -->
    <script src="/scripts/nscgis.js"></script>  <!-- Added by Sai on May 28th 2013 -->
    <script type="text/javascript" src="~/Scripts/html2canvas.js"></script>

    <script>


        var spinner;
        var isLegendDisplayed = false;
        var ROOT = '@Url.Content("~/")';

        var isAssetTypeLoaded = false;
        var isAssetStatusLoaded = false;
        var isLocationTypeLoaded = false;
        var isDemandZonesLoaded = false;
        var isLayer2_SpecCriteriaLoaded = false;
        var isLayer2_ComplianceLoaded = false;
        var isLayer3_SpecCriteriaLoaded = false;


        var legendImagesArr = [
                           //** Inventory Layer Icons
                           ROOT + 'Images/msm_high_demand.png',
                           ROOT + 'Images/msm_low_demand.png',
                           ROOT + 'Images/msm_low_medium_demand.png',
                           ROOT + 'Images/msm_medium_high_demand.png',

                           ROOT + 'Images/sensor_high_demand.png',
                           ROOT + 'Images/sensor_low_demand.png',
                           ROOT + 'Images/sensor_low_medium_demand.png',
                           ROOT + 'Images/sensor_medium_high_demand.png',

                           ROOT + 'Images/gateway_high_demand.png',
                           ROOT + 'Images/gateway_low_demand.png',
                           ROOT + 'Images/gateway_low_medium_demand.png',
                           ROOT + 'Images/gateway_medium_high_demand.png',

                           ROOT + 'Images/space_high_demand.png',
                           ROOT + 'Images/space_low_demand.png',
                           ROOT + 'Images/space_low_med_demand.png',
                           ROOT + 'Images/space_med_high_demand.png',

                           //** High Demand Parking Bays Layer Icons
                           ROOT + 'Images/Occupied.png',
                           ROOT + 'Images/vacant.png',
                           ROOT + 'Images/Compliant.png',
                           ROOT + 'Images/Non_Compliant.png',

                           //** Parking Meter Operations Layer Icons
                           ROOT + 'Images/Inactive.png',
                           ROOT + 'Images/Operational.png',
                           ROOT + 'Images/Non_Operational_With_Alarm.png',
                           ROOT + 'Images/Operational_With_Alarm.png',
                           ROOT + 'Images/Non_Operational_With_Special_Event.png',
                           ROOT + 'Images/Non_Operational_With_Work_Zone.png',
                           ROOT + 'Images/Non_Operational_With_Maintenance.png',

                           //**Single Space Meter Layer Icons
                           ROOT + 'Images/ssm_high_demand.png',
                           ROOT + 'Images/ssm_low_demand.png',
                           ROOT + 'Images/ssm_low_medium_demand.png',
                           ROOT + 'Images/ssm_medium_high_demand.png',

                           //** Parking Space for Inventories
                           ROOT + 'Images/parkspace_high_demand.png',
                           ROOT + 'Images/parkspace_low_demand.png',
                           ROOT + 'Images/parkspace_low_medium_demand.png',
                           ROOT + 'Images/parkspace_medium_high_demand.png'

        ]



    </script>

    @Scripts.Render("~/bundles/kendo")

    <script>
    var enabledAssetsArr = [];
    $(document).ready(function () {
        var myCustomerId = '@ViewBag.CurrentCityID';
        if (myCustomerId == 5001) {
            //** It is NOLA Customer and hence remove help btn temporarily as requested by Justin (DTPEMS-160)
            $('a#help').css('display', 'none');
        }

        //** Get the Lat and Lng details of Customer and load the map accordingly.
        loadGoogleMap('@ViewBag.Latitude', '@ViewBag.Longitude');
        orleans('@ViewBag.CurrentCityID');
        //** First get the list of 'Enabled' asset types for the customer
        FetchEnabledAssetTypes();
        //meterCount();
        //InActmeterCount();
        //ActalarmCount();
        //InActalarmCount();
        //ActCommMeterCount();
        //ActNonCommMeterCount();
        lowBattery();
    });

    function FetchEnabledAssetTypes() {
        $.ajax({
            type: "GET",
            // url: '@Url.Action("GetAssetTypes_Inventory", "GIS")',
            url: '@Url.Action("GetAssetTypes_HomePage", "GIS")',

            data: SetLayerId(),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (Data) {
                $.each(Data, function (index, value) {
                    enabledAssetsArr.push(Data[index].Value) //** This array contains enabled metergroup IDs
                });

                //** In order to plot enabled inventories for the customer, invoke the controller action for inventory
                invokeInventoryActionMethod();
                invokeParkingSpaceActionMethod();


            }
        });
    }

    function SetLayerId() {
        var layerID = "1";
        return { LayerID: layerID }
    }

    function invokeParkingSpaceActionMethod() {
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetCustomerGridDetails_NewHome", "GIS")',
            data: GetAllFilterData_Parkingspaces(),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (Data) {
                zoomCustomerToCenter('@ViewBag.Latitude', '@ViewBag.Longitude')
                redrawMap();
                if (isLegendDisplayed == false) {
                    showLegendPanel();
                    isLegendDisplayed = true;
                    $('#legendPanel').scroll();

                    loadLegendDetails();
                }

                //** Declare an array to hold all inventory layer markers
                var markerArr = [];

                //$.each(Data.Data, function (index, value) {
                //    markerArr.push(Data.Data[index]) //** This array contains lat and lng objects
                //});

                $.each(Data, function (index, value) {
                    markerArr.push(Data[index]) //** This array contains lat and lng objects
                });

                executeClearPOI_HDPB() //** Clear all the OLD data POI on the map for the respective layers


                var layerValue = $("#layerDropDown").val();

                plotMarkers_HighDemandBays(markerArr, legendImagesArr, "Home") //** '1' indicates inventory layer




            },
            error: function () {
                //alert("An error occurred while processing XML file.");
            }
        });
    }

    function invokeInventoryActionMethod() {
        //  zoomCustomerToCenter('@ViewBag.Latitude', '@ViewBag.Longitude')
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetCustomerGridDetails_NewHome", "GIS")', //** 30th march 2015 new func called
            data: GetAllFilterData(),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (Data) {



                redrawMap();
                //if (isLegendDisplayed == false) {
                //    showLegendPanel();
                //    isLegendDisplayed = true;
                //    $('#legendPanel').scroll();

                //   // loadLegendDetails();
                //}

                //** Declare an array to hold all inventory layer markers
                var markerArr = [];

                //$.each(Data.Data, function (index, value) {
                //    markerArr.push(Data.Data[index]) //** This array contains lat and lng objects
                //});
                $.each(Data, function (index, value) {
                    if ((Data[index].Latitude == 0 || Data[index].Longitude == 0 || String(Data[index].Latitude) == "null" || String(Data[index].Longitude) == "null")) {
                        //** dont push records for the map
                    } else {
                        markerArr.push(Data[index]) //** This array contains lat and lng objects
                    }

                });


                // alert('ss'+markerArr.length)

                executeClearPOI_Inv() //** Clear all the OLD data POI on the map for the respective layers


                var layerValue = $("#layerDropDown").val();
                //  alert('rss' + markerArr.length)
                plotMarkers_Inventory(markerArr, legendImagesArr, "Home") //** '1' indicates inventory layer




            },
            error: function () {
                //alert("An error occurred while processing XML file.");
            }
        });

    }

    function executeClearPOI_Inv() {
        var layerValue = $("#layerDropDown").val();
        //** Clear all the OLD data POI on the map for the respective layers
        if (layerValue == 1) {
            clearMap(InvMarkerRepository, invMgr, InvPolygonRepository_Area, InvPolylineRepository_Area, InvPolygonRepository_Zone, InvPolylineRepository_Zone)
        } else if (layerValue == 2) {
            clearMap(HdbMarkerRepository, hdbMgr, HdbPolygonRepository_Area, HdbPolylineRepository_Area, HdbPolygonRepository_Zone, HdbPolylineRepository_Zone)
        } else if (layerValue == 3) {
            clearMap(PmoMarkerRepository, pmoMgr, PmoPolygonRepository_Area, PmoPolylineRepository_Area, PmoPolygonRepository_Zone, PmoPolylineRepository_Zone)
        }
    }

    function executeClearPOI_HDPB() {
        var layerValue = $("#layerDropDown").val();
        //** Clear all the OLD data POI on the map for the respective layers
        if (layerValue == 1) {
            //  clearMap(InvMarkerRepository, invMgr, InvPolygonRepository_Area, InvPolylineRepository_Area, InvPolygonRepository_Zone, InvPolylineRepository_Zone)
        } else if (layerValue == 2) {
            clearMap(HdbMarkerRepository, hdbMgr, HdbPolygonRepository_Area, HdbPolylineRepository_Area, HdbPolygonRepository_Zone, HdbPolylineRepository_Zone)
        } else if (layerValue == 3) {
            clearMap(PmoMarkerRepository, pmoMgr, PmoPolygonRepository_Area, PmoPolylineRepository_Area, PmoPolygonRepository_Zone, PmoPolylineRepository_Zone)
        }
    }

    function GetAllFilterData() {
        CustomerId = '@ViewBag.CurrentCityID';
        SpecificCriteria = -5;
        //alert('enabledAssetsArr' + enabledAssetsArr)
        AssetType = enabledAssetsArr.toString();//"11,32,31,1,10,0";
        AssetId = "";
        LocationTypeId = "";
        LocationTypeName = "All";
        ParallerLocationId = "";
        AssetStatus = "1";
        demZoneVal = "-1";
        SpecificCriteria = "-5";
        LayerValue = "1";
        AssetModelVal = "-1";
        NonComplianceIDVal = "1,2,3";

        return { customerId: CustomerId, assetType: AssetType, assetId: AssetId, locationTypeId: LocationTypeId, locationTypeName: LocationTypeName, parallerLocationId: ParallerLocationId, assetStatus: AssetStatus, demZone: demZoneVal, specificCriteria: SpecificCriteria, layerValue: LayerValue, assetModel: AssetModelVal, nonCompStatus: NonComplianceIDVal, pageChosen: "mapChosen" }
    }

    function GetAllFilterData_Parkingspaces() {

        CustomerId = '@ViewBag.CurrentCityID';
        SpecificCriteria = -5;
        //alert('enabledAssetsArr' + enabledAssetsArr)
        AssetType = enabledAssetsArr.toString();//"11,32,31,1,10,0";
        AssetId = "";
        LocationTypeId = "";
        LocationTypeName = "All";
        ParallerLocationId = "";
        AssetStatus = "1";
        demZoneVal = "-1";
        SpecificCriteria = "1,2";
        LayerValue = "2";
        AssetModelVal = "-1";
        NonComplianceIDVal = "1,2,3";
        complianceStatus = "All";


        return { customerId: CustomerId, assetType: AssetType, assetId: AssetId, locationTypeId: LocationTypeId, locationTypeName: LocationTypeName, parallerLocationId: ParallerLocationId, assetStatus: AssetStatus, demZone: demZoneVal, specificCriteria: SpecificCriteria, layerValue: LayerValue, assetModel: AssetModelVal, nonCompStatus: NonComplianceIDVal, complianceStatusIs: complianceStatus, pageChosen: "mapChosen" }



    }

    function getLegendDetails(xml, layerName) {
        $(xml).find(layerName).each(function () {
            $.each(this.attributes, function (i, attrib) {
                var name = attrib.name;
                var layerTitle = attrib.value;
                if (layerTitle == "High Demand Bays") {
                    layerTitle = "Parking Spaces";
                }
                $("<p id='ifwTitle'></p>").text(layerTitle).appendTo("#legendPanel");
            });
        });

        //** Append only the Enabled asset types to the Legend panel
        var enabledAssetNames = [];
        for (var i = 0; i < enabledAssetsArr.length; i++) {
            if (enabledAssetsArr[i] == 0) {
                //** It indicates SSM / Liberty
                enabledAssetNames.push("Single Space Meter")
            } else if (enabledAssetsArr[i] == 1) {
                //** It indicates MSM
                enabledAssetNames.push("Multiple Space Meter")
            } else if (enabledAssetsArr[i] == 10) {
                //** It indicates Sensor
                enabledAssetNames.push("Sensor")
            } else if (enabledAssetsArr[i] == 11) {
                //** It indicates Cashbox
                enabledAssetNames.push("Cashbox")
            } else if (enabledAssetsArr[i] == 20) {
                //** It indicates Parking Spaces
                enabledAssetNames.push("Parking Space")
            } else if (enabledAssetsArr[i] == 31) {
                //** It indicates Mechanisms
                enabledAssetNames.push("Mechanism")
            } else if (enabledAssetsArr[i] == 32) {
                //** It indicates Datakey
                enabledAssetNames.push("DataKey")
            }
        }

        $(xml).find(layerName).find("Item").each(function (index) {
            var legendName = $(this).find('LegendLabel').text();
            var legendImage = "@Url.Content("~/Images/")" + $(this).find('LegendImage').text();
            var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': legendName, 'src': legendImage, 'alt': legendName })
            if (layerName == "AssetColorCodes") {
                var imageLabel = $("<p style='font-size:13px;' id='ifw'>&nbsp;&nbsp;" + legendName + "</p>")
            } else {
                var imageLabel = $("<p style='line-height: 100%;font-size:13px;' id='ifw'>&nbsp;&nbsp;" + legendName + "</p>")
            }

            var imageHolder = $('<div style="display:inline";>').html(img);

            var legItem = $("<div style='width:210px;'></div>")

            //** add only enabled assets to legend panel
            var assetFound = false;
            for (var i = 0; i < enabledAssetNames.length; i++) {
                if (enabledAssetNames[i] == legendName) {
                    assetFound = true;
                    break;
                }
            }

            if (assetFound == true || (legendName == "Occupied" || legendName == "Vacant")) {
                //** It indicates only inventory layer and parking bays
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)
            }
        });
    }

    function drawStLine() {
        var legendImage = "@Url.Content("~/Images/stLine.png")";
        var img = $('<img style="float:left;margin-left:0px;"/>').attr({ 'id': 'stLiner', 'src': legendImage, 'alt': 'stLiner' })
        var imageHolder = $('<div style="display:inline";>').html(img);
        $("#legendPanel").append(imageHolder)
    }

    function loadLegendDetails() {
        $("#legendPanel").append("<div></div>");
        $.ajax({
            type: "GET",
            // url: "@Url.Content("~/legendDetails.xml")",
            url: "@Url.Content("~/Images/legendDetails.xml")",
            dataType: "xml",
            success: function (xml) {

                //** Inventory Layer legends (if any)
                getLegendDetails(xml, 'Inventory_Layer')
                drawStLine()


                //** High Demand Bays Layer legends (if any)
                getLegendDetails(xml, 'HighDemandBays_Layer');
                drawStLine()

                //** AssetColorCodes legends (if any)
                //var isDemZoneVisible = $("#demandZones").css('display');
                //if (isDemZoneVisible == "none") {
                //} else {
                //    getLegendDetails(xml, 'AssetColorCodes');
                //    drawStLine()
                //}


            },
            error: function () {
                alert("An error occurred while processing XML file.");
            }
        });

    }


    $("#panelbar").kendoPanelBar({
        animation: {
            collapse: {
                duration: 1000
            }
        }
    });
    function lowBattery() {
        //alert(1);
      
            $.ajax({
                type : "POST",
                dataType : "json",
                url: '@Url.Action("GetBatteryReport")',
                //contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $("#meterCount").text(data);
                }
            })
    }
        function meterCount() {
            //alert(1);

            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetActAssetCount")',
                //contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $("#meterCount").text(data);
                }
            })
        }
        function InActmeterCount() {
            //alert(1);

            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetInActAssetCount")',
                //contentType: "application/json; charset=utf-8",
                success: function (data1) {
                    $("#InActmeterCount").text(data1);
                }
            })
        }
       
        function ActalarmCount() {
            //alert(1);

            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetActAlarmCount")',
                //contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $("#ActAlarmCount").text(data);
                }
            })
        }
        function InActalarmCount() {
            //alert(1);

            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetInActAlarmCount")',
                //contentType: "application/json; charset=utf-8",
                success: function (data1) {
                    $("#InActAlarmCount").text(data1);
                }
            })
        }
        function ActCommMeterCount() {
            //alert(1);

            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetCommMeters")',
                //contentType: "application/json; charset=utf-8",
                success: function (data1) {
                    $("#ActCommCount").text(data1);
                }
            })
        }
        function ActNonCommMeterCount() {
            //alert(1);

            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetNonCommMeters")',
                //contentType: "application/json; charset=utf-8",
                success: function (data1) {
                    $("#ActNonCommCount").text(data1);
                }
            })
        }
    

    //var viewModel = kendo.observable({
    //    meterCount: "John"
    //});
    </script>
}


<div class="two-column" id="news">
    <h2>@HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "News and Announcements")</h2>
    <h3>@HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "Today is") @String.Format("{0:D}", ViewData[Constants.ViewData.CurrentLocalTime]) </h3>

    <ul>
        @foreach (var newsItem in Model)
        {
            <li>
                <span style="font-style: italic">
                    @newsItem.EffectiveDate.ToShortDateString()
                </span>
                <br />
                <span>
                    @Html.Raw(@HttpUtility.HtmlDecode(@newsItem.Content))
                </span>
            </li>
        }
    </ul>
    <table>
        <tr>
            <td>
                
                    <div class="two-column">
                        <div class="filter-option">
                            <div class="demo-section">

                                <h3>PanelBar with images</h3>

                                @(Html.Kendo().PanelBar()
        .Name("panelbar-images")
        .Items(panelbar =>
        {
            panelbar.Add().Text("Alarm")
                .ImageUrl(Url.Content("~/Images/AlarmClock16x16.gif"))
                .Items(baseball =>
                {
                    baseball.Add().Text("Top News")
                        .ImageUrl(Url.Content("~/Images/AlarmClock16x16.gif"));
                    baseball.Add().Text("Photo Galleries")
                        .ImageUrl(Url.Content("~/Images/AlarmClock16x16.gif"));
                    baseball.Add().Text("Video Records")
                        .ImageUrl(Url.Content("~/Images/AlarmClock16x16.gif"));
                    baseball.Add().Text("Radio Records")
                        .ImageUrl(Url.Content("~/Images/AlarmClock16x16.gif"));
                });

            panelbar.Add().Text("Meter")
                .ImageUrl(Url.Content("~/Images/DuncanMeter.ico"))
                .Items(golf =>
                {
                    golf.Add().Text("Active Meters")
                        .ImageUrl(Url.Content("~/Images/DuncanMeter.ico"));
                    golf.Add().Text("Inactive Meters")
                        .ImageUrl(Url.Content("~/Images/DuncanMeter.ico"));

                });
        })
                                )
                            </div>
                        </div>
                    </div>
                
            </td>
            <td><span></span></td>
            <td><span></span></td>
            <td><span></span></td>
            <td>
                <div class="configuration k-widget k-header">
                    <span class="configHead">Meter Details</span>
                    <label>Meter Count:</label><label id="meterCount" />
                </div>
                    <div class="configuration k-widget k-header">
                        <label>Inactive Meter Count:</label><label id="InActmeterCount" />
                    </div>
            </td>
            <td><span></span></td>
            <td><span></span></td>
            <td><span></span></td>
            <td>
                <div class="configuration k-widget k-header">
                    <span class="configHead">Alarm Details</span>
                    <label>Active Alarm Count:</label><label id="ActAlarmCount" />
                </div>
                <div class="configuration k-widget k-header">
                    <label>Inactive Alarm Count:</label><label id="InActAlarmCount" />
                </div>
            </td>
            <td><span></span></td>
            <td><span></span></td>
            <td><span></span></td>
            <td>
                <div class="configuration k-widget k-header">
                    <span class="configHead">Communication Meter Details</span>
                    <label>Active Communicating Meter Count:</label><label id="ActCommCount" />
                </div>
                <div class="configuration k-widget k-header">
                    <label>Active NomCommunicating Meter Count:</label><label id="ActNonCommCount" />
                </div>
            </td>
        </tr>

    </table>
        </div>


        <!-- Sairam added below line to display google map. Code added on Oct 8th 2014 -->
        <div id="mHolder" style="float:none;clear:both; font-family:futura-pt-n4, futura-pt, Arial, sans-serif;">
            <div id="map_canvas" style=" max-height: 95%; min-height: 95%; height: 487px; margin: 2px; margin-top:0px; font-family:futura-pt-n4, futura-pt, Arial, sans-serif;"></div>

        </div>

        <div id="legendPanel">

        </div>

        <div id="legendTitle">
            <p>&nbsp;&nbsp;Legend Panel</p>
        </div>

        @section PageHeader
{
            @{
                var userContext = new PEMRBACEntities();
                var username = User.Identity.Name;
                var user = userContext.UserProfiles.SingleOrDefault(u => u.UserName == username);
                <h1><span>@HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "Welcome"), @String.Format("{0} {1}", user.FirstName, user.LastName)</span></h1>
            }
            @if (ViewBag.PWExpirationDays < 15)
            {
                <div class="message">
                    <ul>
                        <li>@HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "Your password will expire in") @ViewBag.PWExpirationDays @HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "day(s).")</li>
                    </ul>
                </div>
            }
        }

