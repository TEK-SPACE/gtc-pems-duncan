@using Duncan.PEMS.DataAccess.RBAC
@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@*@model Duncan.PEMS.Entities.News.NewsItem*@
@model Duncan.PEMS.Entities.News.Dashboard

@{
    ViewBag.Title = @HttpContext.Current.GetLocaleResource(ResourceTypes.PageTitle, "PEMS City Home Page");
}


@section Styles
{
    @Styles.Render("~/css/Kendo")

    <style type="text/css">
        .disabled {
            background-color: #F5F5F5 !important;
        }

        ready .filter-SearchButton {
            background-color: #ff6112 !important;
            border: 1px solid #00A99D !important;
        }

            ready .filter-SearchButton:hover {
                background: #ccc !important;
                text-decoration: none !important;
            }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }


        #legendTitle {
            width: 213px;
            height: 27px;
            margin: 0px;
            padding-right: 5px;
            display: none;
            font-family: "futura-pt-n4", "futura-pt", Arial, sans-serif;
            font-weight: 400;
            font-size: 16px;
        }

        #legendPanel {
            width: 216px;
            height: 204px;
            background: #fff;
            background-color: #fff;
            padding: 0px;
            margin: 0px;
            margin-right: 0px;
            border: solid;
            border-color: darkgray;
            border-width: thin;
            display: inline;
            overflow: hidden;
        }

        .legendHeaders {
            margin-left: 5px;
            margin-top: 5px;
            margin-bottom: 2px;
        }


        .legImg {
            float: left;
        }

        .legendLabels {
            /*font-family:Arial;*/
            /*font-weight:normal;*/
            font-size: 11px;
            margin: 0px;
            margin-left: 5px;
        }

        #legendTitle {
            background-color: #174A7D;
            margin: 0px;
            color: white;
        }

        .header {
            height: 5px;
            background: #F0F0F0;
            border: 1px solid #CCC;
            width: 960px;
            /*margin:0px auto;*/
        }


        .DBHolder {
            border-radius: 2px;
            background: #f5f5f5;
            padding: 20px;
            width: 100%;
            height: 351px;
        }

        .DBHolderTest {
            border-radius: 2px;
            background: #f5f5f5;
            padding: 20px;
            width: 100%;
            height: 151px;
        }

        .DBHolderChart {
            border-radius: 2px;
            background: #f5f5f5;
            padding: 20px;
            width: 100%;
            height: 200px;
        }

        .DB1 {
            margin: 10px;
            margin-top: 1px;
            padding: 0;
            width: 232px;
            height: 150px;
            -webkit-box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 8px 10px 10px #ccc;
            -moz-box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 8px 10px 10px #ccc;
            box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 1px 1px 1px #ccc;
            background: white;
        }

        .DB2 {
            margin: 10px;
            margin-top: 1px;
            padding: 0;
            width: 311px;
            height: 195px;
            -webkit-box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 8px 10px 10px #ccc;
            -moz-box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 8px 10px 10px #ccc;
            box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 1px 1px 1px #ccc;
            background: white;
        }

        .DB3 {
            margin: 10px;
            margin-top: 1px;
            padding: 0;
            width: 970px;
            height: 195px;
            -webkit-box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 8px 10px 10px #ccc;
            -moz-box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 8px 10px 10px #ccc;
            box-shadow: 8px 10px 10px rgba(0,0,0,0.5), inset 1px 1px 1px #ccc;
            background: white;
        }

        .BoxTextLeft {
            float: left;
            line-height: 7px;
            width: 160px;
            padding-left: 9px;
            font-family: Arial;
            font-weight: 500;
            font-size: 13px;
            color: #73726e;
        }

        .emptyLine {
            height: 1px;
            width: 10px;
            clear: both;
        }

        .BoxTextRight {
            float: right;
            line-height: 7px;
            padding-right: 7px;
            text-align: right;
            font-family: Arial;
            font-weight: 500;
            font-size: 13px;
            color: #73726e;
        }

        .HyperLinkTextRight {
            float: right;
            line-height: 7px;
            padding-right: 20px;
            font-family: Arial;
            font-weight: 500;
            font-size: 13px;
            color: #42a5d6;
        }


        .hyperLinkText {
            margin-left: 12px;
            line-height: 7px;
            font-family: Arial;
            font-weight: 500;
            font-size: 11px;
            text-decoration: underline;
            color: #73726e;
        }




        .today {
            padding: 2px 4px;
            border: none;
            width: 45px;
            height: 17px;
            margin-top: 8px;
            color: white;
            border-radius: 1px;
            font-family: Arial;
            font-size: 10px;
            background-color: #00a2e8;
        }

        .todayGreen {
            padding: 2px 4px;
            border: none;
            width: 55px;
            height: 17px;
            margin-top: 8px;
            color: white;
            border-radius: 1px;
            font-family: Arial;
            font-size: 10px;
            background-color: #3ec770;
        }

        .todayOrange {
            padding: 2px 4px;
            border: none;
            width: 39px;
            height: 17px;
            margin-top: 8px;
            color: white;
            border-radius: 1px;
            font-family: Arial;
            font-size: 10px;
            background-color: #ff6112;
        }

        .weekly {
            padding: 2px 4px;
            border: none;
            width: 45px;
            height: 17px;
            margin-top: 8px;
            color: white;
            border-radius: 1px;
            font-family: Arial;
            font-size: 10px;
            background-color: #d41558;
        }
    </style>
}

@Scripts.Render("~/bundles/kendo")

@section Scripts
{

    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <!-- Added by Sai on May 28th 2013 -->
    <script type="text/javascript" src="/scripts/markermanager_packed.js"></script>
    <!-- Added by Sai on June 26th 2013 -->
    <script type="text/javascript" src="/scripts/maplabel-compiled.js"></script>
    <!-- Added by Sai on July 10th 2013 -->
    <script type="text/javascript" src="/scripts/spin.min.js"></script>
    <!-- Added by Sai on July 2nd 2013 -->
    <script src="/scripts/nscgis.js"></script>
    <!-- Added by Sai on May 28th 2013 -->
    <script type="text/javascript" src="~/Scripts/html2canvas.js"></script>
    <script type="text/javascript" src="/scripts/Kendo/kendo.all.min.js"></script>

    <script>


        var spinner;
        var isLegendDisplayed = false;
        var ROOT = '@Url.Content("~/")';

        var searchByRefreshBtn = "false";


        var isAssetTypeLoaded = false;
        var isAssetStatusLoaded = false;
        var isLocationTypeLoaded = false;
        var isDemandZonesLoaded = false;
        var isLayer2_SpecCriteriaLoaded = false;
        var isLayer2_ComplianceLoaded = false;
        var isLayer3_SpecCriteriaLoaded = false;

        var mydata = [{ "name": "Work", "data": 108404, "mach": "Fongs-3" }, { "name": "Reason Late", "data": 80121, "mach": "Atyc-3" }, { "name": "Work", "data": 2920, "mach": "Then-13" }, { "name": "manuel wait", "data": 138383, "mach": "Then-12" }, { "name": "Work", "data": 174811, "mach": "Loris Bellini 2" }, { "name": "Work", "data": 39887, "mach": "Loris Bellini 1" }, { "name": "manuel wait", "data": 761119041, "mach": "Loris Bellini 1" }];


        var legendImagesArr = [
                           //** Inventory Layer Icons
                           ROOT + 'Images/msm_high_demand.png',
                           ROOT + 'Images/msm_low_demand.png',
                           ROOT + 'Images/msm_low_medium_demand.png',
                           ROOT + 'Images/msm_medium_high_demand.png',

                           ROOT + 'Images/sensor_high_demand.png',
                           ROOT + 'Images/sensor_low_demand.png',
                           ROOT + 'Images/sensor_low_medium_demand.png',
                           ROOT + 'Images/sensor_medium_high_demand.png',

                           ROOT + 'Images/gateway_high_demand.png',
                           ROOT + 'Images/gateway_low_demand.png',
                           ROOT + 'Images/gateway_low_medium_demand.png',
                           ROOT + 'Images/gateway_medium_high_demand.png',

                           ROOT + 'Images/space_high_demand.png',
                           ROOT + 'Images/space_low_demand.png',
                           ROOT + 'Images/space_low_med_demand.png',
                           ROOT + 'Images/space_med_high_demand.png',

                           //** High Demand Parking Bays Layer Icons
                           ROOT + 'Images/occupiedAlone.png',

                           //** Occupany Layer Icons
                           ROOT + 'Images/occupied.png',
                           ROOT + 'Images/vacant.png',
                           ROOT + 'Images/violated.png',
                           ROOT + 'Images/expired.png',
                           ROOT + 'Images/paid.png',

                           ROOT + 'Images/occupiedTitle.png',
                           ROOT + 'Images/vacantTitle.png',
                           ROOT + 'Images/violatedTitle.png',
                           ROOT + 'Images/expiredTitle.png',
                           ROOT + 'Images/paidTitle.png',

                           ROOT + 'Images/OccupancyAloneTitle.png',
                           ROOT + 'Images/Compliant.png',
                           ROOT + 'Images/Non_Compliant.png',

                           //** Parking Meter Operations Layer Icons
                           ROOT + 'Images/Inactive.png',
                           ROOT + 'Images/Operational.png',
                           ROOT + 'Images/Non_Operational_With_Alarm.png',
                           ROOT + 'Images/Operational_With_Alarm.png',
                           ROOT + 'Images/Non_Operational_With_Special_Event.png',
                           ROOT + 'Images/Non_Operational_With_Work_Zone.png',
                           ROOT + 'Images/Non_Operational_With_Maintenance.png',

                           //**Single Space Meter Layer Icons
                           ROOT + 'Images/ssm_high_demand.png',
                           ROOT + 'Images/ssm_low_demand.png',
                           ROOT + 'Images/ssm_low_medium_demand.png',
                           ROOT + 'Images/ssm_medium_high_demand.png',

                           //** Parking Space for Inventories
                           ROOT + 'Images/parkspace_high_demand.png',
                           ROOT + 'Images/parkspace_low_demand.png',
                           ROOT + 'Images/parkspace_low_medium_demand.png',
                           ROOT + 'Images/parkspace_medium_high_demand.png'

        ]



    </script>

    @Scripts.Render("~/bundles/kendo")

    <script>
        var enabledAssetsArr = [];
        var ChangeBattery;

        var viewModel = kendo.observable({
            name: ""
        });


        var lBattery = 0;
        var cBattery = 0;
        $(document).ready(function () {
            //alert(1);
            @*if('@Model.HasSensor'>0)
            {
                $('#occupancy').css('display', 'inline');
            }*@
            
            var myCustomerId = '@ViewBag.CurrentCityID';
            
            if(myCustomerId==9992)
            {
                $('#MeterGroup').css('display', 'inline');
                document.getElementById('divMG').className= 'DBHolder';
            }
            else
                document.getElementById('divMG').className= 'DBHolderTest';  
            
            if (myCustomerId == 5001) {
                //** It is NOLA Customer and hence remove help btn temporarily as requested by Justin (DTPEMS-160)
                $('a#help').css('display', 'none');
            }

            //** Get the Lat and Lng details of Customer and load the map accordingly.
            loadGoogleMap('@ViewBag.Latitude', '@ViewBag.Longitude');
            orleans('@ViewBag.CurrentCityID');
            //** First get the list of 'Enabled' asset types for the customer
            HidePrint();
            FetchEnabledAssetTypes();
            lowBattery();
            changeBattery();
            //NoCommReport();
            SennsorNoCommReport();
            SpacestatusSensorRep();
            EnforceableSpaceRep();
        });

        function HidePrint()
        {
            $('a#print').hide();
        }
        function ajaxCallForOccupancy() {

            //showProgressBar(true);
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetOccupancyForMobile", "GIS")',
                data: GetAllFilterData(),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',

                success: function (Data) {
                    // showProgressBar(false); //** Hide Progress bar animation after the server response;

                    if (Data.length == 0) {
                        executeClearPOI(2) //** Clear all the OLD data POI on the map for the respective layers
                        return;
                    }


                    //$("#mHolder").css('display', 'inline');

                    zoomCustomerToCenter('@ViewBag.Latitude', '@ViewBag.Longitude')
                    redrawMap();
                    if (isLegendDisplayed == false) {
                        showLegendPanel();
                        isLegendDisplayed = true;
                        $('#legendPanel').scroll();

                        loadLegendDetails();
                    }

                    //** Declare an array to hold all inventory layer markers
                    var markerArr = [];
                    $.each(Data, function (index, value) {
                        if ((Data[index].Latitude == 0 || Data[index].Longitude == 0 || String(Data[index].Latitude) == "null" || String(Data[index].Longitude) == "null")) {
                            //** dont push records for the map
                        } else {
                            markerArr.push(Data[index]) //** This array contains lat and lng objects
                        }

                    });
                    // alert('bes');
                    executeClearPOI(2) //** Clear all the OLD data POI on the map for the respective layers


                    var layerValue = 2;
                    if (layerValue.toString() == "1" && markerArr.length != 0) {
                        plotMarkers_Inventory(markerArr, legendImagesArr, "") //** '1' indicates inventory layer
                    } else if (layerValue.toString() == "2" && markerArr.length != 0) {
                        plotMarkers_HighDemandBays_mobile(markerArr, legendImagesArr, "") //** '2' indicates High Demand Parking Bays layer
                    } else {
                        if (markerArr.length != 0) {

                            plotMarkers_MeterOperations(markerArr, legendImagesArr) //** '3' indicates  Parking Meter Operations layer
                        }

                    }




                },
                error: function (jqxhr) {
                    //alert("Error: " + jqxhr.responseText);
                    showProgressBar(false); //** Hide Progress bar animation after the server response;

                }
            });

        }

        function FetchEnabledAssetTypes() {
            $.ajax({
                type: "GET",
                // url: '@Url.Action("GetAssetTypes_Inventory", "GIS")',
                url: '@Url.Action("GetAssetTypes_HomePage", "GIS")',

                data: SetLayerId(),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (Data) {
                    $.each(Data, function (index, value) {
                        enabledAssetsArr.push(Data[index].Value) //** This array contains enabled metergroup IDs
                    });

                    //** In order to plot enabled inventories for the customer, invoke the controller action for inventory
                    // invokeInventoryActionMethod(); //** for milwaukee demo it is commented
                    // invokeParkingSpaceActionMethod(); //** for milwaukee demo it is commented

                    ajaxCallForOccupancy();


                }
            });
        }

        function SetLayerId() {
            var layerID = "1";
            return { LayerID: layerID }
        }

        function invokeParkingSpaceActionMethod() {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCustomerGridDetails_NewHome", "GIS")',
                data: GetAllFilterData_Parkingspaces(),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (Data) {
                    zoomCustomerToCenter('@ViewBag.Latitude', '@ViewBag.Longitude')
                    redrawMap();
                    if (isLegendDisplayed == false) {
                        showLegendPanel();
                        isLegendDisplayed = true;
                        $('#legendPanel').scroll();

                        loadLegendDetails();
                    }

                    //** Declare an array to hold all inventory layer markers
                    var markerArr = [];


                    $.each(Data, function (index, value) {
                        markerArr.push(Data[index]) //** This array contains lat and lng objects
                    });

                    executeClearPOI_HDPB() //** Clear all the OLD data POI on the map for the respective layers


                    var layerValue = $("#layerDropDown").val();

                    plotMarkers_HighDemandBays(markerArr, legendImagesArr, "Home") //** '1' indicates inventory layer




                },
                error: function () {
                    //alert("An error occurred while processing XML file.");
                }
            });
            }

            function invokeInventoryActionMethod() {
                //  zoomCustomerToCenter('@ViewBag.Latitude', '@ViewBag.Longitude')
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetCustomerGridDetails_NewHome", "GIS")', //** 30th march 2015 new func called
                    data: GetAllFilterData(),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    success: function (Data) {



                        redrawMap();
                        //if (isLegendDisplayed == false) {
                        //    showLegendPanel();
                        //    isLegendDisplayed = true;
                        //    $('#legendPanel').scroll();

                        //   // loadLegendDetails();
                        //}

                        //** Declare an array to hold all inventory layer markers
                        var markerArr = [];

                        //$.each(Data.Data, function (index, value) {
                        //    markerArr.push(Data.Data[index]) //** This array contains lat and lng objects
                        //});
                        $.each(Data, function (index, value) {
                            if ((Data[index].Latitude == 0 || Data[index].Longitude == 0 || String(Data[index].Latitude) == "null" || String(Data[index].Longitude) == "null")) {
                                //** dont push records for the map
                            } else {
                                markerArr.push(Data[index]) //** This array contains lat and lng objects
                            }

                        });


                        // alert('ss'+markerArr.length)

                        executeClearPOI_Inv() //** Clear all the OLD data POI on the map for the respective layers


                        var layerValue = $("#layerDropDown").val();
                        //  alert('rss' + markerArr.length)
                        plotMarkers_Inventory(markerArr, legendImagesArr, "Home") //** '1' indicates inventory layer




                    },
                    error: function () {
                        //alert("An error occurred while processing XML file.");
                    }
                });

            }

            function executeClearPOI_Inv() {
                var layerValue = $("#layerDropDown").val();
                //** Clear all the OLD data POI on the map for the respective layers
                if (layerValue == 1) {
                    clearMap(InvMarkerRepository, invMgr, InvPolygonRepository_Area, InvPolylineRepository_Area, InvPolygonRepository_Zone, InvPolylineRepository_Zone)
                } else if (layerValue == 2) {
                    clearMap(HdbMarkerRepository, hdbMgr, HdbPolygonRepository_Area, HdbPolylineRepository_Area, HdbPolygonRepository_Zone, HdbPolylineRepository_Zone)
                } else if (layerValue == 3) {
                    clearMap(PmoMarkerRepository, pmoMgr, PmoPolygonRepository_Area, PmoPolylineRepository_Area, PmoPolygonRepository_Zone, PmoPolylineRepository_Zone)
                }
            }

            function executeClearPOI()
            {
                clearMap(HdbMarkerRepository, hdbMgr, HdbPolygonRepository_Area, HdbPolylineRepository_Area, HdbPolygonRepository_Zone, HdbPolylineRepository_Zone);
            }

            function executeClearPOI_HDPB() {
                var layerValue = $("#layerDropDown").val();
                //** Clear all the OLD data POI on the map for the respective layers
                if (layerValue == 1) {
                    //  clearMap(InvMarkerRepository, invMgr, InvPolygonRepository_Area, InvPolylineRepository_Area, InvPolygonRepository_Zone, InvPolylineRepository_Zone)
                } else if (layerValue == 2) {
                    clearMap(HdbMarkerRepository, hdbMgr, HdbPolygonRepository_Area, HdbPolylineRepository_Area, HdbPolygonRepository_Zone, HdbPolylineRepository_Zone)
                } else if (layerValue == 3) {
                    clearMap(PmoMarkerRepository, pmoMgr, PmoPolygonRepository_Area, PmoPolylineRepository_Area, PmoPolygonRepository_Zone, PmoPolylineRepository_Zone)
                }
            }
            function GetAllFilterData() {

                //** CustomerID
                var cityID = '@ViewBag.CurrentCityID';//$('#cityName').val();
                CustomerId = cityID; //**

                //**AreaID
                var myAreaID;
                //if ($("#ZoneName").data("kendoDropDownList").text() == "All") {
                //    myAreaID = 0;
                //} else {
                //    myAreaID = $("#ZoneName").val();
                //}
                myAreaID = 0;

                //**ZoneID
                var myZoneID = 0;

                //** AssetID
                //if (searchByRefreshBtn == "true") {
                //    AssetId = $('#autocompleteAssetId').val();
                //} else {
                //    AssetId = 0;
                //}
                AssetId = 0;

                //** PageChosen
                pageChosen = "mapChosen";
                statusChosen ="ALL";// $("#statusDD").data("kendoDropDownList").text();

                return JSON.stringify({ customerId: CustomerId, areaID: myAreaID, zoneID: myZoneID, assetID: AssetId, pageChosen: searchByRefreshBtn, StatusIs: statusChosen });
            }

        @*  function GetAllFilterData() {
            CustomerId = '@ViewBag.CurrentCityID';
            SpecificCriteria = -5;
            //alert('enabledAssetsArr' + enabledAssetsArr)
            AssetType = enabledAssetsArr.toString();//"11,32,31,1,10,0";
            AssetId = "";
            LocationTypeId = "";
            LocationTypeName = "All";
            ParallerLocationId = "";
            AssetStatus = "1";
            demZoneVal = "-1";
            SpecificCriteria = "-5";
            LayerValue = "1";
            AssetModelVal = "-1";
            NonComplianceIDVal = "1,2,3";

            return { customerId: CustomerId, assetType: AssetType, assetId: AssetId, locationTypeId: LocationTypeId, locationTypeName: LocationTypeName, parallerLocationId: ParallerLocationId, assetStatus: AssetStatus, demZone: demZoneVal, specificCriteria: SpecificCriteria, layerValue: LayerValue, assetModel: AssetModelVal, nonCompStatus: NonComplianceIDVal, pageChosen: "mapChosen" }
        }*@

        function GetAllFilterData_Parkingspaces() {

            CustomerId = '@ViewBag.CurrentCityID';
            SpecificCriteria = -5;
            //alert('enabledAssetsArr' + enabledAssetsArr)
            AssetType = enabledAssetsArr.toString();//"11,32,31,1,10,0";
            AssetId = "";
            LocationTypeId = "";
            LocationTypeName = "All";
            ParallerLocationId = "";
            AssetStatus = "1";
            demZoneVal = "-1";
            SpecificCriteria = "1,2";
            LayerValue = "2";
            AssetModelVal = "-1";
            NonComplianceIDVal = "1,2,3";
            complianceStatus = "All";


            return { customerId: CustomerId, assetType: AssetType, assetId: AssetId, locationTypeId: LocationTypeId, locationTypeName: LocationTypeName, parallerLocationId: ParallerLocationId, assetStatus: AssetStatus, demZone: demZoneVal, specificCriteria: SpecificCriteria, layerValue: LayerValue, assetModel: AssetModelVal, nonCompStatus: NonComplianceIDVal, complianceStatusIs: complianceStatus, pageChosen: "mapChosen" }



        }




        function getLegendDetails(xml, layerName) {
            $(xml).find(layerName).each(function () {
                $.each(this.attributes, function (i, attrib) {
                    var name = attrib.name;
                    var layerTitle = attrib.value;
                    if (layerTitle == "High Demand Bays") {
                        layerTitle = "Parking Spaces";
                    }
                    $("<p id='ifwTitle'></p>").text(layerTitle).appendTo("#legendPanel");
                });
            });

            //** Append only the Enabled asset types to the Legend panel
            var enabledAssetNames = [];
            for (var i = 0; i < enabledAssetsArr.length; i++) {
                if (enabledAssetsArr[i] == 0) {
                    //** It indicates SSM / Liberty
                    enabledAssetNames.push("Single Space Meter")
                } else if (enabledAssetsArr[i] == 1) {
                    //** It indicates MSM
                    enabledAssetNames.push("Multiple Space Meter")
                } else if (enabledAssetsArr[i] == 10) {
                    //** It indicates Sensor
                    enabledAssetNames.push("Sensor")
                } else if (enabledAssetsArr[i] == 11) {
                    //** It indicates Cashbox
                    enabledAssetNames.push("Cashbox")
                } else if (enabledAssetsArr[i] == 20) {
                    //** It indicates Parking Spaces
                    enabledAssetNames.push("Parking Space")
                } else if (enabledAssetsArr[i] == 31) {
                    //** It indicates Mechanisms
                    enabledAssetNames.push("Mechanism")
                } else if (enabledAssetsArr[i] == 32) {
                    //** It indicates Datakey
                    enabledAssetNames.push("DataKey")
                }
            }

            $(xml).find(layerName).find("Item").each(function (index) {
                var legendName = $(this).find('LegendLabel').text();
                var legendImage = "@Url.Content("~/Images/")" + $(this).find('LegendImage').text();
                var img = $('<img style="float:left;margin-left:6px;"/>').attr({ 'id': legendName, 'src': legendImage, 'alt': legendName })

                if (layerName == "AssetColorCodes") {
                    var imageLabel = $("<p style='font-size:13px;width:189px;' id='ifw'>&nbsp;&nbsp;" + legendName + "</p>")
                } else {
                    var imageLabel = $("<p style='line-height: 100%;font-size:13px;width:189px;' id='ifw'>&nbsp;&nbsp;" + legendName + "</p>")
                }

                var imageHolder = $('<div style="display:inline";>').html(img);

                var legItem = $("<div style='width:240px;'></div>")
                legItem.append(imageHolder)
                legItem.append(imageLabel)
                $("#legendPanel").append(legItem)
            });


        }

        function drawStLine() {
            var legendImage = "@Url.Content("~/Images/stLine.png")";
            var img = $('<img style="float:left;margin-left:0px;"/>').attr({ 'id': 'stLiner', 'src': legendImage, 'alt': 'stLiner' })
            var imageHolder = $('<div style="display:inline";>').html(img);
            $("#legendPanel").append(imageHolder)
        }

        function loadLegendDetails() {
            $("#legendPanel").append("<div></div>");
            $.ajax({
                type: "GET",
                url: "@Url.Content("~/Images/legendDetails.xml")",
                dataType: "xml",
                success: function (xml) {

                    //** Inventory Layer legends (if any)
                    //getLegendDetails(xml, 'Inventory_Layer')
                    //drawStLine()


                    //** High Demand Bays Layer legends (if any)
                    getLegendDetails(xml, 'HighDemandBays_Layer');
                   // drawStLine()




                },
                error: function () {
                    alert("An error occurred while processing XML file.");
                }
            });

        }






        function lowBattery() {
            //alert(2);
            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetBatteryRep")',
                //contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if(data == null)
                    {
                        data = 0;
                    }
                    $('#lowBat').text(data);
                    lBattery = data;
                    BatteryPercentage();
                }
            })

        }
        function changeBattery() {
            //alert(2);
            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetChangeBatteryRep")',
                //contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if(data == null)
                    {
                        data = 0;
                    }
                    $('#changeBat').text(data);
                    cBattery = data;
                }
            })

        }
        function BatteryPercentage() {
            var res = 0;
            if ('@Model.ActMeterCount'!=0)
            {
                res = (100 / @Model.ActMeterCount) * lBattery
                res = (res.toFixed(2))
            }
            else
            {
                res = 0;
            }
            $('#BatteryPercentage').text(res + "%");

        }

        function NoCommReport() {
            //alert(2);
            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetNoMeterCommRep")',
                //contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $('#NoComm').text(data);
                    lNoComm = data;
                    NoCommPercentage();
                }
            })

        }

        function NoCommPercentage() {
            var res = 0;
            if ('@Model.ActMeterCount'!=0)
            {
                res = (100 / @Model.ActMeterCount) * lNoComm
                res = (res.toFixed(2))
            }
            else
            {
                res = 0;
            }
            $('#NoCommPercentage').text(res + "%");

        }

        var viewModel = kendo.observable({
            SennsorNoComm: null,

        });
        
        function SennsorNoCommReport() {
            //alert(2);
            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetSensorCommRep")',
                //contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $('#SensorNoComm').text(data);
                    
                }
            })

        }


        function SpacestatusSensorRep() {
            //alert(2);
            $.ajax({
                type: "POST",
                dataType: "json",
                url: '@Url.Action("GetSpacestatusSensorRep")',
                //contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $('#SpaceStatus').text(data+"/"+'@Model.ActWithSensor');
                }
            })

            }

            function EnforceableSpaceRep() {
                //alert(2);
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    url: '@Url.Action("GetEnforceableSpaceRep")',
                    //contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        $('#Enforceable').text(data);
                    }
                })

            }

    </script>
}


@*<div class="two-column" id="news">*@
<div>

    <p style="*margin-left: 12px; font-family: Arial; font-weight: 700; font-size: 16px; height: 12px; color: #075c87; float: left;">Inventory</p>
    <img style="margin-left: 2px; margin-top: 10px;" src="~/Images/downarrow.png" />



    <div id="divMG">
        @*<div class="<%= @success ? 'good' : 'bad' %>">*@

        <div class="DB1" style="float: left; margin-left: 0px; float: left;">
            <div style="height: 30px; vertical-align: middle;">
                <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Locations Activated</p>
                <button class="todayOrange" style="text-align: right; margin-right: 4px; float: right;">Today</button>
            </div>

            <div style="border: 0.1px inset rgba(224, 224, 224, .5); width: 225px; height: 0.1px;"></div>


            <div style="margin-top: 10px;">
                <p class="BoxTextLeft">Total Locations</p>
                <p class="BoxTextRight"><b>@Model.TotalMeterCount</b></p>
            </div>

            <div style="clear: both;">
                <p class="BoxTextLeft">Locations Activated</p>
                <p class="BoxTextRight"><b>@Model.ActMeterCount</b></p>
            </div>

            <div>
                <p class="emptyLine"></p>
                <p class="emptyLine"></p>
                <p class="emptyLine"></p>
            </div>
            <p class="hyperLinkText" style="float: left;"><a href="@Url.Action("Index", "Assets")">Active Meters</a></p>
            <p class="HyperLinkTextRight" style="color: #ff6112;"><b>@Model.ActMeterPercentage%</b></p>


        </div>

        <div class="DB1" style="float: left; margin-left: 3px; float: left;">
            <div style="height: 30px; vertical-align: middle;">
                <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Meters with Active Alarms</p>
                <button class="today" style="text-align: right; margin-right: 4px; float: right;">Current</button>
            </div>
            <div style="border: 0.1px inset rgba(224, 224, 224, .5); width: 229px; height: 0.1px;"></div>

            <div style="margin-top: 10px;">
                <p class="BoxTextLeft">Severe Alarms</p>
                <p class="BoxTextRight"><b>@Model.SevereAlarmCount</b></p>
            </div>

            <div style="clear: both;">
                <p class="BoxTextLeft">Major Alarms</p>
                <p class="BoxTextRight"><b>@Model.MajAlarmCount</b></p>
            </div>



            <div>
                <p class="emptyLine"></p>
                <p class="emptyLine"></p>
                <p class="emptyLine"></p>
            </div>

            <p class="hyperLinkText" style="margin-top: -5px; float: left;"><a href="@Url.Action("Index", "Alarms")">Meters with Active Alarms</a></p>
            <p class="HyperLinkTextRight" style="margin-top: -5px; color: #00a2e8;"><b>@Model.AlaramPercentage%</b></p>



        </div>

        <div class="DB1" style="float: left; margin-left: 3px; float: left;">
            <div style="height: 30px; vertical-align: middle;">
                <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Asset Status</p>
                <button class="todayGreen" style="text-align: right; margin-right: 4px; float: right;">Past Day</button>
            </div>
            <div style="border: 0.1px inset rgba(224, 224, 224, .5); width: 229px; height: 0.1px;"></div>

            <div style="margin-top: 10px;">
                <p class="BoxTextLeft">Communicating</p>
                <p class="BoxTextRight"><b>@Model.ActMeterCommCount</b></p>
            </div>

            <div style="clear: both;">
                <p class="BoxTextLeft">Non-Communicating</p>
                <p class="BoxTextRight"><b>@Model.ActMeterNonCommCount</b></p>
                @*<b>
                        <p class="BoxTextRight" id="NoComm"></p>
                    </b>*@
            </div>

            <div>
                <p class="emptyLine"></p>
                <p class="emptyLine"></p>
                <p class="emptyLine"></p>
            </div>

            <p class="hyperLinkText" style="margin-top: 2px; float: left;"><a href="@Url.Action("ReportAssetMaintenance", "Reports")">Non-Communicating Meters</a></p>
            @*<p class="HyperLinkTextRight" style="margin-top: 2px; color: #3ec770;"><b>@Model.ActNonCommMeterPercentage%</b></p>*@
            <p class="HyperLinkTextRight" id="NoCommPercentage" style="margin-top: 2px; color: #3ec770;"><b></b></p>


        </div>

        <div class="DB1" style="float: left; margin-left: 3px; float: left;">
            <div style="height: 30px; vertical-align: middle;">
                <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Battery Report</p>
                <button class="todayGreen" style="text-align: right; margin-right: 4px; float: right;">Past Day</button>
            </div>

            <div style="border: 0.1px inset rgba(224, 224, 224, .5); width: 229px; height: 0.1px;"></div>

            <div style="margin-top: 10px;">
                <p class="BoxTextLeft">Change</p>
                @*<p class="BoxTextRight"><b>@Model.ChangeBatteryCount</b></p>*@
                <p class="BoxTextRight" id="lowBat"><b></b></p>
            </div>

            <div style="clear: both;">
                <p class="BoxTextLeft">Plan to Change</p>
                @*<p class="BoxTextRight"><b>@Model.PlanChangeBatteryCount</b></p>*@
                <p class="BoxTextRight" id="changeBat"><b></b></p>
            </div>

            <div>
                <p class="emptyLine"></p>
                <p class="emptyLine"></p>
                <p class="emptyLine"></p>
            </div>

            <p class="hyperLinkText" style="margin-top: 2px; float: left;">
                <a href="@Url.Action("ReportAssetMaintenance", "Reports")">Battery Maintenance Requried</a>
            </>
                @*<p class="hyperLinkText" style="margin-top: 2px; float: left;">
                    Battery Maintenance Requried</>*@
            @*<p class="HyperLinkTextRight" style="margin-top:2px;color:#3ec770;"><b>@Model.BatteryPercentage%</b></p>*@
            <p class="HyperLinkTextRight" id="BatteryPercentage" style="margin-top: 2px; color: #3ec770;"><b></b></p>



        </div>

        <div id="MeterGroup" style="display: none;">
            @*//Meter Groups*@
            <div class="DB2" style="float: left; margin-left: 165px; float: left;">
                <div style="height: 30px; vertical-align: middle;">

                    <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Asset Groups</p>
                    <button class="weekly" style="text-align: right; margin-right: 4px; float: right;">Current</button>
                </div>
                @(Html.Kendo().Chart()
                .Name("InventoryBox_1")
                  .HtmlAttributes(new { style = "width:295px;height:160px;font-size:8px; margin-left:3px;" })

                .Legend(legend => legend
                    .Visible(true).Position(ChartLegendPosition.Right).Font("10px Arial")
                )
                .Series(series =>
                {
                    series.Pie(new dynamic[] {
                        new {category="SingleSpaceMeter",value= Model.SingleSpaceMeter ,color="#00a2e8"},
                        new {category="MultiSpaceMeter",value= Model.MultiSpaceMeter ,color="#3ec770"},
                        new {category="Sensor",value= Model.Sensor ,color="#ff6112"},
                        //new {category="Cashbox",value= Model.Cashbox ,color="#d41558"},
                        //new {category="Smartcard",value= Model.Smartcard ,color="#BDBDBD"},
                        new {category="Gateway",value= Model.Gateway ,color="#FA58D0"},
                        new {category="CSPark",value= Model.CSPark ,color="#81F7F3"},
                        //new {category="ParkingSpaces",value= Model.ParkingSpaces ,color="#81F781"},
                        new {category="Mechanism",value= Model.Mechanism ,color="#F3F781"}
                        //new {category="DataKey",value= Model.Data ,color="#0489B1"}

                    })
                    .Labels(labels => labels
                        .Template("#= category #: \n #= value#")
                        .Background("transparent")
                        .Visible(true)
                        .Font("10px Arial")
                        .Template("#= value #")
                        .Position(ChartPieLabelsPosition.Center)
                    )
                    .StartAngle(150);
                })
                .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Format("{0}")
                )
                )
            </div>

            @*//Alarams*@
           @* <div class="DB2" style="float: left; margin-left: 3px; float: left;">
                <div style="height: 30px; vertical-align: middle;">

                    <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Alarms</p>
                    <button class="weekly" style="text-align: right; margin-right: 4px; float: right;">Current</button>
                </div>
             @(Html.Kendo().Chart()
        .Name("Alarams")
        .HtmlAttributes(new { style = "width:295px;height:160px;font-size:6px; margin-left:3px;" })
        .Legend(legend => legend
            .Position(ChartLegendPosition.Top).Font("10px Arial")
        )
        .ChartArea(chartArea => chartArea
            .Background("transparent")
        )
        .Series(series => {
            series.Column(new double[] { Model.SevereAlarmCount }).Name("Severe Alarms");
            series.Column(new double[] { Model.MajAlarmCount }).Name("Major Alarms");
        })
        .CategoryAxis(axis => axis
            .Name("series-axis")
            .Line(line => line.Visible(false))
        )
        .CategoryAxis(axis => axis
            .Name("label-axis")
            
            .Categories("Meter")
        )
        .ValueAxis(axis => axis
            .Numeric()
                .Labels(labels => labels.Format("{0}").Font("8px Arial"))
                // Move the label-axis all the way down the value axis
                .AxisCrossingValue(0, int.MinValue)
        )
        
        .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Format("{0}")
                )
    ) 
</div>*@

            @*//Communicating*@
            <div class="DB2" style="float: left; margin-left: 3px; float: left;">
                <div style="height: 30px; vertical-align: middle;">

                    <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Assets Status</p>
                    <button class="todayGreen" style="text-align: right; margin-right: 4px; float: right;">Past Day</button>
                </div>
             @(Html.Kendo().Chart()
        .Name("chart")
        .HtmlAttributes(new { style = "width:295px;height:160px;font-size:6px; margin-left:3px;" })
        .Legend(legend => legend
            .Position(ChartLegendPosition.Top).Font("10px Arial")
        )
        .ChartArea(chartArea => chartArea
            .Background("transparent")
        )
        .Series(series => {            
            series.Column(new double[] { Model.LibertyComm, Model.ActCommSensor, Model.CSPComm, Model.GatewayComm }).Name("Communicating");
            series.Column(new double[] { Model.LibertyNoComm, Model.ActNoCommSensor, Model.CSPNoComm, Model.GatewayNoComm }).Name("Non-Communicating");
        })
        .CategoryAxis(axis => axis
            .Name("series-axis")
            .Line(line => line.Visible(false))
        )
        .CategoryAxis(axis => axis
            .Name("label-axis")
            
            .Categories("Mechanism", "Sensor", "CSPark", "Gateway")
        )
        .ValueAxis(axis => axis
            .Numeric()
                .Labels(labels => labels.Format("{0}").Font("8px Arial"))
                // Move the label-axis all the way down the value axis
                .AxisCrossingValue(0, int.MinValue)
        )
        
        .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Format("{0}")
                )
    ) 
</div>

        </div>




    </div>






    <p style="*margin-left: 12px; font-family: Arial; font-weight: 700; font-size: 16px; height: 12px; color: #075c87; float: left;">Revenue</p>
    <img style="margin-left: 2px; margin-top: 10px;" src="~/Images/downarrow.png" />

    <div class="DBHolderChart">
        <div style="width: 325px; height: 120px; float: left;">
            <div class="DB2" style="float: left; margin-left: 0px; float: left;">
                <div style="height: 30px; vertical-align: middle;">

                    <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Credit Card By Status</p>
                    <button class="todayGreen" style="text-align: right; margin-right: 4px; float: right;">Past Day</button>

                </div>

                <div style="width: 100%;">
                    @(Html.Kendo().Chart()
                .Name("revenueBox_1")
                .HtmlAttributes(new { style = "width:295px;height:160px;font-size:8px; margin-left:3px;" })
                .Legend(legend => legend
                    .Visible(true).Position(ChartLegendPosition.Top).Font("10px Arial")
                )
                .Series(series =>
                {
                    series
                        .Column(new int[] { Model.PaymentAccepted })
                        .Name("Accepted Final").Labels(label => label.Visible(true).Position(ChartBarLabelsPosition.OutsideEnd));

                    series
                        .Column(new int[] { Model.PaymentPending })
                        .Name("Pending").Labels(label => label.Visible(true).Position(ChartBarLabelsPosition.OutsideEnd));

                    series
                        .Column(new int[] { Model.PaymentRefunded })
                        .Name("Refunded").Labels(label => label.Visible(true).Position(ChartBarLabelsPosition.OutsideEnd));

                    series
                        .Column(new int[] { Model.TotelPayment })
                        .Name("Total").Labels(label => label.Visible(true).Position(ChartBarLabelsPosition.OutsideEnd));


                })
                .SeriesColors(
                   "#00a2e8", "#3ec770", "#ff6112", "#d41558"

                )
                .CategoryAxis(axis => axis
                    .Categories(Model.Month).Labels(label => label.Font("10px Arial"))
                    .MajorGridLines(lines => lines.Visible(false))
                )
                .ValueAxis(axis => axis
            .Numeric()
            .Labels(labels => labels.Format("{0}").Font("10px Arial").Step(2))
            .Line(line => line.Visible(false))
            .MajorGridLines(lines => lines.Visible(false))
        )

                .Tooltip(tooltip => tooltip
                    .Visible(true)
                            //.Template("#= series.name # #= value")
                )
                    )
                </div>

            </div>

        </div>

        <div style="float: left; width: 325px; margin-left: 2px; height: 120px">
            <div class="DB2" style="float: left; margin-left: 3px; float: left;">
                <div style="height: 30px; vertical-align: middle;">

                    <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Transactions</p>
                    <button class="todayGreen" style="text-align: right; margin-right: 4px; float: right;">Past Day</button>
                </div>
                @(Html.Kendo().Chart()
                .Name("revenueBox_2")
                  .HtmlAttributes(new { style = "width:295px;height:160px;font-size:8px; margin-left:3px;" })

                .Legend(legend => legend
                    .Visible(true).Position(ChartLegendPosition.Right).Font("10px Arial")
                )
                .Series(series =>
                {
                    series.Pie(new dynamic[] {
                        new {category="Cash",value= Model.CashTransaction ,color="#00a2e8"},
                        new {category="Credit Card",value= Model.CreditTransaction ,color="#3ec770"},
                        new {category="Pay-By-Cell",value= Model.CellTransaction ,color="#ff6112"},
                        new {category="Smart Card",value= Model.SmartTransaction ,color="#d41558"}

                    })
                    .Labels(labels => labels
                        .Template("#= category #: \n #= value#")
                        .Background("transparent")
                        .Visible(true)
                        .Font("10px Arial")
                        .Template("#= value #")
                        .Position(ChartPieLabelsPosition.Center)
                    )
                    .StartAngle(150);
                })
                .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Format("{0}")
                )
                )
            </div>
        </div>

        <div style="float: left; width: 325px; margin-left: 2px; height: 120px">
            <div class="DB2" style="float: left; margin-left: 3px; float: left;">
                <div style="height: 30px; vertical-align: middle;">

                    <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Transactions Count</p>
                    <button class="weekly" style="text-align: right; margin-right: 4px; float: right;">Weekly</button>
                </div>
                <div style="width: 100%;">


                    @(Html.Kendo().Chart()
        .Name("revenueBox_3")
        .HtmlAttributes(new { style = "width:295px;height:160px;font-size:8px;margin-left:3px; " })
        .Legend(legend => legend
            .Position(ChartLegendPosition.Top).Font("10px Arial")
        )
        .SeriesDefaults(seriesDefaults =>
            seriesDefaults.Bar().Stack(true)
        )
        .DataSource(ds => ds.Read(read => read.Action("GetLastSevenDayTrans", "GIS")))
        .Series(series =>
        {
            series.Bar(new double[] { Model.D5CashTransaction, Model.D4CashTransaction, Model.D3CashTransaction, Model.D2CashTransaction, Model.CashTransaction }).Name("Cash").Color("#00a2e8");
            series.Bar(new double[] { Model.D5CreditTransaction, Model.D4CreditTransaction, Model.D3CreditTransaction, Model.D2CreditTransaction, Model.CreditTransaction }).Name("Credit Card").Color("#3ec770");
            series.Bar(new double[] { Model.D5CellTransaction, Model.D4CellTransaction, Model.D3CellTransaction, Model.D2CellTransaction, Model.CellTransaction }).Name("Pay By Cell").Color("#d41558");
            series.Bar(new double[] { Model.D5SmartTransaction, Model.D4SmartTransaction, Model.D3SmartTransaction, Model.D2SmartTransaction, Model.SmartTransaction }).Name("Smart Card").Color("#ff6112");
        })
        .CategoryAxis(axis => axis
                                                    .Categories(Model.Month5, Model.Month4, Model.Month3, Model.Month2, Model.Month).Labels(labels => labels.Font("10px Arial"))
            .MajorGridLines(lines => lines.Visible(false))
        )
        .ValueAxis(axis => axis
            .Numeric()
            .Labels(labels => labels.Format("{0}").Font("10px Arial"))
            //.Max(4080)
            .Line(line => line.Visible(false))
            .MajorGridLines(lines => lines.Visible(false))
        )
        .Tooltip(tooltip => tooltip
            .Visible(true)
            .Template("#= series.name #: #= value #")
        )
                    )

                </div>
            </div>

        </div>

    </div>

    <div id="occupancy" style="display: none;">
        <p style="*margin-left: 12px; font-family: Arial; font-weight: 700; font-size: 16px; height: 12px; color: #075c87; float: left;">Space Occupancy</p>
        <img style="margin-left: 2px; margin-top: 10px;" src="~/Images/downarrow.png" />

        <div class="DBHolderChart">
            <div style="width: 325px; height: 120px; float: left;">
                <div class="DB2" style="float: left; margin-left: 3px; float: left;">
                    <div style="height: 30px; vertical-align: middle;">
                        <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Sensor Locations</p>
                        <button class="todayGreen" style="text-align: right; margin-right: 4px; float: right;">Past Day</button>
                    </div>

                    <div style="width: 100%;">
                        @(Html.Kendo().Chart()
                .Name("Occ_1")
                  .HtmlAttributes(new { style = "width:295px;height:140px;font-size:8px; margin-left:3px;" })
                .Legend(legend => legend
                    .Visible(true).Position(ChartLegendPosition.Right).Font("10px Arial")
                )
                .Series(series =>
                {
                    series.Pie(new dynamic[] {
                        new {category="Activated with Sensors",value=Model.ActWithSensor,color="#00a2e8"},
                        new {category="Locations Activated",value=Model.ActMeterCount,color="#3ec770"},

                    })
                    .Labels(labels => labels
                        .Template("#= category #: \n #= value#")
                        .Background("transparent")
                        .Visible(true)
                        .Font("10px Arial")
                        .Template("#= value #")
                        .Position(ChartPieLabelsPosition.Center)
                    )
                    .StartAngle(150);
                })
                .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Format("{0}")
                )
                        )



                    </div>



                    <p class="hyperLinkText" style="float: left; font-size: 12px; margin-top: 2px;"><a href="@Url.Action("Index", "Assets")">Activated with Sensor</a></p>
                    <p class="HyperLinkTextRight" style="margin-top: 2px;"><b>@Model.ActSensorPercentage%</b></p>

                </div>

            </div>

            <div style="width: 325px; height: 120px; float: left;">
                <div class="DB2" style="float: left; margin-left: 3px; float: left;">
                    <div style="height: 30px; vertical-align: middle;">
                        <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Sensor Reports</p>
                        <button class="todayGreen" style="text-align: right; margin-right: 4px; float: right;">Past Day</button>
                    </div>

                    <div style="border: 0.1px inset rgba(224, 224, 224, .5); width: 99%; height: 0.1px;"></div>

                    <div style="margin-top: 10px;">
                        <p class="BoxTextLeft">Sensors Communicating</p>
                        <p class="BoxTextRight" id="SensorNoComm"></p>
                    </div>

                    <div style="margin-top: 10px;">
                        <p class="BoxTextLeft">Total Minutes Purchased</p>
                        <p class="BoxTextRight">@Model.TotalMinPurchased</p>
                    </div>

                    <div style="clear: both;">
                        <p class="BoxTextLeft">Minutes Zeroed Out</p>
                        <p class="BoxTextRight">@Model.MinZeroedOut</p>
                    </div>

                    <div style="clear: both;">
                        <p class="BoxTextLeft">Minutes Resold</p>
                        <p class="BoxTextRight">@Model.MinResold</p>
                    </div>

                    <div>

                        <p class="emptyLine"></p>
                        <p class="emptyLine"></p>
                        <p class="emptyLine"></p>
                    </div>
                    <p class="hyperLinkText" style="float: left; font-size: 12px;"><a href="@Url.Action("Index", "Occupancy")">Minutes Resold</a></p>
                    <p class="HyperLinkTextRight"><b>@Model.ActCommSensorPercentage%</b></p>

                </div>

            </div>



            <div style="float: left; width: 325px; margin-left: 2px; height: 120px">
                <div class="DB2" style="float: left; margin-left: 3px; float: left;">
                    <div style="height: 30px; vertical-align: middle;">
                        <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Space Status</p>
                        <button class="weekly" style="text-align: right; margin-right: 4px; float: right;">Current</button>
                    </div>

                    <div style="border: 0.1px inset rgba(224, 224, 224, .5); width: 99%; height: 0.1px;"></div>


                    <div style="margin-top: 10px;">
                        <p class="BoxTextLeft">Space Status with Sensor</p>
                        <p class="BoxTextRight" id="SpaceStatus"></p>
                    </div>

                    <div style="clear: both;">
                        <p class="BoxTextLeft">Spaces with Payment</p>
                        <p class="BoxTextRight">@Model.SpacesWithPayment/@Model.ActWithSensor</p>
                    </div>

                    <div style="clear: both;">
                        <p class="BoxTextLeft">Enforceable Spaces</p>
                        @*<p class="BoxTextRight"><b>@Model.EnforceableSpaces</b></p>*@
                        <p class="BoxTextRight" id="Enforceable"></p>
                    </div>

                    <div>

                        <p class="emptyLine"></p>
                        <p class="emptyLine"></p>
                        <p class="emptyLine"></p>
                        <p class="emptyLine" style="margin-top: -4px;"></p>
                    </div>

                    <div style="text-align: center;">
                        <a href="#" class="hyperLinkTextNoMargin">Map</a>
                        <a href="#" class="hyperLinkTextNoMargin" style="margin-left: 15px;">List</a>
                    </div>




                </div>

            </div>




        </div>


        @***************@


        <div class="DBHolderChart">
            <div style="float: left; width: 100%; margin-left: 0px; height: 120px">
                <div class="DB3" style="float: left; margin-left: 3px; float: left;">
                    <div style="height: 30px; vertical-align: middle;">
                        <p style="padding-left: 7px; margin-left: 4px; margin-top: 7px; font-family: Arial; font-weight: 600; font-size: 13px; height: 12px; color: #545351; float: left;">Space Occupancy Rate</p>
                        <button class="weekly" style="text-align: right; margin-right: 4px; float: right;">Current</button>
                    </div>
                    @(Html.Kendo().Chart()
                .Name("occ_2")
                 .HtmlAttributes(new { style = "width:98%;height:160px;font-size:8px; margin-left:3px;" })
                .Legend(legend => legend
                    .Position(ChartLegendPosition.Top)
                )
                .ChartArea(chartArea => chartArea
                    .Background("transparent")
                )
                .SeriesDefaults(seriesDefaults =>
                    seriesDefaults.Line()
                )
                .Series(series =>
                {
                    series.Line(Model.Key).Name("Occupancy").Color("#ff6112");
                    //series.Line(new double[] { 6, 4, 3, 3, 5, 6, 7 }).Name("Avg. Occupancy").Color("#ff6112");
                })
                .CategoryAxis(axis => axis
                    .Categories("12 am", "1 am", "2 am", "3 am", "4 am", "5 am", "6 am", "7 am", "8am", "9 am", "10 am", "11 am", "12 pm", "1 pm", "2 pm", "3 pm", "4 pm", "5 pm", "6 pm", "7 pm", "8 pm", "9 pm", "10 pm", "11 pm")
                    .MajorGridLines(lines => lines.Visible(false))
                )
                .ValueAxis(axis => axis
                    .Numeric().Labels(labels => labels.Format("{0}"))
                    .Line(line => line.Visible(true)).Title(title => title.Text("Count of Spaces").Font("11px Arial").Color("black"))
                    .AxisCrossingValue(-10)
                )
                .Tooltip(tooltip => tooltip
                    .Visible(true)
                    .Format("{0}")
        )
                    )
                </div>

            </div>
        </div>

    </div>

</div>
@***************@



<!-- Sairam added below line to display google map. Code added on Oct 8th 2014 -->
<div id="mHolder" style="float: none; clear: both; font-family: futura-pt-n4, futura-pt, Arial, sans-serif;">
    <div id="map_canvas" style="max-height: 95%; min-height: 95%; height: 487px; margin: 2px; margin-top: 8px; font-family: futura-pt-n4, futura-pt, Arial, sans-serif;"></div>

</div>

<div id="legendPanel">
</div>

<div id="legendTitle">
    <p>&nbsp;&nbsp;Legend Panel</p>
</div>

@section PageHeader
{
    @{
        var userContext = new PEMRBACEntities();
        var username = User.Identity.Name;
        var user = userContext.UserProfiles.SingleOrDefault(u => u.UserName == username);
        <h1><span style="margin-left: 20px;">@HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "Welcome"), @String.Format("{0} {1}", user.FirstName, user.LastName)</span></h1>
    }
    @if (ViewBag.PWExpirationDays < 15)
    {
        <div class="message">
            <ul>
                <li>@HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "Your password will expire in") @ViewBag.PWExpirationDays @HttpContext.Current.GetLocaleResource(ResourceTypes.Glossary, "day(s).")</li>
            </ul>
        </div>
    }

}

