@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@model Duncan.PEMS.Entities.BatteryChange.BatteryChangeModel

@{
    ViewBag.Title = "Battery Analysis";
}

@section Styles
{
    @Styles.Render("~/css/Kendo")

    <style type="text/css">
        .labels {
            color: black;
            background-color: white;
            font-family: "Lucida Grande", "Arial", sans-serif;
            font-size: 8px;
            font-weight: bold;
            text-align: center;
            width: 41px;
            /*width: 16px;*/
            border: 2px solid black;
            white-space: nowrap;
        }

        #container {
            width: 100%;
            height: 100%;
            margin-right: 5px;
            overflow: auto;
        }

        .commSummary {
            position: absolute;
            top: 0;
            left: 35%;
            color: black;
            display: none;
            width: 180px;
            height: 20px;
            border-style: none;
            /*border-color:black;
          border-width:thin;*/
            /*z-index: 1;*/
        }

        .commsText {
            width: 330px;
            font-family: Arial;
            font-size: 9px;
            font-weight: bold;
        }

        .graphID {
            display: none;
        }

        .graphIDText {
            width: 100%;
            text-align: center;
            font-family: Arial;
            font-size: 12px;
            font-weight: bold;
            color: blue;
        }


        .disabled {
            background-color: #F5F5F5 !important;
        }

        .filter-SearchButton {
            background-color: #ff6112 !important;
            border: 1px solid #00A99D !important;
        }

            .filter-SearchButton:hover {
                background: #ccc !important;
                text-decoration: none !important;
            }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-timepicker, .k-datetimepicker, .k-datepicker {
            background-color: transparent !important;
        }

        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }

        #exportButtons {
            display: none;
        }




        .k-textbox {
            height: auto !important;
        }

        #filterPanel_1 input[type=checkbox] {
            visibility: hidden;
        }




        #ddlAssetType input[type=checkbox] {
            visibility: visible;
        }

        #assetStatusDropDown input[type=checkbox] {
            visibility: visible;
        }
    </style>
}

@section PageHeader
{
    <h1>Admin / <span>Battery Analysis</span></h1>


}

@section PageFilter
{
    <div class="one-column">
        <div class="filter-option">
            <span class="filter-label">@HttpContext.Current.GetLocaleResource(ResourceTypes.Label, "Date Range")</span>
            <input id="dp-1" data-role="datetimepicker" style="width: 210px" data-bind="value: startDate" />
            to
            <input id="dp-2" data-role="datetimepicker" style="width: 210px" data-bind="value: endDate" />
            <span class="required_asterisk">*</span>
        </div>
    </div>

    <div style="clear:both;" class="two-column">
        <div class="filter-option">
            <label class="filter-label">Location Type:</label>
            @(Html.Kendo().DropDownList()
                      .Name("ddlLocationType")
                      .DataTextField("Text")
                      .DataValueField("Value")
                       .HtmlAttributes(new { @class = "filter-dropdown", style = "width:289px;font-size:16px;", id = "ddlLocationType", onchange = "GetLocationTypeId()" })
                     .Events(e => e
                                    .DataBound("onDataBound_LocationType")
                                )
                      .OptionLabel("All")
                      .BindTo(new List<SelectListItem>() {
                          new SelectListItem() {
                              Text = "Area",
                              Value = "Area"
                          },
                          new SelectListItem() {
                              Text = "Zone",
                              Value = "Zone"
                          },
                          new SelectListItem() {
                              Text = "Street",
                              Value = "Street"
                          }
                          // new SelectListItem() {
                          //    Text = "Suburb",
                          //    Value = "Suburb"
                          //}
                      })

            )
        </div>

    </div>

    <div>
        <div class="filter-option" id="location-container">
            <label id="lblLocationType" class="filter-label">Location:</label>
            @(Html.Kendo().AutoCompleteFor(a => a.AssetID).Name("autocompleteLocationId").DataTextField("Text").HtmlAttributes(new { style = "width:239px;font-size:16px;" })

                             .DataSource(source =>
                             {
                                 source.Read(read =>
                                 {
                                     //read.Url("../BatteryChange/GetLocationTypeId").Data("SetLocationType");
                                     read.Action("GetLocationTypeId", "BatteryChange").Data("SetLocationType");
                                 });
                                 source.ServerFiltering(true);
                             }).Filter("startswith")
                             .Suggest(true)
                             .MinLength(1)

            )


        </div>
    </div>

    <div style="clear:both;" class="two-column">
        <div class="filter-option">
            <label class="filter-label">Asset ID:</label>
            @(Html.Kendo().AutoCompleteFor(a => a.Area).Name("autocompleteAssetId").DataTextField("Text").HtmlAttributes(new { style = "width:289px;font-size:16px;" })
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            //read.Url("../BatteryChange/GetAssetIds").Data("GetParametersForAssetIds");
                                            read.Action("GetAssetIds", "BatteryChange").Data("GetParametersForAssetIds");
                                        });
                                        source.ServerFiltering(true);
                                    }).Filter("startswith").MinLength(2).Suggest(true)

            )

        </div>

    </div>


    <div id="refreshControls" style="clear:both;margin-left: 20px; float: left;">
        <div style="float: left;">
            <button id="btnSearch" type="button" value="Refresh" class="button important filter-SearchButton" onclick="GetCustomerGridDetails_func('clicked', 'Search')">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Refresh")</button>
        </div>


    </div>

}


@section ExportButtons
{
    @*Export options - Step 1 *@
    <div class="export-buttons" id="exportButtons">
        <a id="exportExcel" class="exportButton" href="@Url.Action("ExportToExcel_BatteryAnalysisReport", "BatteryChange", new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~"})">
            <img src='/images/export-excel.png' />
        </a>
        <a id="exportCSV" class="exportButton" href="@Url.Action("ExportToCSV_BatteryAnalysisReport",  "BatteryChange", new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~"})">
            <img src='/images/export-csv.png' />
        </a>
        <a id="exportPDF" class="exportButton" href="@Url.Action("ExportToPDF_BatteryAnalysisReport", "BatteryChange",  new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~"})">
            <img src='/images/export-pdf.png' />
        </a>
    </div>
}


<div id="DivCustomerDetails" style="display: none; width: 100%;height:1000px; margin-left:0px;">

    @(Html.Kendo().Grid<Duncan.PEMS.Entities.BatteryChange.BatteryAnalysisModel>()
      .HtmlAttributes(new { style = "width:100%;height:1000px" })
        .Name("grdCustomerDetails")
        .Columns(col =>
        {
            col.Bound(a => a.MID).Title("Asset Id").Width("105px");
            col.Bound(a => a.MeterName).Title("Asset Name").Width("128px");
            col.Bound(a => a.Area).Title("Area").Width("108px");
            col.Bound(a => a.Zone).Title("Zone").Width("168px");
            col.Bound(a => a.Street).Title("Street").Width("168px");
            col.Bound(a => a.SensorStatus).Title("Has Sensor").Width("120px");
            col.Bound(a => a.BatChangesCnt).Title("No. of Changes").Width("149px");
            col.Bound(a => a.firstChange).Title("First Change").Width("205px");
            col.Bound(a => a.secondChange).Title("Second Change").Width("205px");
            col.Bound(a => a.thirdChange).Title("Third Change").Width("205px");
            col.Bound(a => a.commsBtw_FirstChange_SecondChange).Title("Comms between 1st & 2nd Change").Width("245px");
            col.Bound(a => a.commsBtw_SecondChange_ThirdChange).Title("Comms between 2nd & 3rd Change").Width("245px");

        }
            )
                .Scrollable()
               .Navigatable()
                .Sortable()
                .AutoBind(false)
                        .Pageable(x =>
                        {
                            x.Enabled(true);
                            x.PreviousNext(true);
                            x.PageSizes(true);
                            x.Info(true);
                            x.Input(true);
                            x.Numeric(true);
                            x.Refresh(false);
                        })

                //.Filterable()
                .Reorderable(reoder => reoder.Columns(true))
                .Selectable(selectable => selectable
                .Mode(GridSelectionMode.Single))
                .Events(events => events.DataBound("onDataBound"))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetBatteryAnalysisDetails", "BatteryChange").Data("GetAllFilterData"))
                .PageSize(25)
                )
                .Resizable(resize => resize.Columns(true))
                .Pageable(pager => pager.PageSizes(new int[] { 25, 50, 100 })) // Enable paging

    )


</div>

<br />
<div id="container">
    <div id="legendImage" style="width:100%;height:100%;text-align:center;visibility:hidden;">
        <br />
        <img src='/images/BatteryAnalysisLegend.png' />
        <br />

    </div>
    <br />
</div>


@section Scripts
{
    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
    <script type="text/javascript" src="/scripts/spin.min.js"></script> <!-- Added by Sai on July 2nd 2013 -->
    <script type="text/javascript" src="~/Scripts/html2canvas.js"></script>
    <script>


        var mainContainer;
        var isCompleted = false;
        var findBatchTotal = 0;
        var isGridBounded = false;
        var lessThanBatchUsed = false;
        var BatchCount = 6;  //** This indicates every batch will display 6 charts when loaded
        var findLeftOverItems = 0;
        var batchStartIndex;
        var batchEndIndex;
        var trackBatchCount = 0;
        var chartSummaryContainer;
        var chart;
        var chartIndexIs = 0;
        var summaryContainer;
        var chartID;
        var commsText;
        var dateUnit;
        var commsServerDataArr = [];
        var uniqueMIDFromService = [];
        var batchMIDFromService = [];
        var uniqueMeterIDArr = [];
        var rightAxis_1;
        var rightAxis_2;
        var xAxisDaysLimit = [];
        var xAxisWeeksLimit = [];
        var xAxisMonthsLimit = [];
        var xAxisYearsLimit = [];

        var spinner;
        var timeInterval;
        var AssetStatus_timeInterval;
        var spCrit_layer_2_timeInterval;
        var isLegendDisplayed = false;
        var ROOT = '@Url.Content("~/")';






        var isAssetTypeLoaded = false;
        var isAssetStatusLoaded = false;
        var isLocationTypeLoaded = false;
        var isDemandZonesLoaded = false;
        var isLayer2_SpecCriteriaLoaded = false;
        var isLayer3_SpecCriteriaLoaded = false;



    </script>

    @Scripts.Render("~/bundles/kendo")

    @*Scripts by Sampath Start*@

    <script type="text/javascript">


        var startD = new Date();
        startD.setDate(new Date('@ViewData[Constants.ViewData.CurrentLocalTimeDisplay]').getDate());
        startD.setHours(0);
        startD.setMinutes(0);
        startD.setSeconds(0);
        var endD = new Date('@ViewData[Constants.ViewData.CurrentLocalTimeDisplay]');
        endD.setDate(endD.getDate());
        endD.setHours(23);
        endD.setMinutes(59);
        endD.setSeconds(59);

        var viewModel = kendo.observable({
            startDate: startD,
            endDate: endD,
            VMChangeDatesArr: [],
            VMCommsArr: [],

        });


        //** STEP-2
        var gridFilters = { "CurrentPage": 1, "PageSize": 25 };
        var sorts = {};


        //** STEP-3a
        function UpdateGridState() {

            /// Update the grid state object with grid's current state
            var currentGrid = $("#grdCustomerDetails").data("kendoGrid");

            gridFilters.CurrentPage = currentGrid.dataSource.page();

            //gridFilters.SelectedRow = currentGrid.select().index();
            gridFilters.sorts = JSON.stringify(currentGrid.dataSource._sort);

            gridFilters.pageSize = currentGrid.dataSource.pageSize();

        }

        function GetParametersForAssetIds() {

            var LocationTypeId = $("#ddlLocationType").val();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();
            var typedText = $('#autocompleteAssetId').val();


            return { myLocationTypeId: LocationTypeId, myParallerLocationId: ParallerLocationId, myTypedText: typedText }

        }

        function onDataBound_LocationType() {
            isLocationTypeLoaded = true;
        }

        function GetLocationTypeId() {


            var AutoComplete = $("#autocompleteLocationId").data("kendoAutoComplete");

            var LocationType = $("#ddlLocationType").data("kendoDropDownList").text();
            $("#autocompleteLocationId").val("");
            if (LocationType != "All") {

                $("#lblLocationType").html(LocationType + ":");

            }
            else {

                $("#lblLocationType").html("Location:");
                $("#autocompleteLocationId").val("Select a type");
            }

            // AutoComplete.dataSource.read();

            //  AutoComplete.refresh();


        }

        function SetLocationType() {

            var LocationType = $("#ddlLocationType").val();
            var typedText = String($("#autocompleteLocationId").val()).trim();
            return { locationType: LocationType, myTypedText: typedText }
        }

        //** STEP-3b
        function UpdateExportLinks() { //** Export options - Step 3

            /// Update the href for the export buttons
            var grid = $('#grdCustomerDetails').data('kendoGrid');

            // ask the parameterMap to create the request object for you
            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
                .options.parameterMap({
                    page: grid.dataSource.page(),
                    sort: grid.dataSource.sort(),
                    filter: grid.dataSource.filter()
                });

            //EXCEL
            var $excelLink = $('#exportExcel');
            $excelLink.attr('href', GetExportHref($excelLink.attr('href'), requestObject, grid));

            //CSV
            var $csvLink = $('#exportCSV');
            $csvLink.attr('href', GetExportHref($csvLink.attr('href'), requestObject, grid));

            //PDF
            var $pdfLink = $('#exportPDF');
            $pdfLink.attr('href', GetExportHref($pdfLink.attr('href'), requestObject, grid));


            $("#exportButtons").css("display", "inline");

        }

        function GetExportHref(href, requestObject, grid) { //** Export options - Step 4
            // Update the 'page' parameter with the grid's current page
            href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');
            // Update the 'sort' parameter with the grid's current sort descriptor
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            // Update the 'pageSize' parameter with the grid's current pageSize
            //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);
            href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + 100000);  //** sai modified pagesize to export all pages on jan 1st 2015
            //update filter descriptor with the filters applied
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

            var $StartDate = $('#dp-1').val();//viewModel.get('startDate');
            href = href.replace(/startDate=([^&]*)/, 'startDate=' + ($StartDate));

            var $EndDate = $('#dp-2').val();//viewModel.get('endDate');
            href = href.replace(/endDate=([^&]*)/, 'endDate=' + ($EndDate));

            var $AssetId = $("#autocompleteAssetId").val();
            href = href.replace(/AssetId=([^&]*)/, 'AssetId=' + ($AssetId));

            var $LocationTypeId = $("#ddlLocationType").val();
            href = href.replace(/LocationTypeId=([^&]*)/, 'LocationTypeId=' + ($LocationTypeId));

            var $LocationTypeName = $("#ddlLocationType").data("kendoDropDownList").text();
            href = href.replace(/LocationTypeName=([^&]*)/, 'LocationTypeName=' + ($LocationTypeName));

            var $ParallerLocationId = String($("#autocompleteLocationId").val()).trim();
            href = href.replace(/LocationId=([^&]*)/, 'LocationId=' + ($ParallerLocationId));

            return href;
        }

        $(document).ready(function () {

            //** Make the map invisible for the first time when the page is loaded.
            $('#DivCustomerDetails').css('display', 'none'); //** When the page loads for the first time, Don't show Grid.


            // bind the view model to the filter controls
            kendo.bind($(document.body), viewModel);

            // when the view state changes, cache it
            viewModel.bind("change", function (e) {
            });

        });



    </script>

    <script type="text/javascript">

        var layer2_Criteria;
        var layer3_Criteria;
        var temp = 0;

        function invokeCommsService() {
            // alert('invoke comms unqiue');
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCommsDataForUniqueIDS", "BatteryChange")',
                data: GetAllFilterData_SendUniqueIDS(),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',

                success: function (Data) {

                    if (Data.length == 0) {
                        // alert('No Data for comms.');
                    }

                    commsServerDataArr = [];
                    //**Push data into commsServerDataArr
                    // alert('Data.length from comms ' + Data.length);
                    for (var i = 0; i < Data.length; i++) {
                        commsServerDataArr.push(
                            {
                                meterID: Data[i].MID,
                                NoOfChanges: Data[i].BatChangesCnt,
                                firstToSecComms: Data[i].commsBtw_FirstChange_SecondChange,
                                secToThirdComms: Data[i].commsBtw_SecondChange_ThirdChange
                            });
                    }
                    //alert('commsServerDataArr length' + commsServerDataArr.length)
                    //step 4 - load data for chart
                    ajaxCallForTrellisChartData();

                },

                error: function (jqxhr) {
                    //    alert("Error: " + jqxhr.responseText);
                    showProgressBar(false); //** Hide Progress bar animation after the server response;

                }
            });

        }

        function ajaxCallForTrellisChartData() {
            //alert('terllis service starts');
            var markerArr = [];
            $.ajax({

                type: "GET",
                url: '@Url.Action("GetTrellisChartDataForUniqueIDS", "BatteryChange")',
                data: GetAllFilterData_SendUniqueIDS(),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',

                success: function (Data) {
                    if (Data.length == 0) {
                        //alert('No Data for chart.');
                        // showProgressBar(false);
                        //** Clear old data from Chart
                        //if (chartSummaryContainer != undefined) {
                        //    $(".chartSummContainer").remove();
                        //    $(".trellisChart").remove();
                        //}
                        //return;
                    }

                    // uniqueMeterID = [32001, 32004, 32005];

                    //** Populate the data
                    var myChartData = [];
                    var minVoltArr = [];
                    var maxVoltArr = [];
                    var commsCntArr = [];
                    var voltageDateArr = [];
                    var commsSummArr = [];
                    var changeDatesArr = [];



                    for (var i = 0; i < commsServerDataArr.length; i++) {

                        //** Initialize every loop
                        minVoltArr = [];
                        maxVoltArr = [];
                        commsCntArr = [];
                        voltageDateArr = [];
                        commsSummArr = [];
                        changeDatesArr = [];

                        for (var j = 0; j < Data.length; j++) {
                            //**Populate all minvolt for each meter
                            if (commsServerDataArr[i].meterID == Data[j].MID) {

                                minVoltArr.push(Data[j].minVoltage);
                                maxVoltArr.push(Data[j].maxVoltage);
                                commsCntArr.push(Data[j].CommsCnt);
                                voltageDateArr.push(new Date(Data[j].VoltageDate));

                            }
                        }



                        var chartObj = {
                            meterID: commsServerDataArr[i].meterID,
                            changeDates: [],
                            minVolt: minVoltArr,
                            maxVolt: maxVoltArr,
                            commsCnt: commsCntArr,
                            voltageDate: voltageDateArr,
                            commsSumm: [commsServerDataArr[i].NoOfChanges, commsServerDataArr[i].firstToSecComms, commsServerDataArr[i].secToThirdComms],
                        }

                        myChartData.push(chartObj);

                    }



                    mainContainer = document.querySelector("#container");

                    rightAxis_1 = 40;
                    rightAxis_2 = 40;

                    if (myChartData[0].minVolt.length <= 31) {
                        dateUnit = "days";
                        xAxisDaysLimit = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
                        xAxisWeeksLimit = [1];
                        xAxisMonthsLimit = [1];
                    } else if (myChartData[0].minVolt.length > 31 && myChartData[0].minVolt.length <= 183) {
                        dateUnit = "weeks";
                        xAxisDaysLimit = [1, 2];
                        xAxisWeeksLimit = [1, 3, 5, 7, 9, 11, 15, 19];
                        xAxisMonthsLimit = [1, 2];

                    } else if (myChartData[0].minVolt.length > 183 && myChartData[0].minVolt.length <= 366) {
                        dateUnit = "months";
                        xAxisDaysLimit = [1, 2];
                        xAxisWeeksLimit = [1, 3, 5, 7, 9, 11, 13];
                        xAxisMonthsLimit = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

                    } else if (myChartData[0].minVolt.length > 366) {
                        dateUnit = "years";
                        xAxisDaysLimit = [1, 2];
                        xAxisWeeksLimit = [1, 3, 5, 7, 9, 11, 13];
                        xAxisMonthsLimit = [1, 2, 3, 5, 7, 9, 11, 12];
                        xAxisYearsLimit = [1];
                    }

                    //** Clear old data
                    //if (chartSummaryContainer != undefined) {
                    //    $(".chartSummContainer").remove();
                    //    $(".trellisChart").remove();
                    //}



                    $('#legendImage').css('visibility', 'visible');

                    for (var i = 0; i < myChartData.length; i++) {
                        createChart(myChartData[i], chartIndexIs++);
                    }



                    if (isCompleted == false) {
                        if (trackBatchCount == findBatchTotal) {

                            //** Execute the left over charts
                            if (findLeftOverItems != 0) {
                                var leftOverStart = Number(batchEndIndex);
                                var leftOverEnd = uniqueMIDFromService.length - 1;
                                //  alert('leftOverStart leftOverEnd' + leftOverStart + " " + leftOverEnd);
                                findLeftOverItems = 0; //** Make it zero
                                callBatch_ForLeftOver(leftOverStart, leftOverEnd, findBatchTotal)
                            } else {
                                isCompleted = true;
                                showProgressBar(false); //** Hide Progress bar animation after the server response;
                                // return;

                            }
                            showProgressBar(false); //** Hide Progress bar animation after the server response;

                        } else {
                            //alert('isCompleted else' + isCompleted)
                            if (lessThanBatchUsed == true) {
                                showProgressBar(false); //** Hide Progress bar animation after the server response;
                                return;
                            } else {
                                batchStartIndex = batchStartIndex + BatchCount;
                                batchEndIndex = batchEndIndex + BatchCount;
                                callBatch_1(batchStartIndex, batchEndIndex, findBatchTotal)

                            }
                        }

                    }

                    if (isCompleted == true) {
                        showProgressBar(false); //** Hide Progress bar animation after the server response;
                        // return;
                    }



                    //**********************************************************************************************************


                },
                error: function (jqxhr) {
                    //    alert("Error: " + jqxhr.responseText);
                    showProgressBar(false); //** Hide Progress bar animation after the server response;

                }
            });

        }

        function shortLabels(value) {
            return kendo.toString(value) + "v";
        }

        function showTooltip(series, category, value) {
            var dateString;

            if (series == "Comms Count") {
                //  return kendo.toString(series) + " on " + kendo.toString(dateFormat(category, "mm/dd")) + " = " + "<b>" + kendo.toString(value) + "</b>";
                return kendo.toString(series) + " = " + "<b>" + kendo.toString(value) + "</b>";
            } else if (series == "Changed Date") {
                return kendo.toString(series) + " Comms  = " + "<b>" + kendo.toString(value) + "</b>";
            } else {
                return kendo.toString(series) + " = " + "<b>" + kendo.toString(value).toFixed(2) + "v" + "</b>";
            }

        }


        function createChart(myChartData, index) {
            //alert('myChartData.minVolt'+myChartData.minVolt)
            //** Comms summary text value fields
            var comms_2_Val;
            var comms_3_Val;
            var comms_4_Val;

            var comms_2 = "<p style='color:black;width:152px;height:3px;float:left;'>" + "Comms btw 1st & 2nd Change: " + "</p>" + myChartData.commsSumm[1];
            var comms_3 = "<p style='color:black;width:152px;height:3px;float:left;'>" + "Comms btw 2nd & 3rd Change: " + "</p>" + myChartData.commsSumm[2];
            var comms_4 = "<p style='color:black;width:152px;height:3px;float:left;'>" + "No. of Changes:" + "</p>" + myChartData.commsSumm[0];

            //var comms_2 = "Comms for 1st - 2nd Changes  " + myChartData.commsSumm[1];
            //var comms_3 = "Comms for 2nd - 3rd Changes  " + myChartData.commsSumm[2];
            //var comms_4 = "No. of Changes  : " + myChartData.commsSumm[0];


            //** Create div elements first
            chartSummaryContainer = document.createElement('div');
            chart = document.createElement('div');
            summaryContainer = document.createElement('div');
            summaryContainer.id = "sc";
            chartID = document.createElement('div');


            //** Apply styles dynamically for chartID box and its text
            chartID.style.position = "absolute";
            chartID.style.marginTop = "-24px";
            chartID.style.marginBottom = "4px";
            chartID.style.textAlign = "center";
            chartID.style.color = "blue";
            chartID.style.fontSize = "12px";
            chartID.style.fontWeight = "bold";
            chartID.style.width = "100%";
            chartID.style.height = "48px";
            chartID.innerHTML = myChartData.meterID;

            //** Apply styles dynamically for summary box and its text
            summaryContainer.style.position = "absolute";
            summaryContainer.style.top = "-3%";
            summaryContainer.style.left = "25%";
            summaryContainer.style.width = "184px";
            summaryContainer.style.display = 'inline';
            summaryContainer.style.borderStyle = "solid";
            summaryContainer.style.borderColor = "black";
            summaryContainer.style.borderWidth = "thin";
            summaryContainer.style.height = "auto";
            summaryContainer.style.color = "black";
            summaryContainer.style.fontFamily = "Arial";
            summaryContainer.style.fontSize = "9px";
            summaryContainer.style.fontWeight = "bold";
            summaryContainer.style.enableBackground = false;
            summaryContainer.innerHTML = comms_4 + "<br/>" + comms_2 + "<br/>" + comms_3;



            //** Apply styles dynamically for chartSummaryContainer
            chartSummaryContainer.className = 'chartSummContainer';
            chartSummaryContainer.style.styleFloat = 'left'; //For IE
            chartSummaryContainer.style['float'] = 'left';
            chartSummaryContainer.style['width'] = '358px';
            chartSummaryContainer.style['height'] = '100%';
            chartSummaryContainer.style['position'] = 'relative';
            chartSummaryContainer.style['display'] = 'block';
            chartSummaryContainer.style.marginTop = '13px';
            chartSummaryContainer.style.marginBottom = '13px';

            //** Apply ID and Class dynamically for trellis chart
            chart.id = "trellisChart_" + index;
            chart.className = 'trellisChart';
            chart.style['width'] = '365px';
            chart.style['height'] = '168px';
            chart.style['margin-bottom'] = '10px';
            chart.style['margin-top'] = '25px';
            chart.style['display'] = 'block';



            //** Append the child nodes

            mainContainer.appendChild(chartSummaryContainer);
            chartSummaryContainer.appendChild(chartID);
            chartSummaryContainer.appendChild(chart);
            chartSummaryContainer.appendChild(summaryContainer);

            $("#sc").attr("readonly", "1");

            //** Draw chart
            $("#trellisChart_" + index).kendoChart({
                legend: {
                    position: "top",
                    visible: false
                },
                tooltip: {
                    visible: true,
                    template: "#= showTooltip(series.name, category, value) #"

                },
                series: [{
                    type: "line",
                    data: myChartData.minVolt,
                    aggregate: "min",
                    //field: myChartData.minVolt,
                    name: "Min Volt",
                    color: "#ff1c1c",
                    axis: "minVolt",
                }, {
                    type: "line",
                    data: myChartData.maxVolt,
                    name: "Max Volt",
                    aggregate: "max",
                    color: "#73c100",
                    axis: "maxVolt",
                }, {
                    type: "line",
                    data: myChartData.commsCnt,
                    aggregate: "sum",
                    name: "Comms Count",
                    color: "#007eff",
                    axis: "Comms",
                }
                ],
                chartArea: {
                    background: "transparent"
                },
                valueAxes: [{
                    name: "minVolt",
                    labels: {
                        template: "#= shortLabels(value) #",
                        Font: "8px Arial",
                    },
                    title: { text: "Voltage (v)" },
                    color: "#ff1c1c",
                    font: "8px sans-serif",
                    min: 2,
                    max: 4
                }, {
                    name: "maxVolt",
                    title: { text: "" },
                    color: "#73c100",
                    min: 2,
                    max: 4,
                    visible: false
                }, {
                    name: "Comms",
                    title: { text: "No. of Comms" },
                    color: "#007eff",
                    Font: "8px Arial",
                    //min: 0,
                    //max: 300
                }],
                categoryAxis: {
                    baseUnit: dateUnit,
                    baseUnitStep: "auto",
                    autoBaseUnitSteps: {
                        days: xAxisDaysLimit, weeks: xAxisWeeksLimit, months: xAxisMonthsLimit, years: xAxisYearsLimit
                        //days: [1], weeks: [1,3], months: [1,3], years: [1]
                    },
                    labels: {
                        rotation: -90,
                        font: "8px sans-serif",
                        color: "black",
                        //template: '#= kendo.toString( toDate(value), "MM/dd/" )#'
                    },
                    majorGridLines: {
                        visible: false
                    },
                    categories: myChartData.voltageDate,
                    // Align the first two value axes to the left
                    // and the last two to the right.
                    //
                    // Right alignment is done by specifying a
                    // crossing value greater than or equal to
                    // the number of categories.
                    axisCrossingValues: [0, 0, rightAxis_1, rightAxis_2]
                }
            });







        }

        function compareSecondColumn(a, b) {
            if (a[1].voltageDate === b[1].voltageDate) {
                return 0;
            }
            else {
                return (a[1].voltageDate < b[1].voltageDate) ? -1 : 1;
            }
        }



        function onDataBound(arg) {
            var result = $("#grdCustomerDetails").data().kendoGrid.dataSource.data()

            if (result.length == 0) {
                alert('No data.');
                showProgressBar(false);
                //** Clear old data from Chart
                if (chartSummaryContainer != undefined) {
                    $(".chartSummContainer").remove();
                    $(".trellisChart").remove();
                }
                return;
            }


            $("#grdCustomerDetails").find(".k-pager-wrap").insertBefore(".k-grid-header");
            $("#DivCustomerDetails").show();
            $('#DivCustomerDetails').css('display', 'inline');


            //** Export options - Step 3
            UpdateGridState();
            UpdateExportLinks();

            if (isGridBounded == false) {
                isGridBounded = true; //** So that each time page change happens in grid will not execute the charts unless from rfrsh button click
                //** Step 2 - Get unique IDs for the selected date range
                GetUniqueIDSFromService();
            }

        }


        function GetCustomerGridDetails_func(IsClicked, ClickType) {

            showProgressBar(true);
            if (IsClicked == "clicked") {

                //showProgressBar(false); //** Display Progress bar animation till the server returns response;

                var $startDate = viewModel.startDate;

                //Test to see if the start date is not empty, and if it is a valid date
                if (!Date.parse($startDate)) {
                    alert("Start date must be a valid date");
                    return;
                }
                var $endDate = viewModel.endDate;

                //Test to see if the end date is not empty and if it is a valid date
                if (!Date.parse($endDate)) {
                    alert("End date must be a valid date.");
                    return;
                }


                //Test to see if start date is less than end date
                if ($startDate != '' && $endDate != '') {
                    if (Date.parse($startDate) > Date.parse($endDate)) {
                        alert("End date must be greater than start Date.");
                        return;
                    }
                }


                //** Validation for one day date range

                var dayIs = viewModel.startDate;
                var day = dayIs.getDate()
                var month = viewModel.startDate.getMonth() + 1
                var year = viewModel.startDate.getFullYear()
                var tempStartDate = day + '/' + month + '/' + year;

                var day = viewModel.endDate.getDate()
                var month = viewModel.endDate.getMonth() + 1
                var year = viewModel.endDate.getFullYear()
                var tempEndDate = day + '/' + month + '/' + year;


                var CustomerId = '@ViewBag.CurrentCityID';



                //** Clear old data from Chart


                isCompleted = false;
                isGridBounded = false;
                lessThanBatchUsed = false;
                trackBatchCount = 0;
                findBatchTotal = 0;

                if (chartSummaryContainer != undefined) {
                    $(".chartSummContainer").remove();
                    $(".trellisChart").remove();
                }

                //** Step 1 - Run the grid service to load data faster
                invokeDataSource(50);




            }

        }

        function dateDiff(date1, date2) {
            //Get 1 day in milliseconds
            var one_day = 1000 * 60 * 60 * 24;

            // Convert both dates to milliseconds
            var date1_ms = new Date(date1).getTime();
            var date2_ms = new Date(date2).getTime();

            // Calculate the difference in milliseconds
            var difference_ms = date2_ms - date1_ms;

            // Convert back to days and return
            return Math.round(difference_ms / one_day);
        }

        function GetUniqueIDSFromService() {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetUniqueIDSFromAction", "BatteryChange")',
                data: GetAllFilterData(),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',

                success: function (Data) {

                    if (Data.length == 0) {
                    }

                    //** Clear all the unique ids when refrsh btn is clicked
                    uniqueMIDFromService = [];

                    //**Store all unique MIDs into uniqueMIDFromService
                    for (var i = 0; i < Data.length; i++) {
                        uniqueMIDFromService.push(
                            {
                                meterID: Data[i].MID,
                            });
                    }

                    //alert('uniqueMIDFromService len' + uniqueMIDFromService.length);



                    //**Send BATCH WISE MeterIDS (3) to service every time

                    chartIndexIs = 0; //** to display unique kendo charts
                    batchStartIndex = 0;
                    batchEndIndex = BatchCount;
                    findBatchTotal = 0;
                    findLeftOverItems = 0;

                    //** Display batch of 6 charts
                    if (uniqueMIDFromService.length >= BatchCount) {

                        //** Display batchwise graphs only if no. of meters >= batchcount
                        findBatchTotal = parseInt(String(uniqueMIDFromService.length / BatchCount));
                        findLeftOverItems = uniqueMIDFromService.length % BatchCount;
                        callBatch_1(batchStartIndex, batchEndIndex, findBatchTotal);
                    } else {
                        //** It indicates that the no. of meters <= batchcount
                        //   alert('less than the batch count')
                        lessThanBatchUsed = true;
                        callBatch_1(0, uniqueMIDFromService.length, uniqueMIDFromService.length);
                    }



                },

                error: function (jqxhr) {
                    //    alert("Error: " + jqxhr.responseText);
                    showProgressBar(false); //** Hide Progress bar animation after the server response;

                }
            });

        }

        function callBatch_1(range_1, range_2, findBatchTotal) {
            batchMIDFromService = [];
            trackBatchCount++;

            for (var i = range_1; i < range_2; i++) {
                batchMIDFromService.push(
                    {
                        meterID: uniqueMIDFromService[i].meterID,
                    });
            }

            //** Step 3 - Run the comms service to load data faster for BATCH ids of 3
            invokeCommsService();

        }

        function callBatch_ForLeftOver(range_1, range_2, findBatchTotal) {
            // alert('range_1 range_2  ' + range_1 + "  " + range_2 + "   " + findBatchTotal);
            batchMIDFromService = [];
            trackBatchCount++;

            for (var i = range_1; i <= range_2; i++) {
                batchMIDFromService.push(
                    {
                        meterID: uniqueMIDFromService[i].meterID,
                    });
            }
            //  alert("batch len and ID " + batchMIDFromService.length + " " + batchMIDFromService[0].meterID);

            //** Step 3 - Run the comms service to load data faster for BATCH ids of 3
            isCompleted = true;
            invokeCommsService();

        }

        function invokeDataSource(maxCount) {
            temp = 0;
            //** The below line needs to be uncommented after fetching service
            //showProgressBar(true); //** Display Progress bar animation till the server returns response;


            var $filter = new Array();

            // Date Range
            var startDate = viewModel.startDate;
            var endDate = viewModel.endDate;
            var AssetId = $("#autocompleteAssetId").val();
            var LocationTypeId = $("#ddlLocationType").val();
            var LocationTypeName = $("#ddlLocationType").data("kendoDropDownList").text();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();

            if (startDate) {
                gridFilters.DateRangeFrom = startDate;
                $filter.push({ field: "StartDate", operator: "gte", value: startDate });
            }
            if (endDate) {
                gridFilters.DateRangeTo = endDate;
                $filter.push({ field: "EndDate", operator: "lte", value: endDate });
            }

            $filter.push({ field: "AssetId", operator: "equals", value: AssetId });
            $filter.push({ field: "LocationTypeId", operator: "equals", value: LocationTypeId });
            $filter.push({ field: "LocationTypeName", operator: "equals", value: LocationTypeName });
            $filter.push({ field: "LocationId", operator: "equals", value: ParallerLocationId });

            $("#grdCustomerDetails").data("kendoGrid").dataSource.filter($filter);
            $("#grdCustomerDetails").data("kendoGrid").dataSource.view({ page: gridFilters.CurrentPage, filter: $filter, pageSize: gridFilters.PageSize, sort: sorts });


        }

        function parseDate(str) {
            var dateAlone = str.split(" ");
            var mdy = dateAlone[0].toString().split('/');
            return new Date(mdy[2], mdy[0] - 1, mdy[1]);
        }

        function daydiff(first, second) {
            return Math.round((second - first) / (1000 * 60 * 60 * 24));
        }


        function GetAllFilterData_SendUniqueIDS() {
            var CustomerId = '@ViewBag.CurrentCityID';

            //**start and end dates

            var $startDate = viewModel.startDate;
            var $endDate = viewModel.endDate;
            var finalStart = $('#dp-1').val();
            var finalEnd = $('#dp-2').val();

            //** Send only unique IDS to the service for comms processing
            var values = [];
            for (var i = 0; i < batchMIDFromService.length; i++) {
                values.push(batchMIDFromService[i].meterID);
            }
            var AssetId = values.toString();

            var LocationTypeId = $("#ddlLocationType").val();
            var LocationTypeName = $("#ddlLocationType").data("kendoDropDownList").text();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();


            return { customerId: CustomerId, startDate: finalStart, endDate: finalEnd, AssetId: AssetId, LocationTypeId: LocationTypeId, LocationTypeName: LocationTypeName, LocationId: ParallerLocationId }
        }


        function GetAllFilterData() {
            var CustomerId = '@ViewBag.CurrentCityID';

            //**start and end dates

            var $startDate = viewModel.startDate;
            var $endDate = viewModel.endDate;
            var finalStart = $('#dp-1').val();
            var finalEnd = $('#dp-2').val();

            var AssetId = $("#autocompleteAssetId").val();
            var LocationTypeId = $("#ddlLocationType").val();
            var LocationTypeName = $("#ddlLocationType").data("kendoDropDownList").text();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();


            return { customerId: CustomerId, startDate: finalStart, endDate: finalEnd, AssetId: AssetId, LocationTypeId: LocationTypeId, LocationTypeName: LocationTypeName, LocationId: ParallerLocationId }
        }


        function fetchCustomerID() {
            var CustomerId = '@ViewBag.CurrentCityID';
            return { customerid: CustomerId }
        }



    </script>

    @*Scripts by Sairam Start*@
    <script>

        function showProgressBar(visisbility) {

            if (visisbility == false) {
                if (spinner != null || spinner != undefined) {
                    spinner.stop() //** hide the PB
                }
            } else {
                //** Create spinner and display PB
                var opts = {
                    lines: 13, // The number of lines to draw
                    length: 0, // The length of each line
                    width: 5, // The line thickness
                    radius: 15, // The radius of the inner circle
                    corners: 1, // Corner roundness (0..1)
                    rotate: 48, // The rotation offset
                    direction: 1, // 1: clockwise, -1: counterclockwise
                    color: '#000', // #rgb or #rrggbb
                    speed: 1, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: false, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 2e9, // The z-index (defaults to 2000000000)
                    bottom: 'auto', // Top position relative to parent in px
                    top: '40%',
                    left: 'auto' // Left position relative to parent in px

                };
                spinner = new Spinner(opts).spin(document.querySelector("#container"));
            }

        }

        var dateFormat = function () {
            var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
                timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
                timezoneClip = /[^-+\dA-Z]/g,
                pad = function (val, len) {
                    val = String(val);
                    len = len || 2;
                    while (val.length < len) val = "0" + val;
                    return val;
                };

            // Regexes and supporting functions are cached through closure
            return function (date, mask, utc) {
                var dF = dateFormat;

                // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
                if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
                    mask = date;
                    date = undefined;
                }

                // Passing date through Date applies Date.parse, if necessary
                date = date ? new Date(date) : new Date;
                if (isNaN(date)) throw SyntaxError("invalid date");

                mask = String(dF.masks[mask] || mask || dF.masks["default"]);

                // Allow setting the utc argument via the mask
                if (mask.slice(0, 4) == "UTC:") {
                    mask = mask.slice(4);
                    utc = true;
                }

                var _ = utc ? "getUTC" : "get",
                    d = date[_ + "Date"](),
                    D = date[_ + "Day"](),
                    m = date[_ + "Month"](),
                    y = date[_ + "FullYear"](),
                    H = date[_ + "Hours"](),
                    M = date[_ + "Minutes"](),
                    s = date[_ + "Seconds"](),
                    L = date[_ + "Milliseconds"](),
                    o = utc ? 0 : date.getTimezoneOffset(),
                    flags = {
                        d: d,
                        dd: pad(d),
                        ddd: dF.i18n.dayNames[D],
                        dddd: dF.i18n.dayNames[D + 7],
                        m: m + 1,
                        mm: pad(m + 1),
                        mmm: dF.i18n.monthNames[m],
                        mmmm: dF.i18n.monthNames[m + 12],
                        yy: String(y).slice(2),
                        yyyy: y,
                        h: H % 12 || 12,
                        hh: pad(H % 12 || 12),
                        H: H,
                        HH: pad(H),
                        M: M,
                        MM: pad(M),
                        s: s,
                        ss: pad(s),
                        l: pad(L, 3),
                        L: pad(L > 99 ? Math.round(L / 10) : L),
                        t: H < 12 ? "a" : "p",
                        tt: H < 12 ? "am" : "pm",
                        T: H < 12 ? "A" : "P",
                        TT: H < 12 ? "AM" : "PM",
                        Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                        o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                        S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
                    };

                return mask.replace(token, function ($0) {
                    return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
                });
            };
        }();

        // Some common format strings
        dateFormat.masks = {
            "default": "ddd mmm dd yyyy HH:MM:ss",
            shortDate: "m/d/yy",
            mediumDate: "mmm d, yyyy",
            longDate: "mmmm d, yyyy",
            fullDate: "dddd, mmmm d, yyyy",
            shortTime: "h:MM TT",
            mediumTime: "h:MM:ss TT",
            longTime: "h:MM:ss TT Z",
            isoDate: "yyyy-mm-dd",
            isoTime: "HH:MM:ss",
            isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
            isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
        };

        // Internationalization strings
        dateFormat.i18n = {
            dayNames: [
                "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
                "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
            ],
            monthNames: [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
                "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
            ]
        };

        // For convenience...
        Date.prototype.format = function (mask, utc) {
            return dateFormat(this, mask, utc);
        };

    </script>


}

