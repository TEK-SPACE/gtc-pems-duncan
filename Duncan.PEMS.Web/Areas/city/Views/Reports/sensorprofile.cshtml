@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@model Duncan.PEMS.Entities.BatteryChange.BatteryChangeModel

@{
    ViewBag.Title = "Sensor Profiles";
}

@section Styles
{
    @Styles.Render("~/css/Kendo")

    <style type="text/css">
        .labels {
            color: black;
            background-color: white;
            font-family: "Lucida Grande", "Arial", sans-serif;
            font-size: 8px;
            font-weight: bold;
            text-align: center;
            width: 41px;
            /*width: 16px;*/
            border: 2px solid black;
            white-space: nowrap;
        }

        #container {
          width: 100%;
          height: 100%;
          margin-right:5px;
          overflow:auto;
        }

        .commSummary {
          position: absolute;
          top: 0;
          left:35%;
          color:black;
          display:none;
          width:180px;
          height:20px;
          border-style:none;
          /*border-color:black;
          border-width:thin;*/ 
          /*z-index: 1;*/
        }

        .commsText {
             width:330px;
             font-family: Arial;
             font-size:9px;
             font-weight:bold;
        }

        .graphID {
            display:none;
        }

        .graphIDText {
            width:100%;text-align:center;font-family:Arial;font-size:12px;font-weight:bold;color:blue;
        }


        .disabled {
            background-color: #F5F5F5 !important;
        }

        .filter-SearchButton {
            background-color: #ff6112 !important;
            border: 1px solid #00A99D !important;
        }

            .filter-SearchButton:hover {
                background: #ccc !important;
                text-decoration: none !important;
            }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-timepicker, .k-datetimepicker, .k-datepicker {
            background-color: transparent !important;
        }

        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }

        #exportButtons {
            display: none;
        }




        .k-textbox {
            height: auto !important;
        }

        #filterPanel_1 input[type=checkbox] {
            visibility: hidden;
        }




        #ddlAssetType input[type=checkbox] {
            visibility: visible;
        }

        #assetStatusDropDown input[type=checkbox] {
            visibility: visible;
        }
    </style>
}

@section PageHeader
{
    <h1>Admin / <span>Sensor Profiles</span></h1>


}

@section PageFilter
{
      <div class="filter-option" style="display:none;">
         <label class="filter-label">Customer ID:</label>
                        @(Html.Kendo().DropDownList()
                                  .Name("cityName")
                                  .DataTextField("Text")
                                  .DataValueField("Value")
                                  .AutoBind(false)
                                  .HtmlAttributes(new { @class = "filter-dropdown", style = "width:210px;font-size:16px;" })
                                  .Events(e => e.Change("onCityChange"))
                                          .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                {
                                                    read.Action("GetCustomers", "BatteryChange").Data("");
                                                });
                                            })
                                  .Value("4108")
                        )
      
    </div>

    <div class="one-column">
        <div class="filter-option">
            <span class="filter-label">@HttpContext.Current.GetLocaleResource(ResourceTypes.Label, "Date Range")</span>
            <input id="dp-1" data-role="datetimepicker" style="width: 210px" data-bind="value: startDate" onchange="onDateChanged()" />
            
        </div>
    </div>

      <div class="one-column">
        <div class="filter-option">
            <span class="filter-label">@HttpContext.Current.GetLocaleResource(ResourceTypes.Label, "")</span>
             <input id="dp-2" data-role="datetimepicker" style="width: 210px" data-bind="value: endDate" onchange="onDateChanged()" />
            </div>
            @*<span class="required_asterisk">*</span>*@
        </div>
    

      <div style="clear:both;" class="two-column">
        <div class="filter-option">
            <label class="filter-label">Location Type:</label>
              @(Html.Kendo().DropDownList()
                      .Name("ddlLocationType")
                      .DataTextField("Text")
                      .DataValueField("Value")
                       .HtmlAttributes(new { @class = "filter-dropdown", style = "width:210px;font-size:16px;", id = "ddlLocationType", onchange = "GetLocationTypeId()" })
                     .Events(e => e
                                    .DataBound("onDataBound_LocationType")
                                )
                      .OptionLabel("All")
                      .BindTo(new List<SelectListItem>() {
                          new SelectListItem() {
                              Text = "Area",
                              Value = "Area"
                          },
                          new SelectListItem() {
                              Text = "Zone",
                              Value = "Zone"
                          },
                          new SelectListItem() {
                              Text = "Street",
                              Value = "Street"
                          }
                      })

            )
        </div>
            <div class="filter-option" id="location-container">
            <label id="lblLocationType" class="filter-label">Location:</label>
            @(Html.Kendo().AutoCompleteFor(a => a.AssetID).Name("autocompleteLocationId").DataTextField("Text").HtmlAttributes(new {onkeyup="onLocationTyped()", style = "width:210px;font-size:16px;" })

                             .DataSource(source =>
                             {
                                 source.Read(read =>
                                 {
                                     //read.Url("../BatteryChange/GetLocationTypeId").Data("SetLocationType");
                                     read.Action("GetLocationTypeId", "BatteryChange").Data("SetLocationType");
                                 });
                                 source.ServerFiltering(true);
                             }).Filter("startswith")
                             .Suggest(true)
                             .MinLength(1)

            )


        </div>
          <div class="two-column" style="clear:both">
             
             <div class="filter-option" >
                   <label class="filter-label" >Profile Status:</label>
                       @(Html.Kendo().ListView<Duncan.PEMS.Entities.BatteryChange.BatteryChangeModel>()
                        .HtmlAttributes(new { id = "StatusBox", style = "width:208px;height:90px;font-size:12px;margin-Left:125px; margin-Top:0px; overflow-y:scroll;" })
                        .Name("statusView")
                        .TagName("div")
                        .AutoBind(true)
                        .Selectable()
                        .ClientTemplateId("template_status")
                        .DataSource(dataSource =>
                        {
                            dataSource
                            .ServerOperation(false)
                             .Events(events => events
                                 .RequestStart("onGroupListReqStart_status")
                                 .RequestEnd("onGroupListReqEnd_status")
                                 .Change("onStatusChange")
                         
            )
                            .Read(read => read.Action("GetStatusProfileForListBox", "BatteryChange").Data("SetLocationTypeLB"));
                        })
                    )
                   

    </div>
 </div>


        <div class="filter-option">
            <label class="filter-label">Quick Search:</label>
            @(Html.Kendo().AutoCompleteFor(a => a.Area).Name("autocompleteAssetId").DataTextField("Text").HtmlAttributes(new {onkeydown="return isNumberKey(event);", style = "width:219px;font-size:16px;" })
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                           // read.Url("../BatteryChange/GetAssetIds").Data("GetParametersForAssetIds");
                                        });
                                        source.ServerFiltering(true);
                                    }).Filter("startswith").MinLength(2).Suggest(true).Placeholder("Asset ID").Separator(",")

            )

        </div>

   
      
    </div>
   <div class="two-column">
       <label class="filter-label" style = "margin-top:-86px;margin-left:-50px;">Asset ID:</label>
     <div class="filter-option">
            
             @(Html.Kendo().ListView<Duncan.PEMS.Entities.BatteryChange.BatteryChangeModel>()
                        .HtmlAttributes(new { id = "groupListBox", style = "margin-top:-77px; width:163px;height:300px;font-size:12px;overflow-y:scroll;" })
                        .Name("listView")
                        .TagName("div")
                        .AutoBind(false)
                         .Selectable()
                        .ClientTemplateId("template")
                        //.Selectable(selectable => selectable.Mode(ListViewSelectionMode.Single))
                        .DataSource(dataSource =>
                        {
                            dataSource
                            .ServerOperation(false)
                             .Events(events => events
                                 .RequestStart("onGroupListReqStart")
                                 .RequestEnd("onGroupListReqEnd")
                         
            )
                            .Read(read => read.Action("GetLocationsForListBox", "BatteryChange").Data("SetLocationTypeForAssetIDs"));
                        })
                    )
        </div>
        </div>

    <div id="refreshControls" style="clear:both;margin-left: 20px; float: left;">
        <div style="float: left;">
            <button id="btnSearch" type="button" value="Refresh" class="button important filter-SearchButton" onclick="GetCustomerGridDetails_func('clicked', 'Search')">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Refresh")</button>
        </div>


    </div>

}


@section ExportButtons
{
    @*Export options - Step 1 *@
    <div class="export-buttons" id="exportButtons">
        <a id="exportExcel" class="exportButton" href="@Url.Action("ExportToExcel_SensorProfile", "BatteryChange", new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~", sensorIDS="~", statusList="~", customerID="~"})">
            <img src='/images/export-excel.png' />
        </a>
        <a id="exportCSV" class="exportButton" href="@Url.Action("ExportToCSV_SensorProfile",  "BatteryChange", new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~", sensorIDS="~", statusList="~", customerID="~"})">
            <img src='/images/export-csv.png' />
        </a>
        <a id="exportPDF" class="exportButton" href="@Url.Action("ExportToPDF_SensorProfile", "BatteryChange",  new { page = 1, pageSize = "~", filter = "~", sort = "~", startDate = "~", endDate = "~", sensorIDS="~", statusList="~", customerID="~"})">
            <img src='/images/export-pdf.png' />
        </a>
    </div>
}


<div id="DivCustomerDetails" style="display: none; width: 100%;height:550px;  margin-left:0px;">

    @(Html.Kendo().Grid<Duncan.PEMS.Entities.BatteryChange.sensorProfileModel>()
      .HtmlAttributes(new {style = "width:100%;heigth:550px;" })
        .Name("grdCustomerDetails")
        
        .Columns(col =>
        {
            col.Bound(a => a.LastUpdatedTS).Title("Datetime").Width("192px");
            col.Bound(a => a.MID).Title("Asset Id").Width("95px");
            col.Bound(a => a.Area).Title("Area").Width("98px");
            col.Bound(a => a.Zone).Title("Zone").Width("138px");
            col.Bound(a => a.Street).Title("Street").Width("178px");
            col.Bound(a => a.OccupancyStatus).Title("Occupancy status").Width("145px");
            col.Bound(a => a.ProfileStatus).Title("Profile status").Width("145px");
            col.Bound(a => a.TMPDesc).Title("TMP").Width("175px");
            col.Bound(a => a.RUDesc).Title("RU").Width("175px");
            col.Bound(a => a.ATDesc).Title("AT").Width("195px");
            col.Bound(a => a.SWDesc).Title("SW").Width("145px");
            col.Bound(a => a.TRPKDesc).Title("TRPK").Width("205px");
            

        }
            )
               .Scrollable(s => s.Height("auto"))
               .Navigatable()
                .Sortable()
                .AutoBind(false)
                        .Pageable(x =>
                        {
                            x.Enabled(true);
                            x.PreviousNext(true);
                            x.PageSizes(true);
                            x.Info(true);
                            x.Input(true);
                            x.Numeric(true);
                            x.Refresh(false);
                        })

                //.Filterable()
                .Reorderable(reoder => reoder.Columns(true))
                .Selectable(selectable => selectable
                .Mode(GridSelectionMode.Single))
                .Events(events => events.DataBound("onDataBound"))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetProfileData", "BatteryChange").Data("GetAllFilterData_Profiles"))
                .PageSize(50)
                )
                .Resizable(resize => resize.Columns(true))
                .Pageable(pager => pager.PageSizes(new int[] {50, 100, 200 })) // Enable paging

    )


</div>

<br />
<div id="container">
    <div id="legendImage" style="width:100%;height:100%;text-align:center;visibility:hidden;">
         <br />
        <img src='/images/SensorProfilesLegend.png' />
        <br />
        
    </div>
</div>


@section Scripts
{
    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
    <script type="text/javascript" src="/scripts/spin.min.js"></script> <!-- Added by Sai on July 2nd 2013 -->
    <script type="text/javascript" src="~/Scripts/html2canvas.js"></script>

    <script type="text/x-kendo-tmpl" id="template">
      <div>
           <input type="checkbox" class="clickSensor" onclick="checkboxChange_Sensor(this)" name='#:Text#'  /> 
          <span style='width:100%;fontSize:14;font-family: "Lucida Grande", "Arial", sans-serif;'>#:Text# </span>
      </div>
   </script>

  <script type="text/x-kendo-tmpl" id="template_status">
      <div  >
           <input type="checkbox" class="clickStatus" onclick="checkboxChange(this)" name='#:Text#' checked="checked"  />
           <span style='width:100%;fontSize:14;font-family: "Lucida Grande", "Arial", sans-serif;'>#:Text# </span>
       
      </div>
               
    </script>

    <script>


        var mainContainer;
        var uniqueNames = [];
        var uniqueSensors = [];
        var StatListBoxSelections = [];
        var SensorListBoxSelections = [];
        var isCompleted = false;
        var findBatchTotal = 0;
        var isGridBounded = false;
        var lessThanBatchUsed = false;
        var BatchCount = 8;  //** This indicates every batch will display 8 charts when loaded
        var findLeftOverItems = 0;
        var batchStartIndex;
        var batchEndIndex;
        var trackBatchCount = 0;
        var chartSummaryContainer;
        var chart;
        var chartIndexIs = 0;
        var summaryContainer;
        var chartID;
        var commsText;
        var dateUnit;
        var commsServerDataArr = [];
        var uniqueMIDFromService = [];
        var trellisChartData = [];
        var batchMIDFromService = [];
        var uniqueMeterIDArr = [];
        var rightAxis_1;
        var rightAxis_2;
        var xAxisDaysLimit = [];
        var xAxisWeeksLimit = [];
        var xAxisMonthsLimit = [];
        var xAxisYearsLimit = [];

        var spinner;
        var timeInterval;
        var AssetStatus_timeInterval;
        var spCrit_layer_2_timeInterval;
        var isLegendDisplayed = false;
        var ROOT = '@Url.Content("~/")';
        var myCity;





        var isAssetTypeLoaded = false;
        var isAssetStatusLoaded = false;
        var isLocationTypeLoaded = false;
        var isDemandZonesLoaded = false;
        var isLayer2_SpecCriteriaLoaded = false;
        var isLayer3_SpecCriteriaLoaded = false;



    </script>

    @Scripts.Render("~/bundles/kendo")

    @*Scripts by Sampath Start*@

    <script type="text/javascript">


        var startD = new Date();
        startD.setDate(new Date('@ViewData[Constants.ViewData.CurrentLocalTimeDisplay]').getDate());
        startD.setHours(7);
        startD.setMinutes(0);
        startD.setSeconds(0);
        var endD = new Date('@ViewData[Constants.ViewData.CurrentLocalTimeDisplay]');
        endD.setDate(endD.getDate());
        endD.setHours(21);
        endD.setMinutes(0);
        endD.setSeconds(0);

        var viewModel = kendo.observable({
            startDate: startD,
            endDate: endD,
            VMChangeDatesArr: [],
            VMCommsArr: [],

        });


        //** STEP-2
        var gridFilters = { "CurrentPage": 1, "PageSize": 25 };
        var sorts = {};


        //** STEP-3a
        function UpdateGridState() {

            /// Update the grid state object with grid's current state
            var currentGrid = $("#grdCustomerDetails").data("kendoGrid");

            gridFilters.CurrentPage = currentGrid.dataSource.page();

            //gridFilters.SelectedRow = currentGrid.select().index();
            gridFilters.sorts = JSON.stringify(currentGrid.dataSource._sort);

            gridFilters.pageSize = currentGrid.dataSource.pageSize();

        }

        function onLocationTyped() {
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();
            var AutoComplete = $("#groupListBox").data("kendoListView");
            AutoComplete.dataSource.read();
        }

        function onCityChange() {
            //var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            //var mdate = new Date();
            //viewModel.set("myCityName", $('#cityName').val());
            //viewModel.set("myCityName", $('#cityName').val());
            //document.getElementById('headTxt').innerHTML = "Sensor Profiles for the month of " + months[mdate.getMonth()] + ' ' + mdate.getFullYear() + " for the CustomerID: " + "<span style=color:blue>" + viewModel.get('myCityName') + "</span>";
            var AutoComplete = $("#groupListBox").data("kendoListView");
            AutoComplete.dataSource.read();
        }

        function isNumberKey(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            } else {
                return true;
            }

        }

        function onDateChanged() {
            var $startDate = viewModel.startDate;

            //Test to see if the start date is not empty, and if it is a valid date
            if (!Date.parse($startDate)) {
                alert("Start date must be a valid date");
                return;
            }
            var $endDate = viewModel.endDate;

            //Test to see if the end date is not empty and if it is a valid date
            if (!Date.parse($endDate)) {
                alert("End date must be a valid date.");
                return;
            }


            //Test to see if start date is less than end date
            if ($startDate != '' && $endDate != '') {
                if (Date.parse($startDate) > Date.parse($endDate)) {
                    //   alert("End date must be greater than start Date.");
                    return;
                }
            }

            var AutoComplete = $("#groupListBox").data("kendoListView");
            AutoComplete.dataSource.read();
        }

        function checkboxChange_Sensor(e) {

            var check = e.checked;
            var listview = $(e).closest(".k-listview").data("kendoListView");

            //Get Selected rows's data 
            var dataItem = listview.dataSource.view()[listview.select().index()];

            var myValue = dataItem.Text;

            if (check == true) {
                SensorListBoxSelections.push(myValue);
            } else {
                //** delete if unchecked
                var index = SensorListBoxSelections.indexOf(myValue);
                if (index > -1) {
                    SensorListBoxSelections.splice(index, 1);
                }
            }



        };


        function checkboxChange(e) {

            var check = e.checked;
            var listview = $(e).closest(".k-listview").data("kendoListView");

            //Get Selected rows's data 
            var dataItem = listview.dataSource.view()[listview.select().index()];

            var myValue = dataItem.Text;
            if (check == true) {
                uniqueNames.push(myValue);
            }

            //** Remove duplicates from the array using jquery         
            StatListBoxSelections = [];
            $.each(uniqueNames, function (i, el) {
                if ($.inArray(el, StatListBoxSelections) === -1) StatListBoxSelections.push(el);
            });

            var checkAll = [];
            var items = document.getElementsByClassName('clickStatus');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    checkAll.push(items[i].name);

                }

            if (checkAll.length > 0) {
                var AutoComplete = $("#groupListBox").data("kendoListView");
                AutoComplete.dataSource.read();
            }
            if (checkAll.length == 0) {
                var grplistBoxUI = $("#groupListBox").data("kendoListView");
                grplistBoxUI.dataSource.data({});
            }

        };

        function onGroupListReqStart() {
            $('#groupListBox').addClass('k-loading-image');
        }

        function onGroupListReqEnd(e) {
            $('#groupListBox').removeClass('k-loading-image');
        }

        function onGroupListReqStart_status() {
            $('#StatusBox').addClass('k-loading-image');
        }

        function onGroupListReqEnd_status(e) {

            $('#StatusBox').removeClass('k-loading-image');

            var AutoComplete = $("#groupListBox").data("kendoListView");
            AutoComplete.dataSource.read();

        }

        function onStatusChange(e) {

        }

        function GetParametersForAssetIds() {

            var LocationTypeId = $("#ddlLocationType").val();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();
            var typedText = $('#autocompleteAssetId').val();


            return { myLocationTypeId: LocationTypeId, myParallerLocationId: ParallerLocationId, myTypedText: typedText }

        }

        function onDataBound_LocationType() {
            isLocationTypeLoaded = true;
        }

        function GetLocationTypeId() {


            var AutoComplete = $("#autocompleteLocationId").data("kendoAutoComplete");

            var LocationType = $("#ddlLocationType").data("kendoDropDownList").text();
            $("#autocompleteLocationId").val("");
            if (LocationType != "All") {

                $("#lblLocationType").html(LocationType + ":");



            }
            else {

                $("#lblLocationType").html("Location:");
                $("#autocompleteLocationId").val("Select a type");
                var AutoComplete = $("#groupListBox").data("kendoListView");
                AutoComplete.dataSource.read();
            }

            // AutoComplete.dataSource.read();

            //  AutoComplete.refresh();



        }

        function SetLocationType() {
            var cityID = myCity;//$('#cityName').val(); @*'@ViewBag.CurrentCityID';*@
            var LocationType = $("#ddlLocationType").val();
            var typedText = String($("#autocompleteLocationId").val()).trim();
            return { customerID: cityID, locationType: LocationType, myTypedText: typedText }
        }


        function SetLocationTypeForAssetIDs() {

            var cityID = myCity;// $('#cityName').val(); @*'@ViewBag.CurrentCityID';*@

            var myStartDate = $('#dp-1').val();
            var myEndDate = $('#dp-2').val();

            var LocationTypeId = $("#ddlLocationType").val();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();


            StatListBoxSelections = [];

            var items = document.getElementsByClassName('clickStatus');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    StatListBoxSelections.push(items[i].name);

                }

            if (StatListBoxSelections.length == 0) {
                StatListBoxSelections.push("Corrupted", "Occupied", "Small Object", "Suspicious", "Vacant");
            }
            return { myLocationTypeId: LocationTypeId, myParallerLocationId: ParallerLocationId, customerID: cityID, startDate: myStartDate, endDate: myEndDate, statusList: StatListBoxSelections.toString() }

        }

        function SetLocationTypeLB() {
            var cityID = myCity;// $('#cityName').val(); @*'@ViewBag.CurrentCityID';*@

            var myStartDate = $('#dp-1').val();
            var myEndDate = $('#dp-2').val();

            StatListBoxSelections = [];

            var items = document.getElementsByClassName('clickStatus');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    StatListBoxSelections.push(items[i].name);

                }



            if (StatListBoxSelections.length == 0) {
                StatListBoxSelections.push("Corrupted", "Occupied", "Small Object", "Suspicious", "Vacant");
            }
            return { customerID: cityID, startDate: myStartDate, endDate: myEndDate, statusList: StatListBoxSelections.toString() }

        }

        //** STEP-3b
        function UpdateExportLinks() { //** Export options - Step 3

            /// Update the href for the export buttons
            var grid = $('#grdCustomerDetails').data('kendoGrid');

            // ask the parameterMap to create the request object for you
            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
                .options.parameterMap({
                    page: grid.dataSource.page(),
                    sort: grid.dataSource.sort(),
                    filter: grid.dataSource.filter()
                });

            //EXCEL
            var $excelLink = $('#exportExcel');
            $excelLink.attr('href', GetExportHref($excelLink.attr('href'), requestObject, grid));

            //CSV
            var $csvLink = $('#exportCSV');
            $csvLink.attr('href', GetExportHref($csvLink.attr('href'), requestObject, grid));

            //PDF
            var $pdfLink = $('#exportPDF');
            $pdfLink.attr('href', GetExportHref($pdfLink.attr('href'), requestObject, grid));


            $("#exportButtons").css("display", "inline");

        }

        function GetExportHref(href, requestObject, grid) { //** Export options - Step 4

            // Update the 'page' parameter with the grid's current page
            href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');
            // Update the 'sort' parameter with the grid's current sort descriptor
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            // Update the 'pageSize' parameter with the grid's current pageSize
            //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);
            href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + 100000);  //** sai modified pagesize to export all pages on jan 1st 2015
            //update filter descriptor with the filters applied
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

            var $StartDate = $('#dp-1').val();//viewModel.get('startDate');
            href = href.replace(/startDate=([^&]*)/, 'startDate=' + ($StartDate));

            var $EndDate = $('#dp-2').val();//viewModel.get('endDate');
            href = href.replace(/endDate=([^&]*)/, 'endDate=' + ($EndDate));

            //var $AssetId = $("#autocompleteAssetId").val();
            //href = href.replace(/AssetId=([^&]*)/, 'AssetId=' + ($AssetId));

            var $LocationTypeId = $("#ddlLocationType").val();
            href = href.replace(/LocationTypeId=([^&]*)/, 'LocationTypeId=' + ($LocationTypeId));

            var $LocationTypeName = $("#ddlLocationType").data("kendoDropDownList").text();
            href = href.replace(/LocationTypeName=([^&]*)/, 'LocationTypeName=' + ($LocationTypeName));

            var $ParallerLocationId = String($("#autocompleteLocationId").val()).trim();
            href = href.replace(/LocationId=([^&]*)/, 'LocationId=' + ($ParallerLocationId));

            StatListBoxSelections = [];
            var items = document.getElementsByClassName('clickStatus');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    StatListBoxSelections.push(items[i].name);

                }


            SensorListBoxSelections = [];

            var quickSearch = String($("#autocompleteAssetId").val()).trim();
            var quickSearchArr = [];

            if (quickSearch.length != 0) {
                quickSearchArr = quickSearch.split(",");
            }
            for (var i = 0; i < quickSearchArr.length; i++) {
                SensorListBoxSelections.push(quickSearchArr[i]);
            }

            var items = document.getElementsByClassName('clickSensor');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    SensorListBoxSelections.push(items[i].name);

                }


            var $StatusProfileID = StatListBoxSelections.toString();
            href = href.replace(/statusList=([^&]*)/, 'statusList=' + ($StatusProfileID));

            var $SensorIDS = SensorListBoxSelections.toString();
            href = href.replace(/sensorIDS=([^&]*)/, 'sensorIDS=' + ($SensorIDS));

            var $CustomerID = myCity;// $('#cityName').val();
            href = href.replace(/customerID=([^&]*)/, 'customerID=' + ($CustomerID));



            return href;
        }

        $(document).ready(function () {

            myCity = '@ViewBag.CurrentCityID';
            //** Make the map invisible for the first time when the page is loaded.
            $('#DivCustomerDetails').css('display', 'none'); //** When the page loads for the first time, Don't show Grid.


            // bind the view model to the filter controls
            kendo.bind($(document.body), viewModel);

            // when the view state changes, cache it
            viewModel.bind("change", function (e) {
            });

        });



    </script>

    <script type="text/javascript">

        var layer2_Criteria;
        var layer3_Criteria;
        var temp = 0;

        function invokeCommsService() {
            // alert('invoke comms unqiue');
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCommsDataForUniqueIDS", "BatteryChange")',
                data: GetAllFilterData_SendUniqueIDS(),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',

                success: function (Data) {

                    if (Data.length == 0) {
                        // alert('No Data for comms.');
                    }

                    commsServerDataArr = [];
                    //**Push data into commsServerDataArr
                    // alert('Data.length from comms ' + Data.length);
                    for (var i = 0; i < Data.length; i++) {
                        commsServerDataArr.push(
                            {
                                meterID: Data[i].MID,
                                NoOfChanges: Data[i].BatChangesCnt,
                                firstToSecComms: Data[i].commsBtw_FirstChange_SecondChange,
                                secToThirdComms: Data[i].commsBtw_SecondChange_ThirdChange
                            });
                    }
                    //alert('commsServerDataArr length' + commsServerDataArr.length)
                    //step 4 - load data for chart

                    //  ajaxCallForTrellisChartData();

                },

                error: function (jqxhr) {
                    //    alert("Error: " + jqxhr.responseText);
                    showProgressBar(false); //** Hide Progress bar animation after the server response;

                }
            });

        }

        function ajaxCallForTrellisChartData(range_1, range_2) {
            var markerArr = [];
            var myChartData = [];
            var minVoltArr = [];
            var maxVoltArr = [];
            var commsCntArr = [];
            var voltageDateArr = [];
            var commsSummArr = [];
            var changeDatesArr = [];

            //alert('ajaxCallForTrellisChartData r1 r2: ' + trellisChartData.length + " " + range_1 + " " + range_2);
            for (var i = range_1; i < range_2; i++) {
                //for (var i = 0; i < trellisChartData.length; i++) {

                //**Clear for every chart 
                minVoltArr = [];
                maxVoltArr = [];

                for (var j = 0; j < 60; j++) {
                    minVoltArr.push(trellisChartData[i].Diag[j]);
                    maxVoltArr.push(trellisChartData[i].Threshold[j]);
                }

                //** Form the chart object
                var chartObj = {
                    meterID: trellisChartData[i].MID,
                    minVolt: minVoltArr,
                    maxVolt: maxVoltArr,
                    ProfileStatus: trellisChartData[i].ProfileStatus,
                    OccupancyStatus: trellisChartData[i].OccupancyStatus,
                    commsSumm: [trellisChartData[i].LastUpdatedTS, trellisChartData[i].ProfileStatus, trellisChartData[i].SWDesc, trellisChartData[i].ATDesc, trellisChartData[i].RUDesc, trellisChartData[i].TMPDesc, trellisChartData[i].TRPKDesc]
                }

                myChartData.push(chartObj);

            }

            mainContainer = document.querySelector("#container");

            rightAxis_1 = 40;
            rightAxis_2 = 40;

            $('#legendImage').css('visibility', 'visible');


            for (var i = 0; i < myChartData.length; i++) {
                createChart(myChartData[i], chartIndexIs++);
            }


            if (isCompleted == false) {

                if (trackBatchCount == findBatchTotal) {
                    //** Execute the left over charts
                    if (findLeftOverItems != 0) {
                        var leftOverStart = Number(batchEndIndex);
                        //var leftOverEnd = uniqueMIDFromService.length - 1;
                        var leftOverEnd = uniqueMIDFromService.length - 1;
                        //  alert('leftOverStart leftOverEnd' + leftOverStart + " " + leftOverEnd);
                        findLeftOverItems = 0; //** Make it zero
                        callBatch_ForLeftOver(leftOverStart, leftOverEnd, findBatchTotal)
                    } else {
                        isCompleted = true;
                        showProgressBar(false); //** Hide Progress bar animation after the server response;
                        // return;

                    }
                    showProgressBar(false); //** Hide Progress bar animation after the server response;

                } else {

                    //alert('isCompleted else' + isCompleted)
                    if (lessThanBatchUsed == true) {
                        showProgressBar(false); //** Hide Progress bar animation after the server response;
                        return;
                    } else {
                        batchStartIndex = batchStartIndex + BatchCount;
                        batchEndIndex = batchEndIndex + BatchCount;
                        callBatch_1(batchStartIndex, batchEndIndex, findBatchTotal)

                    }
                }

            }

            if (isCompleted == true) {

                showProgressBar(false); //** Hide Progress bar animation after the server response;
                // return;
            }



            //**********************************************************************************************************

        }

        function shortLabels(value) {
            return kendo.toString(value);
        }

        function showTooltip(series, category, value) {
            var dateString;
            if (series == "Threshold") {
                return " (T" + kendo.toString(category) + ") " + " = " + "<b>" + kendo.toString(value) + "</b>";

            } else {
                return " (D" + kendo.toString(category) + ") " + " = " + "<b>" + kendo.toString(value) + "</b>";
            }




            //if (series == "Comms Count") {
            //    //  return kendo.toString(series) + " on " + kendo.toString(dateFormat(category, "mm/dd")) + " = " + "<b>" + kendo.toString(value) + "</b>";
            //    return kendo.toString(series) + " = " + "<b>" + kendo.toString(value) + "</b>";
            //} else if (series == "Changed Date") {
            //    return kendo.toString(series) + " Comms  = " + "<b>" + kendo.toString(value) + "</b>";
            //} else {
            //    return kendo.toString(series) + " = " + "<b>" + kendo.toString(value).toFixed(2) + "v" + "</b>";
            //}

        }


        function createChart(myChartData, index) {

            var comms_2 = "<p style='color:black;width:52px;height:3px;float:left;'>" + "Datetime: " + "</p>" + myChartData.commsSumm[0];
            var comms_4 = "<p style='color:black;width:52px;height:3px;float:left;'>" + "Status:" + "</p>" + myChartData.commsSumm[1];
            var comms_5 = "<p style='color:black;width:52px;height:3px;float:left;'>" + "SW:" + "</p>" + myChartData.commsSumm[2];
            var comms_6 = "<p style='color:black;width:52px;height:3px;float:left;'>" + "AT:" + "</p>" + myChartData.commsSumm[3];
            var comms_7 = "<p style='color:black;width:52px;height:3px;float:left;'>" + "RU:" + "</p>" + myChartData.commsSumm[4];
            var comms_8 = "<p style='color:black;width:52px;height:3px;float:left;'>" + "TMP:" + "</p>" + myChartData.commsSumm[5];
            var comms_9 = "<p style='color:black;width:52px;height:3px;float:left;'>" + "TRPK:" + "</p>" + myChartData.commsSumm[6];

            //**Decide the color for the status
            var redColorLines = ["Corrupted", "Small Object", "Suspicious"];
            if (redColorLines.indexOf(myChartData.ProfileStatus) != -1 && myChartData.OccupancyStatus == "Occupied") {
                occColor = "green";
            } else if (redColorLines.indexOf(myChartData.ProfileStatus) != -1 && myChartData.OccupancyStatus == "Vacant") {
                occColor = "red";
            } else if (myChartData.ProfileStatus == "Vacant" || myChartData.OccupancyStatus == "Confused") {
                occColor = "red";
            }
            else if (myChartData.ProfileStatus == "Occupied") {
                occColor = "green";
            }


            //** Create div elements first
            chartSummaryContainer = document.createElement('div');
            chart = document.createElement('div');
            summaryContainer = document.createElement('div');
            summaryContainer.id = "sc";
            chartID = document.createElement('div');


            //** Apply styles dynamically for chartID box and its text
            chartID.style.position = "absolute";
            chartID.style.marginTop = "23px";
            chartID.style.marginBottom = "1px";
            chartID.style.textAlign = "center";
            chartID.style.color = "blue";
            chartID.style.fontSize = "12px";
            chartID.style.fontWeight = "bold";
            chartID.style.width = "100%";
            chartID.style.height = "28px";
            chartID.innerHTML = myChartData.meterID + "&nbsp;&nbsp;&nbsp;";

            //** Apply styles dynamically for summary box and its text
            summaryContainer.style.position = "absolute";
            summaryContainer.style.top = "19%";
            summaryContainer.style.left = "17%";
            summaryContainer.style.width = "164px";
            summaryContainer.style.display = 'inline';
            // summaryContainer.style.borderStyle = "solid";
            //summaryContainer.style.borderColor = "black";
            //summaryContainer.style.borderWidth = "thin";
            summaryContainer.style.height = "auto";
            summaryContainer.style.color = "black";
            summaryContainer.style.fontFamily = "Arial";
            summaryContainer.style.fontSize = "9px";
            summaryContainer.style.fontWeight = "bold";
            summaryContainer.style.enableBackground = false;
            summaryContainer.innerHTML = comms_2 + "<br/>" + comms_4 + "<br/>" + comms_5 + "<br/>" + comms_6 + "<br/>" + comms_7 + "<br/>" + comms_8 + "<br/>" + comms_9;



            //** Apply styles dynamically for chartSummaryContainer
            chartSummaryContainer.className = 'chartSummContainer';
            chartSummaryContainer.style.styleFloat = 'left'; //For IE
            chartSummaryContainer.style['float'] = 'left';
            chartSummaryContainer.style['width'] = '265px';
            chartSummaryContainer.style['height'] = '100%';
            chartSummaryContainer.style['position'] = 'relative';
            chartSummaryContainer.style['display'] = 'block';
            chartSummaryContainer.style.marginTop = '5px';
            chartSummaryContainer.style.marginBottom = '4px';

            //** Apply ID and Class dynamically for trellis chart
            chart.id = "trellisChart_" + index;
            chart.className = 'trellisChart';
            chart.style['width'] = '265px';
            chart.style['height'] = '188px';
            chart.style['margin-bottom'] = '10px';
            chart.style['margin-top'] = '35px';
            chart.style['display'] = 'block';



            //** Append the child nodes

            mainContainer.appendChild(chartSummaryContainer);
            chartSummaryContainer.appendChild(chartID);
            chartSummaryContainer.appendChild(chart);
            chartSummaryContainer.appendChild(summaryContainer);

            $("#sc").attr("readonly", "1");

            //** Draw chart
            $("#trellisChart_" + index).kendoChart({
                legend: {
                    position: "top",
                    visible: false
                },
                tooltip: {
                    visible: true,
                    template: "#= showTooltip(series.name, category, value) #"
                },
                series: [{
                    type: "line",
                    style: "smooth",
                    width: 2, //** line thickness
                    data: myChartData.minVolt,
                    markers: {
                        visible: false,
                        // background: "green",
                        // size: 30
                    },
                    name: "Occupied",
                    color: occColor,
                    axis: "minVolt",
                }, {
                    type: "line",
                    style: "smooth",
                    width: 2, //** line thickness
                    data: myChartData.maxVolt,
                    markers: {
                        visible: false,
                        // background: "green",
                        size: 30
                    },
                    name: "Threshold",
                    // aggregate: "max",
                    color: "grey",
                    axis: "maxVolt"

                },
                ],
                chartArea: {
                    background: "transparent"
                },
                valueAxes: [{
                    name: "minVolt",
                    labels: {
                        template: "#= shortLabels(value) #",
                        Font: "10px sans-serif",
                        color: "black",
                    },
                    title: { text: "" },
                    color: "black",
                    font: "10px sans-serif bold",
                    min: 0,
                    max: 160
                }, {
                    name: "maxVolt",
                    labels: {
                        template: "#= shortLabels(value) #",
                        Font: "10px sans-serif",
                        color: "white",
                    },
                    title: { text: "" },
                    color: "black",
                    font: "10px sans-serif bold",
                    min: 0,
                    max: 160

                }

                ],
                categoryAxis: [{
                    labels: {
                        step: 6,
                        // rotation: 270,
                        font: "10px Arial",
                        color: "black",
                    },

                    majorGridLines: {
                        visible: false
                    },
                    categories: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                    axisCrossingValues: [0, 80]
                }],
            });







        }

        function compareSecondColumn(a, b) {
            if (a[1].voltageDate === b[1].voltageDate) {
                return 0;
            }
            else {
                return (a[1].voltageDate < b[1].voltageDate) ? -1 : 1;
            }
        }



        function onDataBound(arg) {
            var result = $("#grdCustomerDetails").data().kendoGrid.dataSource.data()
            if (result.length == 0) {
                alert('No data.');
                showProgressBar(false);
                $('#DivCustomerDetails').css('height', 400);
                //** Clear old data from Chart
                if (chartSummaryContainer != undefined) {
                    $(".chartSummContainer").remove();
                    $(".trellisChart").remove();
                }
                return;
            }

            //if (result.length <= 2) {
            //    alert(2)
            //    $('.k-grid').css('height', '300px');

            //} else if (result.length > 2 && result.length <= 15) {
            //    alert(15)
            //    $('.k-grid').css('height', '550px');

            //}

            $("#grdCustomerDetails").find(".k-pager-wrap").insertBefore(".k-grid-header");
            $("#DivCustomerDetails").show();
            $('#DivCustomerDetails').css('display', 'inline');


            //** Export options - Step 3
            UpdateGridState();
            UpdateExportLinks();

            if (isGridBounded == false) {
                isGridBounded = true; //** So that each time page change happens in grid will not execute the charts unless from rfrsh button click
                //** Step 2 - Get unique IDs for the selected date range
                GetUniqueIDSFromService();
            }

        }


        function GetCustomerGridDetails_func(IsClicked, ClickType) {

            showProgressBar(true);
            if (IsClicked == "clicked") {

                //showProgressBar(false); //** Display Progress bar animation till the server returns response;

                var $startDate = viewModel.startDate;

                //Test to see if the start date is not empty, and if it is a valid date
                if (!Date.parse($startDate)) {
                    alert("Start date must be a valid date");
                    return;
                }
                var $endDate = viewModel.endDate;

                //Test to see if the end date is not empty and if it is a valid date
                if (!Date.parse($endDate)) {
                    alert("End date must be a valid date.");
                    return;
                }


                //Test to see if start date is less than end date
                if ($startDate != '' && $endDate != '') {
                    if (Date.parse($startDate) > Date.parse($endDate)) {
                        alert("End date must be greater than start Date.");
                        return;
                    }
                }

                SensorListBoxSelections = [];
                var items = document.getElementsByClassName('clickSensor');
                for (var i = 0; i < items.length; i++)
                    if (items[i].checked == true) {
                        SensorListBoxSelections.push(items[i].name);

                    }


                var quickSearch = String($("#autocompleteAssetId").val()).trim();



                if (SensorListBoxSelections.length == 0 && quickSearch.length == 0) {
                    alert("Please select an Asset ID");
                    showProgressBar(false);
                    return;
                }

                //** Validation for one day date range

                var dayIs = viewModel.startDate;
                var day = dayIs.getDate()
                var month = viewModel.startDate.getMonth() + 1
                var year = viewModel.startDate.getFullYear()
                var tempStartDate = day + '/' + month + '/' + year;

                var day = viewModel.endDate.getDate()
                var month = viewModel.endDate.getMonth() + 1
                var year = viewModel.endDate.getFullYear()
                var tempEndDate = day + '/' + month + '/' + year;


                var CustomerId = $('#cityName').val();@*'@ViewBag.CurrentCityID'*@



                //** Clear old data from Chart


                isCompleted = false;
                isGridBounded = false;
                lessThanBatchUsed = false;
                trackBatchCount = 0;
                findBatchTotal = 0;

                if (chartSummaryContainer != undefined) {
                    $(".chartSummContainer").remove();
                    $(".trellisChart").remove();
                }



                //** Step 1 - Run the grid service to load data faster
                invokeDataSource(50);




            }

        }

        function dateDiff(date1, date2) {
            //Get 1 day in milliseconds
            var one_day = 1000 * 60 * 60 * 24;

            // Convert both dates to milliseconds
            var date1_ms = new Date(date1).getTime();
            var date2_ms = new Date(date2).getTime();

            // Calculate the difference in milliseconds
            var difference_ms = date2_ms - date1_ms;

            // Convert back to days and return
            return Math.round(difference_ms / one_day);
        }

        function GetUniqueIDSFromService() {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetProfileDataForChart", "BatteryChange")',
                data: GetAllFilterData_Profiles(),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',

                success: function (Data) {
                    if (Data.length == 0) {
                        alert('No data.');
                        showProgressBar(false);
                        //** Clear old data from Chart
                        if (chartSummaryContainer != undefined) {
                            $(".chartSummContainer").remove();
                            $(".trellisChart").remove();
                        }
                        return;
                    }

                    //** Clear all the unique ids when refrsh btn is clicked
                    uniqueMIDFromService = [];
                    trellisChartData = [];

                    //**Store all unique MIDs into uniqueMIDFromService
                    for (var i = 0; i < Data.length; i++) {
                        uniqueMIDFromService.push(
                            {
                                meterID: Data[i].MID,
                            });

                        //** Store chart data 
                        trellisChartData.push(Data[i]);
                    }

                    //**Send BATCH WISE MeterIDS (3) to service every time

                    chartIndexIs = 0; //** to display unique kendo charts
                    batchStartIndex = 0;
                    batchEndIndex = BatchCount;
                    findBatchTotal = 0;
                    findLeftOverItems = 0;

                    //** Display batch of 6 charts 
                    if (uniqueMIDFromService.length >= BatchCount) {

                        //** Display batchwise graphs only if no. of meters >= batchcount
                        findBatchTotal = parseInt(String(uniqueMIDFromService.length / BatchCount));
                        findLeftOverItems = uniqueMIDFromService.length % BatchCount;
                        callBatch_1(batchStartIndex, batchEndIndex, findBatchTotal);
                    } else {
                        //** It indicates that the no. of meters <= batchcount
                        //   alert('less than the batch count')
                        lessThanBatchUsed = true;
                        callBatch_1(0, uniqueMIDFromService.length, uniqueMIDFromService.length);
                    }



                },

                error: function (jqxhr) {
                    //    alert("Error: " + jqxhr.responseText);
                    showProgressBar(false); //** Hide Progress bar animation after the server response;

                }
            });

        }

        function callBatch_1(range_1, range_2, findBatchTotal) {
            batchMIDFromService = [];
            trackBatchCount++;
            //alert('range_1 range_2: ' + range_1 + "  " + range_2);
            for (var i = range_1; i < range_2; i++) {
                batchMIDFromService.push(
                    {
                        meterID: uniqueMIDFromService[i].meterID,
                    });
            }


            //** Step 3 - Run the comms service to load data faster for BATCH ids of 3
            // invokeCommsService();
            ajaxCallForTrellisChartData(range_1, range_2);

        }

        function callBatch_ForLeftOver(range_1, range_2, findBatchTotal) {
            // alert('range_1 range_2  ' + range_1 + "  " + range_2 + "   " + findBatchTotal);
            batchMIDFromService = [];
            trackBatchCount++;

            for (var i = range_1; i <= range_2; i++) {
                batchMIDFromService.push(
                    {
                        meterID: uniqueMIDFromService[i].meterID,
                    });
            }
            //alert("batch len and ID " + batchMIDFromService.length + " " + batchMIDFromService[0].meterID + "  " + batchMIDFromService[1].meterID);

            //** Step 3 - Run the comms service to load data faster for BATCH ids of 3
            isCompleted = true;
            //alert('left over');

            //** Take only the remaining items to be plotted on the chart
            range_2 = range_2 + 1;
            ajaxCallForTrellisChartData(range_1, range_2);

        }

        function invokeDataSource(maxCount) {

            temp = 0;
            //** The below line needs to be uncommented after fetching service
            //showProgressBar(true); //** Display Progress bar animation till the server returns response;


            var $filter = new Array();

            // Date Range
            var startDate = viewModel.startDate;
            var endDate = viewModel.endDate;
            var LocationTypeId = $("#ddlLocationType").val();
            var LocationTypeName = $("#ddlLocationType").data("kendoDropDownList").text();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();

            if (startDate) {
                gridFilters.DateRangeFrom = startDate;
                $filter.push({ field: "StartDate", operator: "gte", value: startDate });
            }
            if (endDate) {
                gridFilters.DateRangeTo = endDate;
                $filter.push({ field: "EndDate", operator: "lte", value: endDate });
            }

            StatListBoxSelections = [];
            var items = document.getElementsByClassName('clickStatus');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    StatListBoxSelections.push(items[i].name);

                }


            SensorListBoxSelections = [];
            var items = document.getElementsByClassName('clickSensor');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    SensorListBoxSelections.push(items[i].name);

                }

            $filter.push({ field: "LocationTypeId", operator: "equals", value: LocationTypeId });
            $filter.push({ field: "LocationTypeName", operator: "equals", value: LocationTypeName });
            $filter.push({ field: "LocationId", operator: "equals", value: ParallerLocationId });


            $filter.push({ field: "sensorIDS", operator: "equals", value: SensorListBoxSelections.toString() });
            $filter.push({ field: "statusList", operator: "equals", value: StatListBoxSelections.toString() });

            $filter.push({ field: "customerID", operator: "equals", value: $('#cityName').val() });

            $("#grdCustomerDetails").data("kendoGrid").dataSource.filter($filter);
            $("#grdCustomerDetails").data("kendoGrid").dataSource.view({ page: gridFilters.CurrentPage, filter: $filter, pageSize: gridFilters.PageSize, sort: sorts });


        }

        function parseDate(str) {
            var dateAlone = str.split(" ");
            var mdy = dateAlone[0].toString().split('/');
            return new Date(mdy[2], mdy[0] - 1, mdy[1]);
        }

        function daydiff(first, second) {
            return Math.round((second - first) / (1000 * 60 * 60 * 24));
        }


        function GetAllFilterData_Profiles() {
            CustomerId = '@ViewBag.CurrentCityID';// $('#cityName').val(); @*'@ViewBag.CurrentCityID';*@

            var myStartDate = $('#dp-1').val();
            var myEndDate = $('#dp-2').val();



            StatListBoxSelections = [];
            var items = document.getElementsByClassName('clickStatus');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    StatListBoxSelections.push(items[i].name);

                }


            SensorListBoxSelections = [];

            //*****************************

            var quickSearch = String($("#autocompleteAssetId").val()).trim();

            var quickSearchArr = [];
            if (quickSearch.length != 0) {
                quickSearchArr = quickSearch.split(",");
                for (var i = 0; i < quickSearchArr.length; i++) {
                    SensorListBoxSelections.push(quickSearchArr[i]);
                }
            }

            //*****************************

            var items = document.getElementsByClassName('clickSensor');
            for (var i = 0; i < items.length; i++)
                if (items[i].checked == true) {
                    SensorListBoxSelections.push(items[i].name);

                }



            return { customerId: CustomerId, startDate: myStartDate, endDate: myEndDate, sensorIDS: SensorListBoxSelections.toString(), statusList: StatListBoxSelections.toString() }
        }


        function GetAllFilterData_SendUniqueIDS() {
            var CustomerId = myCity;//$('#cityName').val(); @*'@ViewBag.CurrentCityID';*@

            //**start and end dates

            var $startDate = viewModel.startDate;
            var $endDate = viewModel.endDate;
            var finalStart = $('#dp-1').val();
            var finalEnd = $('#dp-2').val();

            //** Send only unique IDS to the service for comms processing
            var values = [];
            for (var i = 0; i < batchMIDFromService.length; i++) {
                values.push(batchMIDFromService[i].meterID);
            }
            var AssetId = values.toString();

            var LocationTypeId = $("#ddlLocationType").val();
            var LocationTypeName = $("#ddlLocationType").data("kendoDropDownList").text();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();


            return { customerId: CustomerId, startDate: finalStart, endDate: finalEnd, AssetId: AssetId, LocationTypeId: LocationTypeId, LocationTypeName: LocationTypeName, LocationId: ParallerLocationId }
        }


        function GetAllFilterData() {
            var CustomerId = myCity;// $('#cityName').val(); @*'@ViewBag.CurrentCityID';*@

            //**start and end dates

            var $startDate = viewModel.startDate;
            var $endDate = viewModel.endDate;
            var finalStart = $('#dp-1').val();
            var finalEnd = $('#dp-2').val();

            var AssetId = $("#autocompleteAssetId").val();
            var LocationTypeId = $("#ddlLocationType").val();
            var LocationTypeName = $("#ddlLocationType").data("kendoDropDownList").text();
            var ParallerLocationId = String($("#autocompleteLocationId").val()).trim();


            return { customerId: CustomerId, startDate: finalStart, endDate: finalEnd, AssetId: AssetId, LocationTypeId: LocationTypeId, LocationTypeName: LocationTypeName, LocationId: ParallerLocationId }
        }


        function fetchCustomerID() {
            var CustomerId = myCity;// $('#cityName').val(); @*'@ViewBag.CurrentCityID';*@
            return { customerid: CustomerId }
        }



    </script>

    @*Scripts by Sairam Start*@
    <script>

        function showProgressBar(visisbility) {

            if (visisbility == false) {
                if (spinner != null || spinner != undefined) {
                    spinner.stop() //** hide the PB
                }
            } else {
                //** Create spinner and display PB
                var opts = {
                    lines: 13, // The number of lines to draw
                    length: 0, // The length of each line
                    width: 5, // The line thickness
                    radius: 15, // The radius of the inner circle
                    corners: 1, // Corner roundness (0..1)
                    rotate: 48, // The rotation offset
                    direction: 1, // 1: clockwise, -1: counterclockwise
                    color: '#000', // #rgb or #rrggbb
                    speed: 1, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: false, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 2e9, // The z-index (defaults to 2000000000)
                    top: '380px', // Top position relative to parent in px
                    left: 'auto' // Left position relative to parent in px
                };
                spinner = new Spinner(opts).spin(document.body);
            }

        }

        var dateFormat = function () {
            var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
                timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
                timezoneClip = /[^-+\dA-Z]/g,
                pad = function (val, len) {
                    val = String(val);
                    len = len || 2;
                    while (val.length < len) val = "0" + val;
                    return val;
                };

            // Regexes and supporting functions are cached through closure
            return function (date, mask, utc) {
                var dF = dateFormat;

                // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
                if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
                    mask = date;
                    date = undefined;
                }

                // Passing date through Date applies Date.parse, if necessary
                date = date ? new Date(date) : new Date;
                if (isNaN(date)) throw SyntaxError("invalid date");

                mask = String(dF.masks[mask] || mask || dF.masks["default"]);

                // Allow setting the utc argument via the mask
                if (mask.slice(0, 4) == "UTC:") {
                    mask = mask.slice(4);
                    utc = true;
                }

                var _ = utc ? "getUTC" : "get",
                    d = date[_ + "Date"](),
                    D = date[_ + "Day"](),
                    m = date[_ + "Month"](),
                    y = date[_ + "FullYear"](),
                    H = date[_ + "Hours"](),
                    M = date[_ + "Minutes"](),
                    s = date[_ + "Seconds"](),
                    L = date[_ + "Milliseconds"](),
                    o = utc ? 0 : date.getTimezoneOffset(),
                    flags = {
                        d: d,
                        dd: pad(d),
                        ddd: dF.i18n.dayNames[D],
                        dddd: dF.i18n.dayNames[D + 7],
                        m: m + 1,
                        mm: pad(m + 1),
                        mmm: dF.i18n.monthNames[m],
                        mmmm: dF.i18n.monthNames[m + 12],
                        yy: String(y).slice(2),
                        yyyy: y,
                        h: H % 12 || 12,
                        hh: pad(H % 12 || 12),
                        H: H,
                        HH: pad(H),
                        M: M,
                        MM: pad(M),
                        s: s,
                        ss: pad(s),
                        l: pad(L, 3),
                        L: pad(L > 99 ? Math.round(L / 10) : L),
                        t: H < 12 ? "a" : "p",
                        tt: H < 12 ? "am" : "pm",
                        T: H < 12 ? "A" : "P",
                        TT: H < 12 ? "AM" : "PM",
                        Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                        o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                        S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
                    };

                return mask.replace(token, function ($0) {
                    return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
                });
            };
        }();

        // Some common format strings
        dateFormat.masks = {
            "default": "ddd mmm dd yyyy HH:MM:ss",
            shortDate: "m/d/yy",
            mediumDate: "mmm d, yyyy",
            longDate: "mmmm d, yyyy",
            fullDate: "dddd, mmmm d, yyyy",
            shortTime: "h:MM TT",
            mediumTime: "h:MM:ss TT",
            longTime: "h:MM:ss TT Z",
            isoDate: "yyyy-mm-dd",
            isoTime: "HH:MM:ss",
            isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
            isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
        };

        // Internationalization strings
        dateFormat.i18n = {
            dayNames: [
                "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
                "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
            ],
            monthNames: [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
                "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
            ]
        };

        // For convenience...
        Date.prototype.format = function (mask, utc) {
            return dateFormat(this, mask, utc);
        };

    </script>


}

