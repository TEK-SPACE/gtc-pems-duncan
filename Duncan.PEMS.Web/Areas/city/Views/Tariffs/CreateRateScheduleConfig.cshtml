@model Duncan.PEMS.Entities.Tariffs.RateScheduleConfigurationModel
@using Duncan.PEMS.Entities.Tariffs
@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@{
    ViewBag.Title = "Create Rate Schedule Configuration";
}

@section Styles
{
    <style type="text/css">

        .tdow-week {
            float: left;
            width: 300px;
            padding-bottom: 10px;
        }


        .tdow-weekend {
            width: 300px;
        }

        .tdow-weekday {
            width: 300px;
            clear: both;
        }

        .tdow-day {
            float: left;
        }

        .tdow-name {
            float: left;
            padding-left: 2px;
            width: 35px;
        }

        .tdow-chkbox {
            float: left;
            margin: 5px;
        }

        .k-widget.k-window {
            width: 500px;
        }

        .k-edit-form-container {
            width: 490px !important;
        }

        .k-grid .k-grid-edit {
            background: #33BAB1 !important;
            color: #fff !important;
            border: 1px solid #00A99D !important;
            padding: .25em .5em !important;
            font-size: 0.7em;
            box-shadow: 0px 0px 3px 2px #f2f2f2;
            display: inline-block;
            border-radius: 3px;
            cursor: pointer;
            z-index: 1;
            text-transform: uppercase;
            font-weight: bold;
            font-family: "futura-pt-n4", "futura-pt", Arial, sans-serif;
            box-shadow: 0px 0px 3px 2px #d5d5d5;
        }

        .k-grid .k-grid-delete {
            background: #33BAB1 !important;
            color: #fff !important;
            border: 1px solid #00A99D !important;
            padding: .25em .5em !important;
            font-size: 0.7em;
            box-shadow: 0px 0px 3px 2px #f2f2f2;
            display: inline-block;
            border-radius: 3px;
            cursor: pointer;
            z-index: 1;
            text-transform: uppercase;
            font-weight: bold;
            font-family: "futura-pt-n4", "futura-pt", Arial, sans-serif;
            box-shadow: 0px 0px 3px 2px #d5d5d5;
        }


        .button-grid-command > span {
            visibility: hidden;
            width: 0;
        }

        .k-grid .k-grid-edit > span {
            visibility: hidden;
            width: 0;
        }

        .k-grid .k-grid-delete > span {
            visibility: hidden;
            width: 0;
        }


        span.k-numerictextbox {
            width: 80px;
        }

        select {
            width: 140px;
        }

        .toolbar-config-detail {
	        padding: .25em 1.0em;
            float: left;
        }



    </style>
}

@using (Html.BeginForm("CreateRateScheduleConfig", "Tariffs", FormMethod.Post, new { @class = "customer-form", @id = "createRateScheduleConfig" }))
{
   
    @Html.HiddenFor(m => m.CustomerId)
    @Html.HiddenFor(m => m.RateScheduleConfigurationId)

       
    <div class="customer_tab_content_section">@HttpContext.Current.GetLocaleResource(ResourceTypes.Label, "Rate Schedule Configuration")</div>

    <div class="clear">
        <div class="two-column payment">
            <div class="clear">
                <div class="customer_text_label">@HttpContext.Current.GetLocaleResource(ResourceTypes.Label, "Configuration Name")@Html.Raw(": ")</div>
                @Html.TextBoxFor(m => m.Name, new { @class = "customer_text" })
                <span class="required_asterisk">*</span>
                @Html.ValidationMessageFor(m => m.Name)
            </div>
        </div>
        <div class="two-column payment">
            <div class="clear">
                <div class="customer_text_label">@HttpContext.Current.GetLocaleResource(ResourceTypes.Label, "Description")@Html.Raw(": ")</div>
                @Html.TextBoxFor(m => m.Description, new { @class = "customer_text" })
            </div>
        </div>
    </div>
    
        
    <div class="clear">
    

        @(Html.Kendo().Grid<RateScheduleModel>()
              .Name("gridRSC")
              .Columns(columns =>
                  {
                      columns.Bound(p => p.DayOfWeekName);
                      columns.Bound(p => p.StartTime);
                      columns.Bound(p => p.OperationModeName).Title("Operation Mode");
                      columns.Bound(p => p.TariffRateName)
                             .ClientTemplate("#= IndicateIfBlank(TariffRateName) #").Title("Tariff Rate");
                      columns.Command(command =>
                          {
                              command.Edit();
                              command.Destroy();
                          }).Width(172);
                  })
              .Scrollable()
              .HtmlAttributes(new { style = "height:430px;" })
              .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("RateScheduleTemplate"))
              .ToolBar(toolbar =>
                  {
                      toolbar.Create().Text("Add Schedule").HtmlAttributes(new { @class = "tariff-toolbar-button" });
                      toolbar.Custom().Text("Import Configuration").Action("SelectRateScheduleConfig", "Tariffs").HtmlAttributes(new { @class = "tariff-toolbar-button" });
                  })
              .Events(e => e.Edit("OnEdit").Save("OnSave").DataBound("OnDataBound"))
              .AutoBind(true)
              .Resizable(resize => resize.Columns(true))
              .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .PageSize(20)
                                            .Events(events => events.Error("RateScheduleErrorHandler"))
                                            .Model(model => model.Id(p => p.RateScheduleId))
                                            .Create(update => update.Action("RateScheduleCreate", "Tariffs"))
                                            .Read(read => read.Action("RateScheduleRead", "Tariffs").Type(HttpVerbs.Get))
                                            .Update(update => update.Action("RateScheduleUpdate", "Tariffs"))
                                            .Destroy(update => update.Action("RateScheduleDestroy", "Tariffs"))
              )
              )
    
    </div>
    
    <div class="customer_actions">
        <button type="submit" name="submitButton" class="button important" value="CONFIGURE" id="btnConfigure">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Configure")</button>
        <button type="submit" name="submitButton" class="button" value="SAVE" id="btnSave">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Save")</button>
        <button type="submit" name="submitButton" class="button previous" value="RETURN" id="btnReturn">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Return")</button>
        <button type="submit" name="submitButton" class="button previous" value="CANCEL" id="btnCancel">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Cancel")</button>
    </div>
    
}




<script type="text/javascript">

    var dayOfWeek = [0, 0, 0, 0, 0, 0, 0];


    var editState = 0;
    var stateReset = 0;
    var stateRefresh = 3;

    function NextState(editEvent) {
        if (editEvent == "OnEdit") {
            if (editState == 0) {
                editState = 1;
            } else if (editState == 1) {
                editState = 1;
            } else {
                editState = stateReset;
            }
            return;
        }
        if (editEvent == "OnSave") {
            if (editState == 1) {
                editState = 2;
            } else if (editState == 2) {
                editState = 2;
            } else {
                editState = stateReset;
            }
            return;
        }
        if (editEvent == "OnError") {
            editState = stateReset;
            return;
        }
        if (editEvent == "OnDataBound") {
            if (editState == 2) {
                editState = stateRefresh;
            } else {
                editState = stateReset;
            }
            return;
        }
    }


    $(document).ready(function () {
        $(".k-grid-toolbar", "#gridRSC").prepend("<div class='toolbar-config-detail' id='gridRSC-ConfigDetail'></div>");
    });



    function OnDataBound(e) {
        NextState("OnDataBound");

        if (editState == stateRefresh) {
            $("#gridRSC").data("kendoGrid").dataSource.read();
        }
        editState = stateReset;        

        for (i = 0; i < 7; i++) {
            dayOfWeek[i] = 0;
        }

        $.each($("#gridRSC").data("kendoGrid").dataSource.data(), function (i, item) {
            dayOfWeek[item.DayOfWeek] = 1;
        });

        var extraData = $("#gridRSC-ConfigDetail");

        var body = "<div class=\"dayContainer\">" +
            "<div class=\"activeDay" + dayOfWeek[0] + "\">Sun</div>" +
            "<div class=\"activeDay" + dayOfWeek[1] + "\">Mon</div>" +
            "<div class=\"activeDay" + dayOfWeek[2] + "\">Tues</div>" +
            "<div class=\"activeDay" + dayOfWeek[3] + "\">Wed</div>" +
            "<div class=\"activeDay" + dayOfWeek[4] + "\">Thur</div>" +
            "<div class=\"activeDay" + dayOfWeek[5] + "\">Fri</div>" +
            "<div class=\"activeDay" + dayOfWeek[6] + "\">Sat</div>" +
            "</div>";

        extraData.html(body);

        SetButtonStates();
    }

    function OnEdit(e) {
        NextState("OnEdit");

        if (e.model.isNew()) {

            // Set the popup window title.
            e.container.data("kendoWindow").title('Add Schedule');
            // Set the save button title.
            $(".k-window .k-grid-update").html("<span class=\"k-icon k-update\"></span>Save");

            e.model.CustomerId = $("#CustomerId").val();

            e.model.DayOfWeek = -1;
            e.model.OperationMode = -1;
        }
        else {
            // Set the popup window title.
            e.container.data("kendoWindow").title('Edit Schedule');
            
            // Set the day-of-week name.
            $("#div-dayofweek").html(e.model.DayOfWeekName);

        }
    }

    function OnSave(e) {
        NextState("OnSave");

        // Set the model's DayOfWeek
        if (e.model.DayOfWeek != $("#DayOfWeek").val()) {
            e.model.DayOfWeek = $("#DayOfWeek").val();
            e.model.DayOfWeekName = $("#DaysOfWeekList option:selected").text();
            $("#DayOfWeekName").val(e.model.DayOfWeekName);

            e.model.dirty = true;
        }

        // Set the model's Operation Mode
        if (e.model.OperationMode != $("#OperationMode").val()) {
            e.model.OperationMode = $("#OperationMode").val();
            e.model.OperationModeName = $("#OperationModesList option:selected").text();
            $("#OperationModeName").val(e.model.OperationModeName);

            e.model.dirty = true;
        }

        // Set the model's TariffRateId
        if (e.model.TariffRateId != $("#TariffRateId").val()) {
            e.model.TariffRateId = $("#TariffRateId").val();
            e.model.TariffRateName = $("#TariffRateName").val();

            e.model.dirty = true;
        }
    }


    function RateScheduleErrorHandler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += "<br/>" + this;
                    });
                }
            });


            var grid = $("#gridRSC").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();
            });

            pemsPopupShowErrorWithTag(
                '@ViewData[Duncan.PEMS.Utilities.Constants.ViewData.CurrentArea]',
                '@ViewData[Duncan.PEMS.Utilities.Constants.ViewData.CurrentController]',
                '@ViewData[Duncan.PEMS.Utilities.Constants.ViewData.CurrentAction]',
                "1234", message);
        }
    }

    function IndicateIfBlank(displayData) {

        if (displayData && displayData != 0) {
            return displayData;
        } else {
            return "<div style=\"background-color: Red;\">Required</div>";
        }
    }

    function SetButtonStates() {

        var hasDirtyItems = false;
        var hasUnsavedItems = false;
        var hasData = false;

        var allData = $("#gridRSC").data('kendoGrid').dataSource.data();

        if (allData.length > 0) {
            hasData = true;
            $.each(allData, function (idx, currentItem) {
                if (!currentItem.IsSaved) {
                    hasUnsavedItems = true;
                }
                if (currentItem.IsChanged) {
                    hasDirtyItems = true;
                }
            });
        }

        if (hasData) {
            console.log("has data");
        } else {
            console.log("no data");
        }

        if (hasUnsavedItems) {
            console.log("has unsaved items");
        } else {
            console.log("no unsaved items");
        }

        if (hasDirtyItems) {
            console.log("has dirty items");
        } else {
            console.log("no dirty items");
        }



        SetButtonState("btnSave", hasData && (hasUnsavedItems || hasDirtyItems));
        SetButtonState("btnConfigure", hasData);
        SetButtonState("btnReturn", !hasData || !hasUnsavedItems);
        SetButtonState("btnCancel", hasData && hasUnsavedItems);
    }

    function SetButtonState(id, isEnabled) {

        var theButton = $("#" + id);

        if (isEnabled) {
            theButton.removeAttr('disabled');
            theButton.removeClass("disabledButton");
        } else {
            theButton.attr('disabled', 'disabled');
            theButton.addClass("disabledButton");
        }

    }


</script>
