
@* /******************* CHANGE LOG ****************************************************************************************************************
 * DATE                 NAME                        DESCRIPTION
 * ___________          ___________________        _________________________________________________________________________________________________________
 * 
 * 12/12/2013           Sergey Ostrerov            Updated: syntax error in Javascript.
 * 12/20/2013           Sergey Ostrerov            Enhancement - AssetID Change: Allow manually entering AssetID
 * 01/04/2014           Sergey Ostrerov            JIRA Issue # 144 - Syntax error in Grid 'Tariff Config'
 * *****************************************************************************************************************************************************/ *@


@{
    ViewBag.Title = HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Tariff Management" );
}

@section ExportButtons 
{
    <div class="export-buttons" id="exportButtons">
        <a id="exportExcel" class="exportButton" href="@Url.Action( "ExportToExcel", new {page = 1, pageSize = "~", filter = "~", sort = "~", customerId = "~",  startDateTicks = "~", endDateTicks = "~"} )">
            <img src='/images/export-excel.png' />
        </a>
        <a id="exportCSV" class="exportButton" href="@Url.Action( "ExportToCsv", new {page = 1, pageSize = "~", filter = "~", sort = "~", customerId = "~",  startDateTicks = "~", endDateTicks = "~"} )">
            <img src='/images/export-csv.png' />
        </a>
        <a id="exportPDF" class="exportButton" href="@Url.Action( "ExportToPdf", new {page = 1, pageSize = "~", filter = "~", sort = "~", customerId = "~",  startDateTicks = "~", endDateTicks = "~"} )">
            <img src='/images/export-pdf.png' />
        </a>
    </div>
}
<div class="grid-header">
    <div style="float: left">
        @Html.ActionLink("Add Tariff", "CreateInit", "Tariffs", new { customerId = ViewData[Constants.ViewData.CurrentCityId] }, new { @class = "button", @type = "button" })
    </div>
</div>
<div style="clear: both"></div>
@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@model IEnumerable<Duncan.PEMS.Entities.Tariffs.ConfigProfileModel>

@(Html.Kendo().Grid( Model )
      .HtmlAttributes( new {style = "max-width: 1693px; height: 470px;"} )
      .Name( "CurrentGrid" )
      .Columns( columns =>
                    {
                        columns.Bound(p => p.ConfigurationName).ClientTemplate(@Html.ActionLink("#= ConfigurationName #", "Details", "Tariffs", new { customerId = "#= CustomerId #", configProfileId = "#= ConfigProfileIdDisplay #" }, new { @onclick = "RowClick(this);" }).ToHtmlString()).Title( @HttpContext.Current.GetLocaleResource( ResourceTypes.GridColumn, "Tariff Config" ).ToString() ).Width( 150 );
                        columns.Bound(p => p.CreatedOn).ClientTemplate("#= CreatedOnDisplay #").Width(80).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Creation Date").ToString());
                        columns.Bound(p => p.TariffRatesCount).Width(150).ClientTemplate(@Html.ActionLink("#= TariffRatesCount #" + " Rates", "DetailsTariffRateConfig", "Tariffs", new { customerId = "#= CustomerId #", configProfileId = "#= ConfigProfileIdDisplay #" }, new { @onclick = "RowClick(this);" }).ToHtmlString() ).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Rates").ToString());
                        columns.Bound(p => p.RateSchedulesCount).Width(150).ClientTemplate(@Html.ActionLink("#= RateSchedulesCount #" + " Schedules", "DetailsRateScheduleConfig", "Tariffs", new { customerId = "#= CustomerId #", configProfileId = "#= ConfigProfileIdDisplay #" }, new { @onclick = "RowClick(this);" }).ToHtmlString()).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Schedules").ToString());
                        columns.Bound(p => p.HolidayRatesCount).Width(150).ClientTemplate(@Html.ActionLink("#= HolidayRatesCount #" + " Holidays", "DetailsHolidayRateConfig", "Tariffs", new { customerId = "#= CustomerId #", configProfileId = "#= ConfigProfileIdDisplay #" }, new { @onclick = "RowClick(this);" }).ToHtmlString()).Title( @HttpContext.Current.GetLocaleResource( ResourceTypes.GridColumn, "Holidays" ).ToString() );
                    } )
      .Selectable( select => select.Mode( GridSelectionMode.Single ).Type( GridSelectionType.Row ) )
      .Reorderable( reorder => reorder.Columns( false ) )
      .Pageable( pager => pager.PageSizes( true ).PageSizes( new int[] {100, 250, 500, 1000} ) )
      .AutoBind( false )
      .Sortable( sortable => sortable.SortMode( GridSortMode.MultipleColumn ) )
      .Resizable( resize => resize.Columns( true ) )
      .Scrollable()
      .Events( events => events.DataBound( "OnDataBound" ) )
      .DataSource( dataSource => dataSource.Ajax().Read( read => read.Action( "GetItems", "Tariffs" ).Data( "additionalData" ).Type( HttpVerbs.Get ) )
      ))

@section Styles
{
    <style type="text/css">
        #CurrentGrid { display: none; }

        #exportButtons { display: none; }

        #exportActions { display: none; }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-pager-wrap .k-dropdown { width: 75px !important; }
    </style>

}

@section PageHeader 
{
    <h1><a href="/">@HttpContext.Current.GetLocaleResource( ResourceTypes.Glossary, "Home" )</a> / @HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Tariff Management" ) / <span>@HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Tariff Inquiry" )</span></h1>
}

@section PageFilter 
{      
    <div class="two-column-wrapper">
    <div class="two-column">
           <div class="filter-option">
              <div class="two-inputs">
               <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Date Created" ):</span>
               <input id="dpCreatedStart" data-role="datepicker" style="width: 130px" data-bind="value: startCreatedDate" />
           </div>
           <div class="two-inputs">
               <span class="to">to</span>
               <input id="dpCreatedEnd" data-role="datepicker" style="width: 130px" data-bind="value: endCreatedDate" />
           </div>
        </div>
        </div>
    <div class="two-column">
         <div class="filter-option"><span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Tariff Config" ):</span>
                <input id="txtConfigId" class="filter-input k-textbox" /></div>     
    </div>
        </div>
    <div class="filter-searchBox">
        <input type="button" value="@HttpContext.Current.GetLocaleResource( ResourceTypes.Button, "Refresh" )" id="btnSearch" class="button important filter-SearchButton"  onclick=" LoadFreshGrid(); return false; " /></div>
        
    <script type="text/javascript">
        
        var viewModel = kendo.observable({
            startCreatedDate: null,
            endCreatedDate: null,
            configId: null,
        });


        //ON LOAD
        $(document).ready(function() {
            
            // bind the view model to the filter controls
            kendo.bind($(document.body), viewModel);
            LoadSorts();
        });


        //SORTS 
        var sorts = {};
        function LoadSorts() {
            $.post('/Tariffs/GetSavedSortValues?indexType=Tariffs', OnSortsLoaded);
        }

        function OnSortsLoaded(data) {
             if (!isEmptyObject(data))   {
                sorts = data;
            } else {
                sorts = {};
             }
            LoadFilters();
        }

        //FILTERS
        var gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": 100  };

        function LoadFilters() {
            $.post('/shared/Sessions/GetTariffFilters', OnFiltersLoaded);
        }

        function OnFiltersLoaded(data) {
            if (!isEmptyObject(data) && getParameterByName('rtn') == 'true') {
                gridFilters = data;

                $("#txtConfigId").val(gridFilters.TariffConfigId);
                 // don't want to create a new Date if null because will default to 1970
                if (gridFilters.CreatedStart) {
                    viewModel.set('startCreatedDate', new Date(gridFilters.CreatedStart));
                }
                if (gridFilters.CreatedEnd) {
                    viewModel.set('endCreatedDate', new Date(gridFilters.CreatedEnd));
                }
                LoadGrid();
            } else {
                //if nothing came back, set it back to the default
                 gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": 100  };
            }
        }

        //GRID LOADING
        //pull the filters down and apply them to the grid - calling the .filter method will call the read automatically

        function LoadGrid() {
            LoadGridData();
        }

        function LoadFreshGrid() {
            var currentPageSize = $("#CurrentGrid").data("kendoGrid").dataSource.pageSize();
            // Ensure the page size is at least 100
            if (currentPageSize < 100) {
                currentPageSize = 100;
            }
            gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": currentPageSize };
            LoadGrid();
        }

        function LoadGridData() {
            
            var $dpCreatedStart = viewModel.startCreatedDate;
            if ($dpCreatedStart) {
                //Test to see if the start date is not empty, and if it is a valid date
                if (!Date.parse($dpCreatedStart)) {
                    alert("Created Start Date Must Be A Valid Date");
                    return;
                }
            }
            var $dpCreatedEnd = viewModel.endCreatedDate;
            if ($dpCreatedEnd) {
                //Test to see if the end date is not empty and if it is a valid date
                if (!Date.parse($dpCreatedEnd)) {
                    alert("Created End Date Must Be A Valid Date");
                    return;
                }
            }
            //Test to see if start date is less than end date
            if ($dpCreatedStart != '' && $dpCreatedEnd != '') {
                if (Date.parse($dpCreatedStart) > Date.parse($dpCreatedEnd)) {
                    alert(" Created End Date Must Be Greater Than Start Date");
                    return;
                }
            }

            var $filter = new Array();

            //user name
            var $txtConfigId = $("#txtConfigId").val();
            if ($txtConfigId) {
                gridFilters.UserName = $txtConfigId;
                $filter.push({ field: "ConfigurationName", operator: "contains", value: $txtConfigId });
            }
            //Created Date
            var startCreatedDate = viewModel.startCreatedDate;
            var endCreatedDate = viewModel.endCreatedDate;
            if (startCreatedDate) {
                gridFilters.CreatedStart = startCreatedDate;
            }
            if (endCreatedDate) {
                endCreatedDate.setHours(23, 59, 59, 999); // set to end of day
                gridFilters.CreatedEnd = endCreatedDate;
            }

            $("#CurrentGrid").data("kendoGrid").dataSource.query({ page: gridFilters.CurrentPage, filter: $filter, pageSize: gridFilters.PageSize, sort: sorts });
            $("#CurrentGrid").css("display", "block");
        }

        //ROW CLICK

        function RowClick() {
            // Get the grid
            var grid = $("#CurrentGrid").data("kendoGrid");
            //get the current page 
            gridFilters.CurrentPage = grid.dataSource.page();
            //get selected row here
            gridFilters.SelectedIndex = grid.select().index();
            // get the page size
            gridFilters.PageSize = grid.dataSource.pageSize();
            //save the filters
            $.post('/shared/Sessions/SaveTariffFilters', gridFilters);
        }

        //DATABOUND EVENT - setting a saved page and selected row
        //every time a page is changed or row selected, it also call sthe databind event, which calls this method, which is why we need the set variable to determine if some action has already been preformed.
        //also happens when you page, etc, dont remove this variable unless you can fully test this
        var set = -1;

        function OnDataBound(e) {

            var grid = e.sender;
            var gridHasData = grid.dataSource.data().length > 0;
            if (!gridHasData) {
                var columnCount = $(grid.thead.get(0)).children("tr").first().children("th").length;
                $(grid.tbody.get(0)).append(
                kendo.format("<tr class='custom-no-data-row'><td colspan='{0}'>No data to display.</td></tr>", columnCount)
                );
            }


            set++;
            //then once the page changes it hits this -  select the row
            if (set == 0) {

                //highlight the selected row (if they did)
                if (gridFilters.SelectedIndex > -1) {
                    //we have to set a timeout since the databind event gets called again :(
                    var row = $("#CurrentGrid").data("kendoGrid").tbody.find(">tr:not(.k-grouping-row)").eq(gridFilters.SelectedIndex);
                    $("#CurrentGrid").data("kendoGrid").select(row);
                }
            }
            SetExportData();

        }

        function SetExportData() {
            var grid = $('#CurrentGrid').data('kendoGrid');
            //if (set == 0) {
            //    $(".k-grid-toolbar", "#CurrentGrid").append("<span class='exportButton'>Export: </span>");
            //}

            // ask the parameterMap to create the request object for you
            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
                .options.parameterMap({
                    page: grid.dataSource.page(),
                    sort: grid.dataSource.sort(),
                    filter: grid.dataSource.filter()
                });

            //EXCEL
            var $excelLink = $('#exportExcel');
            $excelLink.attr('href', GetExportHref($excelLink.attr('href'), requestObject, grid));

            //CSV
            var $csvLink = $('#exportCSV');
            $csvLink.attr('href', GetExportHref($csvLink.attr('href'), requestObject, grid));

            //PDF
            var $pdfLink = $('#exportPDF');
            $pdfLink.attr('href', GetExportHref($pdfLink.attr('href'), requestObject, grid));

            //show the div holding these items
            $("#exportButtons").css("display", "block");
        }

        function GetExportHref(href, requestObject, grid) {
            // Update the 'page' parameter with the grid's current page
            href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');
            // Update the 'sort' parameter with the grid's current sort descriptor
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            // Update the 'pageSize' parameter with the grid's current pageSize
            href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);
            //update filter descriptor with the filters applied
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
            //Additional Data
            var $currentCid = '@ViewData[Constants.ViewData.CurrentCityId]';
            href = href.replace(/customerId=([^&]*)/, 'customerId=' + ($currentCid || '~'));
            

            //start date and end date ticks
            var startTicks = 0;
            var endTicks = 0;

            // Date Range
            var $startDate = viewModel.startCreatedDate;
            var $endDate = viewModel.endCreatedDate;

            if (Date.parse($startDate)) {
                var newStartDate = new Date($startDate);
                startTicks = ((newStartDate.getTime() * 10000) + 621355968000000000);
            }

            if (Date.parse($endDate)) {
                $endDate.setHours(23, 59, 59, 999); // set to end of day
                var newEndDate = new Date($endDate);
                endTicks = ((newEndDate.getTime() * 10000) + 621355968000000000);
            }
            
            href = href.replace(/startDateTicks=([^&]*)/, 'startDateTicks=' + (startTicks));
            href = href.replace(/endDateTicks=([^&]*)/, 'endDateTicks=' + (endTicks));
            return href;
        }

        //additional data sent to the action when the read method is called (when we apply a filter)
        function additionalData() {
            
            var startTicks = 0;
            var endTicks = 0;

            // Date Range
            var $startDate = viewModel.startCreatedDate;
            var $endDate = viewModel.endCreatedDate;

            if (Date.parse($startDate)) {
                var newStartDate = new Date($startDate);
                startTicks = ((newStartDate.getTime() * 10000) + 621355968000000000);
            }

            if (Date.parse($endDate)) {
                $endDate.setHours(23, 59, 59, 999); // set to end of day
                var newEndDate = new Date($endDate);
                endTicks = ((newEndDate.getTime() * 10000) + 621355968000000000);
            }

            return {
                startDateTicks: startTicks,
                endDateTicks: endTicks,
                customerId: '@ViewData[Constants.ViewData.CurrentCityId]'
            };
        }


 
    </script>
}