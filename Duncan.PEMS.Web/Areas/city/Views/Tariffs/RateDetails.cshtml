@model Duncan.PEMS.Entities.Tariffs.ConfigProfileModel
@using Duncan.PEMS.Entities.Tariffs
@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@{
    ViewBag.Title = Model.ConfigProfileId == 0 ? "Import Tariff Configuration" : "Tariff Configuration Details";
}

@section Styles
{
    <style type="text/css">
        .k-widget.k-window {
            width: 500px;
        }

        .k-edit-form-container {
            width: 490px !important;
        }

        .button-grid-command {
            background: #456E97 !important;
            color: #fff !important;
            border: 1px solid #174A7D !important;
            padding: .25em .5em !important;
            font-size: 0.9em;
            box-shadow: 0px 0px 3px 2px #f2f2f2;
            display: inline-block;
            border-radius: 3px;
            cursor: pointer;
            position: relative;
            z-index: 1;
            margin-top: 5px;
            text-transform: uppercase;
            font-weight: bold;
            font-family: "futura-pt-n4", "futura-pt", Arial, sans-serif;
            box-shadow: 0px 0px 3px 2px #d5d5d5;
            float: right;
        }

        .k-grid .k-grid-edit {
            background: #33BAB1 !important;
            color: #fff !important;
            border: 1px solid #00A99D !important;
            padding: .25em .5em !important;
            font-size: 0.7em;
            box-shadow: 0px 0px 3px 2px #f2f2f2;
            display: inline-block;
            border-radius: 3px;
            cursor: pointer;
            z-index: 1;
            text-transform: uppercase;
            font-weight: bold;
            font-family: "futura-pt-n4", "futura-pt", Arial, sans-serif;
            box-shadow: 0px 0px 3px 2px #d5d5d5;
        }

        .k-grid .k-grid-delete {
            background: #33BAB1 !important;
            color: #fff !important;
            border: 1px solid #00A99D !important;
            padding: .25em .5em !important;
            font-size: 0.7em;
            box-shadow: 0px 0px 3px 2px #f2f2f2;
            display: inline-block;
            border-radius: 3px;
            cursor: pointer;
            z-index: 1;
            text-transform: uppercase;
            font-weight: bold;
            font-family: "futura-pt-n4", "futura-pt", Arial, sans-serif;
            box-shadow: 0px 0px 3px 2px #d5d5d5;
        }


        .button-add-tariffs > span {
            visibility: hidden;
            width: 0;
        }

        .k-grid .k-grid-edit > span {
            visibility: hidden;
            width: 0;
        }

        .k-grid .k-grid-delete > span {
            visibility: hidden;
            width: 0;
        }


        span.k-numerictextbox {
            width: 80px;
        }

        select {
            width: 140px;
        }
    </style>
}


@section PageHeader 
{
    <h1><a href="/">@HttpContext.Current.GetLocaleResource( ResourceTypes.Glossary, "Home" )</a> / 
        <a href="~/Areas/city/Views/Tariffs/Index">@HttpContext.Current.GetLocaleResource( ResourceTypes.Glossary, "Tariff Management" )</a> / 
        @HttpContext.Current.GetLocaleResource( ResourceTypes.Glossary, "Tariff Inquiry" ) / 
        <span>
            @{
                if ( Model.ConfigProfileId == 0 )
                {
                    HttpContext.Current.GetLocaleResource( ResourceTypes.Glossary, "Import Tariff Rate Configuration" ).ToString();
                }
                else
                {
                    HttpContext.Current.GetLocaleResource( ResourceTypes.Glossary, "Tariff Rate Configuration" ).ToString();
                }
            }
        </span></h1>
}



@using (Html.BeginForm( "RateDetails", "Tariffs", FormMethod.Post, new {@class = "customer-form", @id = "rateDetails"} ))
{
    
    @Html.HiddenFor(m => m.CustomerId)
    @Html.HiddenFor(m => m.ConfigProfileId)
    

        <div class="customer_tab_content_section">@HttpContext.Current.GetLocaleResource(ResourceTypes.Label, "Tariff Rates")</div>
        <div class="clear">
            @(Html.Kendo().Grid<TariffRateConfigurationModel>()
                    .Name("gridTRC")
                    .Columns(columns =>
                    {
                        columns.Bound(m => m.TariffRateConfigurationIdDisplay).Title("Tariff Rate Configuration Id");
                        columns.Bound(m => m.TariffRateCount).Title("Rates");
                        columns.Bound(m => m.MapDateDisplay).Title("Creation Date");
                    })
                    .Sortable()
                    .Scrollable()
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(read => read.Action("GetConfiguredTariffRateConfigurations", "Tariffs",
                            new { customerId = Model.CustomerId, configProfileId = Model.ConfigProfileId }).Type(HttpVerbs.Get))
                    )
                    .ClientDetailTemplateId("templateTariffRates")
                  )
            
            
            <script id="templateTariffRates" type="text/kendo-tmpl">
                @(Html.Kendo().Grid<TariffRateConfigurationProfileTariffRateModel>()
                        .Name("gridTRC#=TariffRateConfigurationIdDisplay#")
                        .Columns(columns =>
                        {
                            columns.Bound(m => m.RateName);
                            columns.Bound(m => m.RateDescription);
                            columns.Bound(m => m.RateInCents);
                            columns.Bound(m => m.PerTimeValue).ClientTemplate("\\#=CreateTimeSpanText(PerTimeValue, PerTimeUnitName)\\#").Title("Per Time");
                            columns.Bound(m => m.MaxTimeValue).ClientTemplate("\\#=CreateTimeSpanText(MaxTimeValue, MaxTimeUnitName)\\#").Title("Max Time");
                            columns.Bound( m => m.LinkedTariffRateName ).Title( "Linked Rate" );
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                        .Read(read => read.Action("GetConfiguredTariffRates", "Tariffs",
                            new
                            {
                                customerId = Model.CustomerId,
                                configProfileId = "#=ConfigProfileIdDisplay#",
                                tariffRateConfigurationId = "#=TariffRateConfigurationIdDisplay#"
                            }).Type(HttpVerbs.Get))
                        )
                        .Sortable()
                        .ToClientTemplate()
                )
            </script>

        </div>


    
        <div class="customer_actions">
            <button type="submit" name="submitButton" class="button important" value="SAVE">@HttpContext.Current.GetLocaleResource( ResourceTypes.Button, "Save" )</button>
            <button type="submit" name="submitButton" class="button previous" value="RETURN">@HttpContext.Current.GetLocaleResource( ResourceTypes.Button, "Return" )</button>
        </div>
    
    
}


<script type="text/javascript">

    var editState = 0;
    var stateReset = 0;
    var stateRefresh = 3;

    function NextState(editEvent) {
        if (editEvent == "OnEdit") {
            if (editState == 0) {
                editState = 1;
            } else if (editState == 1) {
                editState = 1;
            } else {
                editState = stateReset;
            }
            return;
        }
        if (editEvent == "OnSave") {
            if (editState == 1) {
                editState = 2;
            } else if (editState == 2) {
                editState = 2;
            } else {
                editState = stateReset;
            }
            return;
        }
        if (editEvent == "OnError") {
            editState = stateReset;
            return;
        }
        if (editEvent == "OnDataBound") {
            if (editState == 2) {
                editState = stateRefresh;
            } else {
                editState = stateReset;
            }
            return;
        }
    }


    $(document).ready(function () {


    });



    //**************************************************************
    // Add/edit meter spaces
    //**************************************************************

    function OnDataBound(e) {
        NextState("OnDataBound");

        if (editState == stateRefresh) {
            $("#TariffRateConfigurationGrid").data("kendoGrid").dataSource.read();
        }
        editState = stateReset;
    }

    function OnEdit(e) {
        NextState("OnEdit");

        if (e.model.isNew()) {

            // Set the popup window title.
            e.container.data("kendoWindow").title('Add Tariff');
            // Set the save button title.
            $(".k-window .k-grid-update").html("<span class=\"k-icon k-update\"></span>Save");

            e.model.CustomerId = $("#CustomerId").val();
        }
        else {
            // Set the popup window title.
            e.container.data("kendoWindow").title('Edit Tariff');
        }

    }

    function OnSave(e) {
        NextState("OnSave");

        // Set the model's PerTimeUnit
        if (e.model.PerTimeUnitId != $("#PerTimeUnitId").val()) {
            e.model.PerTimeUnitId = $("#PerTimeUnitId").val();
            e.model.PerTimeUnitName = $("#PerTimeUnitList option:selected").text();
            $("#PerTimeUnitName").val(e.model.PerTimeUnitName);

            e.model.dirty = true;
        }

        // Set the model's MaxTimeUnit
        if (e.model.MaxTimeUnitId != $("#MaxTimeUnitId").val()) {
            e.model.MaxTimeUnitId = $("#MaxTimeUnitId").val();
            e.model.MaxTimeUnitName = $("#MaxTimeUnitList option:selected").text();
            $("#MaxTimeUnitName").val(e.model.MaxTimeUnitName);

            e.model.dirty = true;
        }

        // Set the model's LinkedTariffRateId
        if (e.model.LinkedTariffRateId != $("#LinkedTariffRateId").val()) {
            e.model.LinkedTariffRateId = $("#LinkedTariffRateId").val();
            e.model.LinkedTariffRateName = $("#LinkableRateList option:selected").text();
            $("#LinkedTariffRateName").val(e.model.LinkedTariffRateName);

            e.model.dirty = true;
        }

    }


    function TariffRateErrorHandler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += "<br/>" + this;
                    });
                }
            });


            var grid = $("#TariffRateConfigurationGrid").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();
            });

            pemsPopupShowErrorWithTag(
                '@ViewData[Duncan.PEMS.Utilities.Constants.ViewData.CurrentArea]',
                '@ViewData[Duncan.PEMS.Utilities.Constants.ViewData.CurrentController]',
                '@ViewData[Duncan.PEMS.Utilities.Constants.ViewData.CurrentAction]',
                "1234", message);
        }
    }

</script>