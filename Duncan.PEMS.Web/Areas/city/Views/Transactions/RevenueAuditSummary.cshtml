@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@model Duncan.PEMS.Entities.Transactions.RevenueAudit


@{
    ViewBag.Title = "Revenue Reconciliation Report";
}

@section Scripts
{

    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

    <!-- file upload -->
    <script type="text/javascript" src="/scripts/Kendo/kendo.all.min.js"></script>

    <script type="text/javascript" src="/scripts/spin.min.js"></script> <!-- Added by Sai on July 2nd 2013 -->
    @Scripts.Render("~/bundles/kendo")

    <script id="rowTemplate" type="text/x-kendo-tmpl">
        <tr>
            <td><a href="${ IssueNo_final }" target="_blank">${ IssueNo_final }</a></td>
        </tr>
    </script>

    <script type="text/javascript">

        //** for file upload
        var selectedDataItems = [];

        var timeInterval;
        var spinner;

        // Define default date-picker dates
        var startD = new Date();

        startD.setDate(new Date('@ViewData[Duncan.PEMS.Utilities.Constants.ViewData.CurrentLocalTimeDisplay]').getDate());
        startD.setHours(0);
        startD.setMinutes(0);
        startD.setSeconds(0);

        var endD = new Date('@ViewData[Duncan.PEMS.Utilities.Constants.ViewData.CurrentLocalTimeDisplay]');
        endD.setDate(endD.getDate());
        endD.setHours(23);
        endD.setMinutes(59);
        endD.setSeconds(59);


        var viewModel = kendo.observable({
            startDate: startD,
            endDate: endD,
            totalSettleCntIs: 0,
            totalSettleAmtIs: "$0.00",
            totalRefundAmountIs: "$0.00",
            totalRefundCntIs: 0,
            totalTransAmountIs: "$0.00",
            totalTransCntIs: 0,

            totalDeclinedAmountIs: "$0.00",
            totalDeclinedCountIs: 0,
            totalUnprocessedAmountIs: "$0.00",
            totalUnprocessedCountIs: 0
        });


        var gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": 50 };
        var sorts = {};


        $(document).ready(function () {

            //*********************
            var myStartDateTime = $("#startDateTime").kendoDatePicker().data("kendoDatePicker");
            var startD = new Date();
            startD.setDate(new Date().getDate());
            myStartDateTime.value(startD);
            $("#startDateTime").css('width', '120px');

            var myEndDateTime = $("#endDateTime").kendoDatePicker().data("kendoDatePicker");
            $("#endDateTime").css('width', '120px');
            var endD = new Date();
            endD.setDate(endD.getDate());
            myEndDateTime.value(endD);


            kendo.bind($(document.body), viewModel);
            //showProgressBar(true);

            $('#DivRevenueAuditDetails').css('display', 'none');
            $('DivRevenueTotals').css('display', 'none');

            // when the view state changes, cache it
            viewModel.bind("change", function (e) {
                SaveViewState();
            });

            // if returning from details page, load cached page state (filters, grid state, etc)
            if (getParameterByName('rtn') == 'true') {

                LoadViewState();

                var CustomerId = '@ViewBag.CurrentCityID';

                //** time interval to invoke datasource of kendo grid after the grid is ready;
                timeInterval = window.setInterval(function () { multiSelectAssetTypeDropDownFunc(); }, 1000);

            } else {


            }


        });

        function multiSelectAssetTypeDropDownFunc() {
            window.clearInterval(timeInterval)
            invokeDataSource(50);

        }

        function SaveViewState() {

            /// Save filters view state to local storage, with fallback to
            /// server if HTML5 local storage not supported (IE7)

            // serialize viewstate
            var json = viewModel.toJSON();
            var stringified = JSON.stringify(json);

            // test for HTML5 local storage support
            if (typeof (Storage) !== "undefined") {
                // HTML5 sessionStorage support! Yay!
                window.sessionStorage.setItem("RevAudViewState", stringified);
            } else {
                // No web storage support..
                // todo: implement fall back to server caching
            }
        }



        function onTotSetLink() {

            $.ajax({
                url: '@Url.Action("GetEmptyResult", "Transactions")',
                type: 'POST',
                success: function (data) {
                    var startDateIs = viewModel.get('startDate');
                    var endDateIs = viewModel.get('endDate');
                    var refundAmountIs = viewModel.get('totalRefundAmountIs');
                    var refundCountIs = viewModel.get('totalRefundCntIs');
                    var settleAmountIs = viewModel.get('totalSettleAmtIs');
                    var settleCountIs = viewModel.get('totalSettleCntIs');

                    var declinedAmountIs = viewModel.get('totalDeclinedAmountIs');
                    var declinedCountIs = viewModel.get('totalDeclinedCountIs');
                    var unprocessedAmountIs = viewModel.get('totalUnprocessedAmountIs');
                    var unprocessedCountIs = viewModel.get('totalUnprocessedCountIs');

                    if (settleAmountIs == "$0.00") {
                        settleAmountIs = "0.00"//viewModel.get('totalSettleAmtIs')
                    } else {
                        settleAmountIs = viewModel.get('totalSettleAmtIs')
                    }

                    if (refundAmountIs == "$0.00") {
                        refundAmountIs = "0.00"//viewModel.get('totalRefundAmountIs')
                    } else {
                        refundAmountIs = viewModel.get('totalRefundAmountIs');
                    }


                    if (declinedAmountIs == "$0.00") {
                        declinedAmountIs = "0.00"//viewModel.get('totalSettleAmtIs')
                    } else {
                        declinedAmountIs = viewModel.get('totalDeclinedAmountIs')
                    }

                    if (unprocessedAmountIs == "$0.00") {
                        unprocessedAmountIs = "0.00"//viewModel.get('totalRefundAmountIs')
                    } else {
                        unprocessedAmountIs = viewModel.get('totalUnprocessedAmountIs');
                    }

              alert('reached');
                    location.href = '@Url.Action("RevenueAuditDetails2", "Transactions")?BatchDateIs=' + startDateIs + '&endBatchDateIs=' + endDateIs + '&transAmount=' + settleAmountIs + '&transCount=' + settleCountIs + '&refundAmount=' + refundAmountIs + '&refundCount=' + refundCountIs + '&settleAmount=' + settleAmountIs + '&settleCount=' + settleCountIs;
                    //location.href = '@Url.Action("RevenueAuditDetails2", "Transactions")?BatchDateIs=' + startDateIs + '&endBatchDateIs=' + endDateIs + '&transAmount=' + settleAmountIs + '&transCount=' + settleCountIs + '&refundAmount=' + refundAmountIs + '&refundCount=' + refundCountIs + '&settleAmount='+ settleAmountIs + '&settleCount=' + settleCountIs + '&DeclineAmt=' + declinedAmountIs + '&DeclineCnt=' + declinedCountIs + '&UnprsAmt=' + unprocessedAmountIs + '&UnprsCnt=' + unprocessedCountIs;


                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //  alert("Error: " + textStatus);
                }
            });
        }




        function LoadViewState() {
            /// Load filter view state if found in session

            var stringified;

            // test for HTML5 local storage support
            if (typeof (Storage) !== "undefined") {
                // HTML5 sessionStorage support! Yay!
                stringified = window.sessionStorage.getItem("RevAudViewState");
            } else {
                // No web storage support..
                // todo: implement fall back to server caching
            }

            // reconstruct the view model from the cache
            if (stringified) {
                var parsed = JSON.parse(stringified);
                if (parsed) {

                    //if (!parsed.licenseTypes) {
                    //    GetDynamicFilterValues();
                    //}
                    // first, restore dynamic filter/dropdown values
                    if (parsed.startDate) {
                        $('#startDateTime').val(parsed.startDate);
                        viewModel.set('startDate', parsed.startDate);
                    }
                    if (parsed.endDate) {
                        $('#endDateTime').val(parsed.endDate);
                        viewModel.set('endDate', parsed.endDate)
                    }

                }
            } else {
                // No view state stored in cache, so get dynamic filter values from server
                //console.log('no view state found, defaults will be used');
                //  GetDynamicFilterValues();
            }

            showProgressBar(false);

        }

        function GetDynamicFilterValues() {

            var url = '@Url.Action("GetFilterValues")';
            $.post(url, function (data) {

                //viewModel.set("EnforcementLicenseStateassets", data.EnforcementLicenseStateassets);
                //viewModel.set("vioDescs", data.vioDescs);
                // set date values in viewmodel
                showProgressBar(false);

            });
        }


        function LoadFreshGrid() {
            showProgressBar(false); //** Display Progress bar animation till the server returns response;

            //**Save in viewmodel objects:
            viewModel.set('startDate', $('#startDateTime').val());
            viewModel.set('endDate', $('#endDateTime').val());

            //*********************

            var $startDate = viewModel.startDate;

            //Test to see if the start date is not empty, and if it is a valid date
            if (!Date.parse($startDate)) {
                alert("Start Date Must Be A Valid Date");
                return;
            }
            var $endDate = viewModel.endDate;
            //Test to see if the end date is not empty and if it is a valid date
            if (!Date.parse($endDate)) {
                alert('End Date Must Be A Valid Date');
                return;
            }

            //Test to see if start date is less than end date
            if ($startDate != '' && $endDate != '') {
                if (Date.parse($startDate) > Date.parse($endDate)) {
                    alert('End Date Must Be Greater Than Start Date');
                    return;
                }
            }

            var CustomerId = '@ViewBag.CurrentCityID';
            invokeDataSource(50) //** set the default no. of records as 50

        }


        function invokeDataSource(maxCount) {

            //** The below line needs to be uncommented after fetching service
            showProgressBar(true); //** Display Progress bar animation till the server returns response;

            //**Sending the filters to the view() in kendo
            var $filter = new Array();

            // Date Range
            var startDate = viewModel.get('startDate');
            var endDate = viewModel.get('endDate');

            if (startDate) {
                gridFilters.DateRangeFrom = startDate;
                $filter.push({ field: "startDate", operator: "gte", value: startDate });
            }
            if (endDate) {
                gridFilters.DateRangeTo = endDate;
                $filter.push({ field: "endDate", operator: "lte", value: endDate });
            }


            $("#grdRevenueAuditDetails").data("kendoGrid").dataSource.filter($filter);

            $("#grdRevenueAuditDetails").data("kendoGrid").dataSource.read({ page: gridFilters.CurrentPage, filter: $filter, pageSize: gridFilters.PageSize, sort: sorts });


        }

        function UpdateGridState() {
            /// Update the grid state object with grid's current state
            var currentGrid = $("#grdRevenueAuditDetails").data("kendoGrid");

            gridFilters.CurrentPage = currentGrid.dataSource.page();
            gridFilters.SelectedRow = currentGrid.select().index();
            gridFilters.sorts = JSON.stringify(currentGrid.dataSource._sort);
            gridFilters.pageSize = currentGrid.dataSource.pageSize();

        }

        function GetAllFilterData() {
            var finalStart = $('#startDateTime').val();
            var finalEnd = $('#endDateTime').val();
            viewModel.set('startDate', $('#startDateTime').val());
            viewModel.set('endDate', $('#endDateTime').val());

            var page = 1;
            var pageSize = "~";
            var filter = "~";
            var sort = "~";



            return {
                // startDate: finalStart,
                //  endDate: finalEnd,
                PageIs: page,
                PageSizeIs: pageSize,
                FilterIs: filter,
                SortIs: sort
            }
        }

        //function onFileSelect(e) {

        //    //** Find the grid row index so that the changes can be applied
        //    var grid = $('#grdRevenueAuditDetails').data("kendoGrid");
        //    var selectedRow = grid.select();
        //    var selectedRowIndex = selectedRow.index();


        //    //** store js value in model property
        //    var firstItem = $('#grdRevenueAuditDetails').data().kendoGrid.dataSource.data()[selectedRowIndex];
        //    var getFileNames = firstItem.get('Beat');
        //    getFileNames += getFileInfo(e) + "<br>";
        //    firstItem.set('Beat', getFileNames);

        //}

        function getFileInfo(e) {
            return $.map(e.files, function (file) {
                var info = file.name;

                // File size is not available in all browsers
                if (file.size > 0) {
                    info += " (" + Math.ceil(file.size / 1024) + " KB)";
                }
                return info;
            }).join(", ");
        }




        function onDataBound(arg) {
            showProgressBar(false); //** Hide Progress bar animation after the server response;

            //** Display the Grid part
            $("#DivRevenueAuditDetails").show();
            $('#DivRevenueAuditDetails').css('display', 'inline');

            $("#DivRevenueTotals").show();
            $('DivRevenueTotals').css('display', 'inline');

            var data = $("#grdRevenueAuditDetails").data("kendoGrid").dataSource.data();

            var setAmt, setCnt, RefAmt, RefCnt, TransAmt, TransCnt;

            

            if (data.length != 0) {

                var firstItem = $('#grdRevenueAuditDetails').data().kendoGrid.dataSource.data()[0];
                /*
                var myTransAmount = firstItem.get('TotalTransactionAmount');
                var myTransCnt = firstItem.get('TotalTransactionCount');
                */

                var myRefundAmount = firstItem.get('TotalRefundAmount');
                var myRefundCnt = firstItem.get('TotalRefundCount');

                var mySettleAmount = firstItem.get('TotalSettleAmount');
                var mySettleCnt = firstItem.get('TotalSettleCount');

                var myDeclinedAmount = firstItem.get('TotalDeclinedAmount');
                var myDeclinedCount = firstItem.get('TotalDeclinedCount');

                var myUnprocessedAmount = firstItem.get('TotalUnprocessedAmount');
                var myUnprocessedCount = firstItem.get('TotalUnprocessedCount');

                viewModel.set('totalSettleAmtIs', mySettleAmount);


                setAmt = mySettleAmount;
                setCnt = mySettleCnt;
                RefAmt = myRefundAmount;
                RefCnt = myRefundCnt;
                /*
                TransAmt = myTransAmount;
                TransCnt = myTransCnt;
                */

                DclnAmt = myDeclinedAmount;
                DclnCnt = myDeclinedCount;
                UnpsrsdAmt = myUnprocessedAmount;
                UnpsrsdCnt = myUnprocessedCount;
            } else {

                setAmt = "0.00";
                setCnt = "0";
                RefAmt = "0.00";
                RefCnt = "0";
                /*
                TransAmt = "0.00";
                TransCnt = "0";
                */

                DclnAmt = "0.00";
                DclnCnt = "0";
                UnpsrsdAmt = "0.00";
                UnpsrsdCnt = "0";
            }

            //document.getElementById("TC").innerHTML = TransCnt;
            //document.getElementById("TA").innerHTML = TransAmt;
            document.getElementById("RC").innerHTML = RefCnt;
            document.getElementById("RA").innerHTML = RefAmt;
            document.getElementById("SC").innerHTML = setCnt;
            document.getElementById("SA").innerHTML = setAmt;
          
            document.getElementById("TDA").innerHTML = DclnAmt;
            document.getElementById("TDC").innerHTML = DclnCnt;
           
            document.getElementById("TUA").innerHTML = UnpsrsdAmt;
            document.getElementById("TUC").innerHTML = UnpsrsdCnt;
           

            document.getElementById("SA").innerHTML = '<a class="commaformat" href="#" onclick="onTotSetLink();">' + setAmt + '</a>';


            $('a.commaformat, #RA, #TDA, #TUA').text(function (i, v) {
                var val = parseFloat(v).toFixed(2);
                if (val.length > 6) {
                    var p = val.split('.');
                    var a = p[0].length % 3;
                    var n = p[0].slice(a).match(/.{1,3}/g);
                    return (a === 0 ? '' : p[0].slice(0, a) + ',') + n.join(',') + '.' + p[1];
                }
                return "$" + val;
            });

            $('#RC, #SC, #TDC, #TUC').text(function (i, v) {
                var val = parseFloat(v);//.toFixed(2);
                if (val.length > 6) {
                    var p = val.split('.');
                    var a = p[0].length % 3;
                    var n = p[0].slice(a).match(/.{1,3}/g);
                    return (a === 0 ? '' : p[0].slice(0, a) + ',') + n.join(',') + '.' + p[1];
                }
                return val;
            });
           
            viewModel.set('totalRefundAmountIs', RefAmt);
            viewModel.set('totalRefundCntIs', RefCnt);
            viewModel.set('totalSettleAmtIs', TransAmt);
            viewModel.set('totalSettleCntIs', setCnt);

            viewModel.set('totalDeclinedAmountIs', DclnAmt);
            viewModel.set('totalDeclinedCountIs', DclnCnt);
            viewModel.set('totalUnprocessedAmountIs', UnpsrsdAmt);
            viewModel.set('totalUnprocessedCountIs', UnpsrsdCnt);

            //** When No Data, just show zero values in total fields
            var result = $("#grdRevenueAuditDetails").data().kendoGrid.dataSource.data()
            if (result.length == 0) {
                $("#exportButtons").css("display", "none");
                alert('No Data.');
                return;
            }

            //** Display the export icons
        
            $("#exportButtons").css("display", "inline");
          
            UpdateGridState();
            UpdateExportLinks();

        }

        function onAjaxSuccess() {
            showProgressBar(false); //** Hide Progress bar animation after the server response;

            //** Display the Grid part
            $("#DivRevenueAuditDetails").show();
            $('#DivRevenueAuditDetails').css('display', 'inline');

            $("#DivRevenueTotals").show();
            $('DivRevenueTotals').css('display', 'inline');

            //** Display the export icons
            //$("#exportButtons").css("display", "inline");

            /*
            var totalTransCount = "0";
            var totalTransAmount = "$0.00";
            */
            var TotatRefundCount = "0";
            var TotalRefundAmount = "$0.00";
            var totalsettlecount = "0"
            var totalsettleamount = "$0.00";

            var totalDeclinedAmount = "$0.00";
            var totalDeclinedCount = "0";
            var totalUnprocessedAmount = "$0.00";
            var totalUnprocessedCount = "0"

            /*
            var totalTransCount_temp = 0;
            var totalTransAmount_temp = 0;
            */
            var TotatRefundCount_temp = 0;
            var TotalRefundAmount_temp = 0;
            var totalsettlecount_temp = 0;
            var totalsettleamount_temp = 0;


            var totalDeclinedAmount_temp = "$0.00";
            var totalDeclinedCount_temp = "0";
            var totalUnprocessedAmount_temp = "$0.00";
            var totalUnprocessedCount_temp = "0"

            var data = $("#grdRevenueAuditDetails").data("kendoGrid").dataSource.data();



            $.each(data, function (i, row) {
                var firstItem = $('#grdRevenueAuditDetails').data().kendoGrid.dataSource.data()[i];

                /*
                var TAmount = firstItem.get('TransAmount');
                totalTransAmount_temp += TAmount;

                var TransCount = firstItem.get('TransCount');
                totalTransCount_temp += TransCount;
                totalTransCount = totalTransCount_temp;
                */

                var RAmount = firstItem.get('RefundAmount');
                TotalRefundAmount_temp += RAmount;

                var RCount = firstItem.get('RefundCount');
                TotatRefundCount_temp += RCount;
                TotatRefundCount = TotatRefundCount_temp;

                var SAmount = firstItem.get('SettleAmount');
                totalsettleamount_temp += SAmount;

                var SCount = firstItem.get('SettleCount');
                totalsettlecount_temp += SCount;
                totalsettlecount = totalsettlecount_temp;

                /////
                var DAAmount = firstItem.get('DeclineAmt');
                totalDeclinedAmount_temp += DAAmount;

                var DCCount = firstItem.get('DeclineCnt');
                totalDeclinedCount_temp += DCCount;
                totalDeclinedCount = totalDeclinedCount_temp;

                var UPSAmount = firstItem.get('UnprsAmt');
                totalUnprocessedAmount_temp += UPSAmount;

                var UPCCount = firstItem.get('UnprsCnt');
                totalUnprocessedCount_temp += UPCCount;
                totalUnprocessedCount = totalUnprocessedCount_temp;

            });

            /*
            if (totalTransAmount_temp == 0) {
                totalTransAmount = totalTransAmount_temp + ".0";
            } else {
                totalTransAmount = totalTransAmount_temp / 100;
            }

            if (TotalRefundAmount_temp == 0) {
                TotalRefundAmount = TotalRefundAmount_temp + ".0";
            } else {
                TotalRefundAmount = TotalRefundAmount_temp / 100;
            }
            */

            if (totalsettleamount_temp == 0) {
                totalsettleamount = totalsettleamount_temp + ".0";
            } else {
                totalsettleamount = totalsettleamount_temp / 100;
            }

            ////
            if (totalDeclinedAmount_temp == 0) {
                totalDeclinedAmount = totalDeclinedAmount_temp + ".0";
            } else {
                totalDeclinedAmount = totalDeclinedAmount_temp / 100;
            }

            if (totalUnprocessedAmount_temp == 0) {
                totalUnprocessedAmount = totalUnprocessedAmount_temp + ".0";
            } else {
                totalUnprocessedAmount = totalUnprocessedAmount_temp / 100;
            }


            //document.getElementById("TC").innerHTML = totalsettlecount;
            //document.getElementById("TA").innerHTML = totalsettleamount;
            document.getElementById("RC").innerHTML = TotatRefundCount;
            document.getElementById("RA").innerHTML = TotalRefundAmount;
            document.getElementById("SC").innerHTML = totalsettlecount;
            document.getElementById("SA").innerHTML = '<a class="commaformat" href="@Url.Action("RevenueAuditDetails2", "Transactions")">' + totalsettleamount + '</a>';

            document.getElementById("TDA").innerHTML = totalDeclinedAmount;
            document.getElementById("TDC").innerHTML = totalDeclinedCount;
            document.getElementById("TUA").innerHTML = totalUnprocessedAmount;
            document.getElementById("TUC").innerHTML = totalUnprocessedCount;


            $('a.commaformat, #RA, #TDA, #TUA').text(function (i, v) {
                var val = parseFloat(v).toFixed(2);
                if (val.length > 6) {
                    var p = val.split('.');
                    var a = p[0].length % 3;
                    var n = p[0].slice(a).match(/.{1,3}/g);
                    return (a === 0 ? '' : p[0].slice(0, a) + ',') + n.join(',') + '.' + p[1];
                }
                return "$" + val;
            });

            $('#RC, #SC, #TDC, #TUC').text(function (i, v) {
                var val = parseFloat(v);//.toFixed(2);
                if (val.length > 6) {
                    var p = val.split('.');
                    var a = p[0].length % 3;
                    var n = p[0].slice(a).match(/.{1,3}/g);
                    return (a === 0 ? '' : p[0].slice(0, a) + ',') + n.join(',') + '.' + p[1];
                }
                return val;
            });

            //** When No Data, just show zero values in total fields
            var result = $("#grdRevenueAuditDetails").data().kendoGrid.dataSource.data()
            if (result.length == 0) {
                alert('No Data.');
                return;
            }

        }

        function UpdateExportLinks() {
            /// Update the href for the export buttons
            var grid = $('#grdRevenueAuditDetails').data('kendoGrid');
            // ask the parameterMap to create the request object for you
            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
                .options.parameterMap({
                    page: grid.dataSource.page(),
                    sort: grid.dataSource.sort(),
                    filter: grid.dataSource.filter()
                });

            //EXCEL
            var $excelLink = $('#exportExcel');
            $excelLink.attr('href', GetExportHref($excelLink.attr('href'), requestObject, grid));

            //CSV
            var $csvLink = $('#exportCSV');
            $csvLink.attr('href', GetExportHref($csvLink.attr('href'), requestObject, grid));

            //PDF
            var $pdfLink = $('#exportPDF');
            $pdfLink.attr('href', GetExportHref($pdfLink.attr('href'), requestObject, grid));

            $("#exportButtons").css("display", "inline");
            $("#exportActions").css("display", "block");
        }


        function GetExportHref(href, requestObject, grid) {
           
            // Update the 'page' parameter with the grid's current page
            href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');
            // Update the 'sort' parameter with the grid's current sort descriptor
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            // Update the 'pageSize' parameter with the grid's current pageSize
            href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);
            //update filter descriptor with the filters applied
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));


            //var $totalSettleAmount = "$" + viewModel.get('totalSettleAmtIs');
            var $totalSettleAmount = viewModel.get('totalSettleAmtIs');
            href = href.replace(/totalSettleAmount=([^&]*)/, 'totalSettleAmount=' + ($totalSettleAmount));


            var $StartDate = viewModel.get('startDate');
            href = href.replace(/startDate=([^&]*)/, 'startDate=' + ($StartDate));

            var $EndDate = viewModel.get('endDate');
            href = href.replace(/endDate=([^&]*)/, 'endDate=' + ($EndDate));


            //var $totalRefun/dAmount = "$" + viewModel.get('totalRefundAmountIs');
            var $totalRefundAmount = viewModel.get('totalRefundAmountIs');
            href = href.replace(/totalRefundAmount=([^&]*)/, 'totalRefundAmount=' + ($totalRefundAmount));

            var $totalRefundCnt = viewModel.get('totalRefundCntIs');
            href = href.replace(/totalRefundCnt=([^&]*)/, 'totalRefundCnt=' + ($totalRefundCnt));


            var $totalSettleCnt = viewModel.get('totalSettleCntIs');
            href = href.replace(/totalSettleCnt=([^&]*)/, 'totalSettleCnt=' + ($totalSettleCnt));

            ///
            //var $/totalDeclinedAmount = "$" + viewModel.get('totalDeclinedAmountIs');
            var $totalDeclinedAmount = viewModel.get('totalDeclinedAmountIs');
            href = href.replace(/declTotalAmt=([^&]*)/, 'declTotalAmt=' + ($totalDeclinedAmount));

            var $totalDeclinedCount = viewModel.get('totalDeclinedCountIs');
            href = href.replace(/declTotalCnt=([^&]*)/, 'declTotalCnt=' + ($totalDeclinedCount));

         
            
            //var $totalUnprocessedAmount = "$" + viewModel.get('totalUnprocessedAmountIs');
            var $totalUnprocessedAmount =  viewModel.get('totalUnprocessedAmountIs');
            href = href.replace(/unprosTotalAmt=([^&]*)/, 'unprosTotalAmt=' + ($totalUnprocessedAmount));

         
            var $totalUnprocessedCount = viewModel.get('totalUnprocessedCountIs');
            href = href.replace(/unprosTotalCnt=([^&]*)/, 'unprosTotalCnt=' + ($totalUnprocessedCount));
            /////
          
            return href;
        }

        function onGridRowSelected(e) {
            var selectedRows = this.select();
            selectedDataItems = [];
            for (var i = 0; i < selectedRows.length; i++) {
                var dataItem = this.dataItem(selectedRows[i]);
                selectedDataItems.push(dataItem);
            }


        }

        function showProgressBar(visisbility) {

            if (visisbility == false) {
                if (spinner != null || spinner != undefined) {
                    spinner.stop() //** hide the PB
                }
            } else {
                //** Create spinner and display PB
                var opts = {
                    lines: 13, // The number of lines to draw
                    length: 0, // The length of each line
                    width: 5, // The line thickness
                    radius: 15, // The radius of the inner circle
                    corners: 1, // Corner roundness (0..1)
                    rotate: 48, // The rotation offset
                    direction: 1, // 1: clockwise, -1: counterclockwise
                    color: '#000', // #rgb or #rrggbb
                    speed: 1, // Rounds per second
                    trail: 60, // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: false, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 2e9, // The z-index (defaults to 2000000000)
                    top: '380px', // Top position relative to parent in px
                    left: 'auto' // Left position relative to parent in px
                };
                spinner = new Spinner(opts).spin(document.body);
            }

        }



    </script>
}



@section Styles
{
    @Styles.Render("~/css/Kendo")


    <style type="text/css">
        .disabled {
            background-color: #F5F5F5 !important;
        }

        ready .filter-SearchButton {
            background-color: #ff6112 !important;
            border: 1px solid #00A99D !important;
        }
        ready .filter-SearchButton:hover {
	            background: #ccc!important;
	            text-decoration: none!important;
         }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-autocomplete {
            width: 169px;
        }

        .k-timepicker, .k-datetimepicker, .k-datepicker {
            background-color: transparent !important;
        }


        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }


        .k-pager-wrap .k-dropdown {
            width: 75px !important;
        }

        #exportButtons {
            display: none;
        }


        .k-textbox {
            height: auto !important;
        }

        #filterPanel_1 input[type=checkbox] {
            visibility: hidden;
        }

        /*.squaredThree input[type=checkbox] {
            visibility: hidden;
        }*/


        #ddlAssetType input[type=checkbox] {
            visibility: visible;
        }

        #assetStatusDropDown input[type=checkbox] {
            visibility: visible;
        }

        /*            for file upload            */
        .file-icon {
            display: inline-block;
            float: left;
            width: 48px;
            height: 48px;
            margin-left: 10px;
            margin-top: 13.5px;
        }

        .img-file {
            background-image: url(/content/web/upload/jpg.png);
        }

        .doc-file {
            background-image: url(/content/web/upload/doc.png);
        }

        .pdf-file {
            background-image: url(/content/web/upload/pdf.png);
        }

        .xls-file {
            background-image: url(/content/web/upload/xls.png);
        }

        .zip-file {
            background-image: url(/content/web/upload/zip.png);
        }

        .default-file {
            background-image: url(/content/web/upload/default.png);
        }

        #example .file-heading {
            font-family: Arial;
            font-size: 1.1em;
            display: inline-block;
            float: left;
            width: 450px;
            margin: 0 0 0 20px;
            height: 25px;
            -ms-text-overflow: ellipsis;
            -o-text-overflow: ellipsis;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }

        #example .file-name-heading {
            font-weight: bold;
        }

        #example .file-size-heading {
            font-weight: normal;
            font-style: italic;
        }

        li.k-file .file-wrapper .k-upload-action {
            position: absolute;
            top: 0;
            right: 0;
        }

        li.k-file div.file-wrapper {
            position: relative;
            height: 75px;
        }

        /* SQUARED THREE */
    </style>
}

@section PageHeader
{
    <h1>Transactions Management / <span>Revenue Reconciliation Report</span></h1>
}

@section PageFilter
{
    <div class="one-column">
        <div class="filter-option">
            <label class="filter-label">Date Range:</label>

            @(Html.Kendo().DatePicker()
                                .Name("startDateTime")
                                .HtmlAttributes(new { style = "width:120px;font-size:16px;" })
                                .Value(DateTime.Now)
                                .Events(e =>
                                    {
                                        e.Change("onStartDateChange");
                                    })
            )

            <script>
                function onStartDateChange() {
                    viewModel.set('startDate', $('#startDateTime').val());
                }
            </script>

            <span>to</span>

            @(Html.Kendo().DatePicker()
                                                    .Name("endDateTime")
                                                    .HtmlAttributes(new { style = "width:120px;font-size:16px;" })
                                                    .Value(DateTime.Now)
                                                    .Events(e =>
                                                    {
                                                        e.Change("onEndDateChange");
                                                    })
            )
            <script>
                function onEndDateChange() {
                    viewModel.set('endDate', $('#endDateTime').val());
                }
            </script>
            <span class="required_asterisk">*</span>
        </div>
    </div>


    <div class="filter-searchBox">
        <div style="float: left">
            <button id="btnSearch" type="button" value="Refresh" class="button important filter-SearchButton" onclick=" LoadFreshGrid(); return false; ">@HttpContext.Current.GetLocaleResource(ResourceTypes.Button, "Refresh")</button>
        </div>

    </div>


}


@section ExportButtons
{
    @*<div class="export-buttons" id="exportButtons">
            <a id="exportExcel" class="exportButton" href="@Url.Action("GetRevenueAuditSummary_Export", "Transactions", new { page = 1, pageSize = "~", filter = "~", sort = "~", gridType = "~", startDate = "~", endDate = "~", totalRefundAmount ="~", totalRefundCnt = "~", totalSettleAmount = "~",  totalSettleCnt = "~", declTotalAmt })">
                <img src='/images/export-excel.png' />
            </a>
            <a id="exportCSV" class="exportButton" href="@Url.Action("ExportToCsv", "Transactions", new { page = 1, pageSize = "~", filter = "~", sort = "~", gridType = "~", startDate = "~", endDate = "~", totalRefundAmount ="~", totalRefundCnt = "~" , totalSettleAmount = "~",  totalSettleCnt = "~" })">
                <img src='/images/export-csv.png' />
            </a>
            <a id="exportPDF" class="exportButton" href="@Url.Action("ExportToPdf", "Transactions", new { page = 1, pageSize = "~", filter = "~", sort = "~", gridType = "~", startDate = "~", endDate = "~", totalRefundAmount ="~", totalRefundCnt = "~" , totalSettleAmount = "~",  totalSettleCnt = "~" })">
                <img src='/images/export-pdf.png' />
            </a>
        </div>*@


    <div class="export-buttons" id="exportButtons">
        <a id="exportExcel" class="exportButton" href="@Url.Action("GetRevenueAuditSummary_Export", "Transactions", new { page = 1, pageSize = "~", filter = "~", sort = "~", gridType = "~", startDate = "~", endDate = "~", totalRefundAmount = "~", totalRefundCnt = "~", totalSettleAmount = "~", totalSettleCnt = "~", declTotalAmt = "~", declTotalCnt = "~", unprosTotalAmt = "~", unprosTotalCnt = "~" })">
            <img src='/images/export-excel.png' />
        </a>
        <a id="exportCSV" class="exportButton" href="@Url.Action("ExportToCsv", "Transactions", new { page = 1, pageSize = "~", filter = "~", sort = "~", gridType = "~", startDate = "~", endDate = "~", totalRefundAmount = "~", totalRefundCnt = "~", totalSettleAmount = "~", totalSettleCnt = "~", declTotalAmt = "~", declTotalCnt = "~", unprosTotalAmt = "~", unprosTotalCnt = "~" })">
            <img src='/images/export-csv.png' />
        </a>
        <a id="exportPDF" class="exportButton" href="@Url.Action("ExportToPdf", "Transactions", new { page = 1, pageSize = "~", filter = "~", sort = "~", gridType = "~", startDate = "~", endDate = "~", totalRefundAmount = "~", totalRefundCnt = "~", totalSettleAmount = "~", totalSettleCnt = "~", declTotalAmt = "~", declTotalCnt = "~", unprosTotalAmt = "~", unprosTotalCnt = "~" })">
            <img src='/images/export-pdf.png' />
        </a>
    </div>
}

@*<div class="grid-header" style="margin-left:-40px">

    </div>*@
<div id="DivRevenueTotals" style="display: none; width: 100%;margin-left:0px;margin-bottom:10px">
    <div style="width: 16%; float:left; height:70px; margin:2px">
        <div style=" text-align:center;  margin: 2px">Total Refund Amount</div>
        <div id="RA" style=" text-align:center;font-weight:bold;  margin:2px" class:'commaformat';>@Model.TotalRefundAmount</div>
    </div>
    <div style="width: 16%; float:left; height:70px; margin:2px">
        <div style=" text-align:center;  margin: 2px">Total Refund Count</div>
        <div id="RC" style=" text-align:center;font-weight:bold;  margin: 2px">@Model.TotalRefundCount</div>
    </div>

    <div style="width: 16%; float:left; height:70px; margin:2px">

        <div style=" text-align:center;  margin: 2px"><a id="totSetLink" class="totSetLinks"> Total Declined Amount</a></div>
        <div id="TDA" style=" text-align:center;font-weight:bold;  margin: 2px">@Model.TotalDeclinedAmount</div>
    </div>
    <div style="width: 16%; float:left; height:70px; margin:2px">
        <div style=" text-align:center;  margin: 2px">Total Declined Count</div>
        <div id="TDC" style=" text-align:center;font-weight:bold;  margin: 2px">@Model.TotalDeclinedCount</div>
    </div>
    <div style="width: 16%; float:left; height:70px; margin:2px">
        <div style=" text-align:center;  margin: 2px">Total Unprocessed Amount</div>
        <div id="TUA" style=" text-align:center; font-weight:bold; margin: 2px" class:'commaformat';>@Model.TotalUnprocessedAmount</div>
    </div>
    <div style="width: 16%; float:left; height:70px; margin:2px">
        <div style=" text-align:center;  margin: 2px">Total Unprocessed Count</div>
        <div id="TUC" style=" text-align:center; font-weight:bold; margin: 2px">@Model.TotalUnprocessedCount</div>
    </div>

    <div style="width: 32%;  height:70px; margin:2px">
        &nbsp;
    </div>
    <div style="width: 16%;  float:left; height:70px; margin:2px; margin-left : 33%">

        <div style=" text-align:center;  margin: 2px"><a id="totSetLink" class="totSetLinks" href="#" onclick="onTotSetLink();"> Total Settle Amount</a></div>
        <div id="SA" style=" text-align:center;font-weight:bold;  margin: 2px">@Model.TotalSettleAmount</div>
    </div>
    <div style="width: 16%; float:left; height:70px; margin:2px">
        <div style=" text-align:center;  margin: 2px">Total Settle Count</div>
        <div id="SC" style=" text-align:center;font-weight:bold;  margin: 2px">@Model.TotalSettleCount</div>
    </div>

    @*<div style="width: 16%; float:left; height:70px; margin:2px">
        <div style=" text-align:center;  margin: 2px">Total Transaction Amount</div>
        <div id="TA" style=" text-align:center; font-weight:bold; margin: 2px" class:'commaformat';>@Model.TotalTransactionAmount</div>
    </div>
    <div style="width: 16%; float:left; height:70px; margin:2px">
        <div style=" text-align:center;  margin: 2px">Total Transaction Count</div>
        <div id="TC" style=" text-align:center; font-weight:bold; margin: 2px">@Model.TotalTransactionCount</div>
    </div>*@

    @*new code*@



</div>
<div id="DivRevenueAuditDetails" class="grid-content" style=" width: 100%;margin-left:0px;">

    @(Html.Kendo().Grid<Duncan.PEMS.Entities.Transactions.RevenueAudit>()

                .Name("grdRevenueAuditDetails")
                  .EnableCustomBinding(true)
        .Columns(col =>
        {
            col.Bound(a => a.RevenueBatchID).Title("Date").Width("189px").ClientTemplate(@Html.ActionLink("#= RevenueBatchID #", "RevenueAuditDetails", "Transactions",
             new
             {
                 BatchID = "#= RevenueBatchID #",
                 BatchDateIs = "#= RevenueAuditDate_final #",
                 //transAmount = "#= TransAmount #",
                 //transCount = "#= TransCount #",
                 refundAmount = "#= RefundAmount #",
                 refundCount = "#= RefundCount #",
                 settleAmount = "#= SettleAmount #",
                 settleCount = "#= SettleCount #",
                 declineAmt = "#= DeclinedAmount #",
                 declineCnt = "#= DeclinedCount #",
                 unprocessedAmt = "#= UnprocessedAmount #",
                 unprocessedCnt = "#= UnprocessedCount #"

             },
             new { @onclick = "RowClick(this);" }).ToHtmlString()).Width(170);
            col.Bound(a => a.RefundAmountInDollars).Title("Refund Total").Width("110px");
            col.Bound(a => a.RefundCount).Title("Refund Count").Width("110px");
            col.Bound(a => a.SettleAmountInDollars).Title("Settle Total").Width("107px");
            col.Bound(a => a.SettleCount).Title("Settle Count").Width("110px");
            //col.Bound(a => a.TransAmountInDollars).Title("Transaction Amount").Width("135px");
            //col.Bound(a => a.TransCount).Title("Transaction Count").Width("135px");
            col.Bound(a => a.DeclinedAmountInDollars).Title("Declined Amount").Width("107px");
            col.Bound(a => a.DeclinedCount).Title("Declined Count").Width("110px");
            col.Bound(a => a.UnprocessedAmountInDollars).Title("Unprocessed Amount").Width("135px");
            col.Bound(a => a.UnprocessedCount).Title("Unprocessed Count").Width("135px");
        }
            )
              .Scrollable()
               .Navigatable()
                .Sortable()
                .AutoBind(false)
            //.Groupable()
                 .Pageable(x =>
                {
                    x.Enabled(true);
                    x.PreviousNext(true);
                    x.PageSizes(true);
                    x.Info(true);
                    x.Input(true);
                    x.Numeric(true);
                    x.Refresh(false);
                })

                 .Filterable()
                .Reorderable(reoder => reoder.Columns(true))
                .Selectable(selectable => selectable
                .Mode(GridSelectionMode.Single))
                .Resizable(resize => resize.Columns(true))
                .Pageable(pager => pager.PageSizes(new int[] { 50, 100, 200 })) // Enable paging
                .Events(events => events.Change("onGridRowSelected").DataBound("onDataBound"))
                .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(50)
                .Read(read => read.Action("GetRevenueAuditSummary", "Transactions").Data("GetAllFilterData"))

                )

    )

</div>






