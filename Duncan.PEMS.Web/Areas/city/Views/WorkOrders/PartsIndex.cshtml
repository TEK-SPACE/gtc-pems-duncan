<div style="clear: both"></div>
@using Duncan.PEMS.Utilities
@using Kendo.Mvc.UI
@model IEnumerable<Duncan.PEMS.Entities.WorkOrders.AvailablePart>

@{
    ViewBag.Title = HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Parts Management" );
}

@section ExportButtons 
{
    <div class="export-buttons" id="exportButtons">
        <a id="exportExcel" class="exportButton" href="@Url.Action( "ExportPartsToExcel", new {page = 1, pageSize = "~", filter = "~", sort = "~"} )">
            <img src='/images/export-excel.png' />
        </a>
        <a id="exportCSV" class="exportButton" href="@Url.Action( "ExportPartsToCsv", new {page = 1, pageSize = "~", filter = "~", sort = "~"} )">
            <img src='/images/export-csv.png' />
        </a>
        <a id="exportPDF" class="exportButton" href="@Url.Action( "ExportPartsToPdf", new {page = 1, pageSize = "~", filter = "~", sort = "~"} )">
            <img src='/images/export-pdf.png' />
        </a>
    </div>
}
<div class="grid-header ">
    @Html.ActionLink( "Import Parts", "PartsImport", "WorkOrders", null, new {@class = "button", @type = "button"} )
</div>
<div class="clear"></div>


@(Html.Kendo().Grid( Model )
      .HtmlAttributes( new {style = "max-width: 1693px; height: 470px;"} )
      .Name( "CurrentGrid" )
      .Columns( columns =>
                    {
                        columns.Bound(p => p.PartId).Width(100).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Part ID").ToString());
                        columns.Bound(p => p.PartName).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Part Name").ToString());
                        columns.Bound(p => p.MeterGroupDisplay).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Asset Type").ToString());
                        columns.Bound(p => p.CategoryDisplay).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Category").ToString());
                        columns.Bound(p => p.PartDesc).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Part Description").ToString());
                        columns.Bound(p => p.CostInCentsDisplay).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Retail Cost").ToString());
                        columns.Bound(p => p.StatusDisplay).Title(@HttpContext.Current.GetLocaleResource(ResourceTypes.GridColumn, "Part Status").ToString());
                     } )
      .Selectable( select => select.Mode( GridSelectionMode.Single ).Type( GridSelectionType.Row ) )
      .Reorderable( reorder => reorder.Columns( false ) )
      .Pageable( pager => pager.PageSizes( true ).PageSizes( new int[] {100, 250, 500, 1000} ) )
      .AutoBind( false )
      .Sortable( sortable => sortable.SortMode( GridSortMode.MultipleColumn ) )
      .Resizable( resize => resize.Columns( true ) )
      .Scrollable()
      .Events( events => events.DataBound( "OnDataBound" ) )
      .DataSource( dataSource => dataSource.Ajax().Read( read => read.Action( "GetAvailableParts", "WorkOrders" ).Type( HttpVerbs.Get ) )
      ))

@section Styles
{
    <style type="text/css">
        #CurrentGrid { display: none; }

        #exportButtons { display: none; }

        .k-grid-header .k-header {
            overflow: visible;
            white-space: normal;
        }

        .k-pager-wrap .k-dropdown { width: 75px !important; }
    </style>

}

@section PageHeader 
{
    <h1><a href="/">@HttpContext.Current.GetLocaleResource( ResourceTypes.Glossary, "Admin" )</a> / @HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Work Order Management" ) / <span>@HttpContext.Current.GetLocaleResource( ResourceTypes.PageTitle, "Parts Inquiry" )</span></h1>
}

@section PageFilter 
{      
    <div class="two-column">
            <div class="filter-option"  id="roleDiv">
            <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Asset Type" )</span>
            <select id="ddlAssetType" data-role="dropdownlist" class="filter-dropdown" data-bind="source: assetTypes, value: assetType" data-option-label="All" data-text-field="Text" data-value-field="Value"></select>
        </div>
        <div class="filter-option">
            <span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Category" )</span>
            <select id="ddlCategory" data-role="dropdownlist" class="filter-dropdown" data-bind="source: categories, value: category" data-option-label="All" data-text-field="Text" data-value-field="Value"></select>
        </div>
         <div class="filter-option"><span class="filter-label">@HttpContext.Current.GetLocaleResource( ResourceTypes.Label, "Part Name" )</span>
            <input id="txtPartName" class="filter-input k-textbox" /></div>    
    </div>
    <div class="filter-searchBox">
        <input type="button" value="@HttpContext.Current.GetLocaleResource( ResourceTypes.Button, "Refresh" )" id="btnSearch" class="button important filter-SearchButton"  onclick=" LoadFreshGrid(); return false; " /></div>
        
    <script type="text/javascript">
        var viewModel = kendo.observable({
            assetTypes: [],
            assetType: null,
            categories: [],
            category: null
        });

        //ON LOAD
        $(document).ready(function() {
            // bind the view model to the filter controls
            kendo.bind($(document.body), viewModel);
            LoadAssetTypes();
           // LoadGrid();
            $(window).bind('resize', function() {
                //  $('#CurrentGrid').freezeGridColumn(1);
            });
        });
      
        //LoadAssetTypes
        function LoadAssetTypes() {

            //get roles based on selected client
            $.post('/@ViewData[Constants.ViewData.CurrentCity]/pems/WorkOrders/GetPartAssetTypes', OnAssetTypesLoaded);
        }

        function OnAssetTypesLoaded(data) {
            viewModel.set('assetTypes', data);
            LoadCategories();
        }
        function LoadCategories() {
            //get roles based on selected client
            $.post('/@ViewData[Constants.ViewData.CurrentCity]/pems/WorkOrders/GetPartCategories', OnCategoriesLoaded);
        }

        function OnCategoriesLoaded(data) {
            viewModel.set('categories', data);
        }

        //FILTERS
        var gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": 100  };

        //GRID LOADING
        //pull the filters down and apply them to the grid - calling the .filter method will call the read automatically
        function LoadGrid() {
            LoadGridData();
        }

        function LoadFreshGrid() {
            var currentPageSize = $("#CurrentGrid").data("kendoGrid").dataSource.pageSize();
            // Ensure the page size is at least 100
            if (currentPageSize < 100) {
                currentPageSize = 100;
            }
            gridFilters = { "SelectedIndex": -1, "CurrentPage": 1, "PageSize": currentPageSize };
            LoadGrid();
        }
        var sorts = {};
        function LoadGridData() {
            var $filter = new Array();

            //user name
            var $partName = $("#txtPartName").val();
            if ($partName) {
                $filter.push({ field: "PartName", operator: "contains", value: $partName });
            }

            //status
            var $assetType = $("#ddlAssetType").data("kendoDropDownList").text();
            if ($assetType != "All") {
                $filter.push({ field: "MeterGroupDisplay", operator: "equals", value: $("#ddlAssetType").data("kendoDropDownList").text() });
            }

            //roleId
            var $category = $("#ddlCategory").data("kendoDropDownList").text();
            if ($category != "All") {
                $filter.push({ field: "CategoryDisplay", operator: "equals", value: $("#ddlCategory").data("kendoDropDownList").text() });
            }

            $("#CurrentGrid").data("kendoGrid").dataSource.query({ page: gridFilters.CurrentPage, filter: $filter, pageSize: gridFilters.PageSize, sort: sorts });
            $("#CurrentGrid").css("display", "block");
        }

        //ROW CLICK

        function RowClick() {
            // Get the grid
            var grid = $("#CurrentGrid").data("kendoGrid");
            //get the current page 
            gridFilters.CurrentPage = grid.dataSource.page();
            //get selected row here
            gridFilters.SelectedIndex = grid.select().index();
            // get the page size
            gridFilters.PageSize = grid.dataSource.pageSize();
            //save the filters
            $.post('/shared/Sessions/SaveUserFilters', gridFilters);
        }

        //DATABOUND EVENT - setting a saved page and selected row
        //every time a page is changed or row selected, it also call sthe databind event, which calls this method, which is why we need the set variable to determine if some action has already been preformed.
        //also happens when you page, etc, dont remove this variable unless you can fully test this
        var set = -1;
        function OnDataBound() {
            set++;
            //then once the page changes it hits this -  select the row
            if (set == 0) {

                //highlight the selected row (if they did)
                if (gridFilters.SelectedIndex > -1) {
                    //we have to set a timeout since the databind event gets called again :(
                    var row = $("#CurrentGrid").data("kendoGrid").tbody.find(">tr:not(.k-grouping-row)").eq(gridFilters.SelectedIndex);
                    $("#CurrentGrid").data("kendoGrid").select(row);
                }
            }
            SetExportData();
        }

        function SetExportData() {
            var grid = $('#CurrentGrid').data('kendoGrid');

            // ask the parameterMap to create the request object for you
            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
                .options.parameterMap({
                    page: grid.dataSource.page(),
                    sort: grid.dataSource.sort(),
                    filter: grid.dataSource.filter()
                });

            //EXCEL
            var $excelLink = $('#exportExcel');
            $excelLink.attr('href', GetExportHref($excelLink.attr('href'), requestObject, grid));

            //CSV
            var $csvLink = $('#exportCSV');
            $csvLink.attr('href', GetExportHref($csvLink.attr('href'), requestObject, grid));

            //PDF
            var $pdfLink = $('#exportPDF');
            $pdfLink.attr('href', GetExportHref($pdfLink.attr('href'), requestObject, grid));

            //show the div holding these items
            $("#exportButtons").css("display", "block");
        }

        function GetExportHref(href, requestObject, grid) {
            // Update the 'page' parameter with the grid's current page
            href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');
            // Update the 'sort' parameter with the grid's current sort descriptor
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            // Update the 'pageSize' parameter with the grid's current pageSize
            href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);
            //update filter descriptor with the filters applied
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
            ////Additional Data
            return href;
        }
    </script>
}